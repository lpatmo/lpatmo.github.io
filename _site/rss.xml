<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>The Coding Diaries</title>
        <description>The Coding Diaries - Linda Peng</description>
        <link>http://username.github.io</link>
        <link>http://username.github.io</link>
        <lastBuildDate>2015-05-24T23:56:52-04:00</lastBuildDate>
        <pubDate>2015-05-24T23:56:52-04:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Day 12: Swap Method #100daysofcode</title>
                <description>&lt;pre class=&quot;prettyprint&quot;&gt;
swap(x,y)

temp = x //store the original value of x

x = y //give x a new value

y = temp //give y the original value of x

&lt;/pre&gt;
</description>
                <link>http://username.github.io/day-12-swap-method-100daysofcode/</link>
                <guid>http://username.github.io/day-12-swap-method-100daysofcode</guid>
                <pubDate>2015-05-12T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Day 11: #100daysofcode&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    General tip: do not write tests (e.g. unit tests or integration tests) without a database!
  &lt;/li&gt;
  &lt;li&gt;
    Use &lt;code&gt;ag &quot;search term&quot; -l -G js&lt;/code&gt; (note: you need to have the &lt;a href=&quot;https://github.com/ggreer/the_silver_searcher/blob/master/doc/ag.1.md&quot;&gt;silver searcher&lt;/a&gt; to search for files ending in .js that include the search term).
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/day-11-100daysofcode/</link>
                <guid>http://username.github.io/day-11-100daysofcode</guid>
                <pubDate>2015-05-05T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Day 10: #100daysofcode&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    Don&#39;t use .fetch() inside the mongo console. Foo.find.fetch() works inside the browser console, though.
  &lt;/li&gt;
  &lt;li&gt;
    I didn&#39;t know &lt;code&gt;chmod +x manage.py&lt;/code&gt; was a shortcut that lets you type &lt;code&gt;./manage.py test&lt;/code&gt; instead of having to type out &lt;code&gt;python manage.py test&lt;/code&gt;!
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/day-10-100daysofcode/</link>
                <guid>http://username.github.io/day-10-100daysofcode</guid>
                <pubDate>2015-05-05T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Day 9: #100daysofcode&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    You can search by regex in sublime text!
  &lt;/li&gt;
  &lt;li&gt;
    SASS Guidelines &lt;a href=&quot;http://sass-guidelin.es/&quot;&gt;http://sass-guidelin.es/&lt;/a&gt; is a good resource.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/day-9-100daysofcode/</link>
                <guid>http://username.github.io/day-9-100daysofcode</guid>
                <pubDate>2015-04-30T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Day 8: #100daysofcode&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    I did not know rewriting &lt;code&gt;&lt;/code&gt; so that I could have more control over each of the form elements was as easy as transforming it into:
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  &lt;code&gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
  with &lt;code&gt;&lt;/code&gt; and &lt;code&gt;&lt;/code&gt; and &lt;code&gt;&lt;/code&gt; as variables.
&lt;/p&gt;

&lt;p&gt;
  :D
&lt;/p&gt;

&lt;p&gt;
  This post is a part of the &lt;a href=&quot;http://www.thecodingdiaries.com/the-100daysofcode-challenge/#sthash.eAFLTbDO.dpbs&quot;&gt;#100daysofcode&lt;/a&gt; challenge.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/day-8-100daysofcode/</link>
                <guid>http://username.github.io/day-8-100daysofcode</guid>
                <pubDate>2015-04-29T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Day 7: #100daysofcode&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    Python uses &quot;classical inheritance. JS uses &quot;prototypal&quot; inheritance.
  &lt;/li&gt;
  &lt;li&gt;
    In python, you have an &lt;strong&gt;init&lt;/strong&gt; constructor which generally contains some methods. In javascript, any function can be constructor by putting &lt;code&gt;new&lt;/code&gt; in front of the function call. Make a method available to every instance of this javascript constructor by adding it to the &lt;code&gt;prototype&lt;/code&gt; property of the constructor.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;class Example(object):
    def __init__(self, args):
         self.args = args

     def example_function(self):
         #something to self.args

f = Example(data)
f.example_function()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
  //python
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Example(args){
this.args = args;
}

Example.prototype.example_function = function() {
 //do something to this.args
}

f = new Example();
f.example_function();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
  //javascript
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    In python, functions and methods are different &lt;em&gt;types&lt;/em&gt;.
  &lt;/li&gt;
  &lt;li&gt;
    How to make an object inherit from another in javascript:
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;function Base() {
   console.log(&amp;#39;something&amp;#39;);
}

function Derived() {
   console.log(&amp;#39;something2&amp;#39;);
}

Derived.prototype = new Base();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    How to make a class inherit from another in python:
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;class Base(object):
   pass

class Derived(Base):
pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
  Source: Matt Chisholm (&lt;a href=&quot;https://blog.glyphobet.net/essay/2557&quot;&gt;https://blog.glyphobet.net/essay/2557&lt;/a&gt;)
&lt;/p&gt;

&lt;p&gt;
  This post is a part of the &lt;a href=&quot;http://www.thecodingdiaries.com/the-100daysofcode-challenge/#sthash.eAFLTbDO.dpbs&quot;&gt;#100daysofcode&lt;/a&gt; challenge.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/day-7-100daysofcode/</link>
                <guid>http://username.github.io/day-7-100daysofcode</guid>
                <pubDate>2015-04-28T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Day 6: #100daysofcode&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    It&#39;s common to use adjectives as the names for decorator functions.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  Decorator functions can pass in more than just simple value properties. They can also pass in functions.
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &quot;Functions in Python cannot be anonymous, and function declarations are not expressions, so they cannot be defined and used on the same line.&quot; (&lt;a href=&quot;https://blog.glyphobet.net/essay/2557&quot;&gt;Helpful article: difference between javascript and python&lt;/a&gt;)
  &lt;/li&gt;
  &lt;li&gt;
    Tip: move functions outside of constructor function so that the function is not invoked every time an object is instantiated. For example:
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;var Car = function(obj, loc) { 
var obj = {loc: loc };
obj.move = move;
return obj;
}

var move = function() { 
    obj.loc++;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    Decorators take in another function or a class as an argument and return a modified function or class.
  &lt;/li&gt;
  &lt;li&gt;
    The reason why most JS libraries are wrapped in an anonymous function: it protects the contents of the library from interference by other .js files.
  &lt;/li&gt;
  &lt;li&gt;
    In javascript, variable hoisting happens. That is, a variable is defined (&quot;hoisted&quot;) to the top of its scope (e.g. if &lt;code&gt;var a = 5&lt;/code&gt; on line 5 inside a function, it would be as if &lt;code&gt;var a;&lt;/code&gt; on line 2).
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  In python, there is no variable hosting, so an identifier would not exist until the interpreter reached the line of code where it was defined. (&lt;a href=&quot;https://blog.glyphobet.net/essay/2557&quot;&gt;Source&lt;/a&gt;)
&lt;/p&gt;

&lt;p&gt;
  &amp;#8211;&lt;br /&gt; Q: How do I simply the following?
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var amy = {loc: 1}
amy.loc++;
var ben = {loc: 1}
ben.loc++;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
  A:
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var move = function(car) { 
   person.loc++;
}

var carlike = function(obj, loc) {
   obj.loc = loc;
   return obj;
}

var amy = carlike({}, 1);
var ben = carlike({}, 2);
move(amy);
move(ben);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
  ==============
&lt;/p&gt;

&lt;p&gt;
  This post is a part of the &lt;a href=&quot;http://www.thecodingdiaries.com/the-100daysofcode-challenge/#sthash.eAFLTbDO.dpbs&quot;&gt;#100daysofcode&lt;/a&gt; challenge.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/day-6-100daysofcode/</link>
                <guid>http://username.github.io/day-6-100daysofcode</guid>
                <pubDate>2015-04-28T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Day 5: #100daysofcode&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Today I Learned: If you need to do a lot of relational queries with your data, try not to use mongoDB. &lt;a href=&quot;http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/&quot;&gt;(More Info)&lt;/a&gt; + overheard from engineers&#39; experience at a tech meetup
&lt;/p&gt;

&lt;p&gt;
  This post is a part of the &lt;a href=&quot;http://www.thecodingdiaries.com/the-100daysofcode-challenge/#sthash.eAFLTbDO.dpbs&quot;&gt;#100daysofcode&lt;/a&gt; challenge.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/day-5-100daysofcode/</link>
                <guid>http://username.github.io/day-5-100daysofcode</guid>
                <pubDate>2015-04-27T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Day 4: Random #100daysofocode&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;code&gt;&lt;/code&gt; will wrap the form in &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags. (Django)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  This post is a part of the &lt;a href=&quot;http://www.thecodingdiaries.com/the-100daysofcode-challenge/#sthash.eAFLTbDO.dpbs&quot;&gt;#100daysofcode&lt;/a&gt; challenge.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/day-4-random-100daysofocode/</link>
                <guid>http://username.github.io/day-4-random-100daysofocode</guid>
                <pubDate>2015-04-27T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Day 3: Random #100daysofcode&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;code&gt;white-space: pre-wrap&lt;/code&gt; preserves white spaces and breaks lines at newlines. (CSS)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  *You can index your models with &lt;code&gt;db_index=True&lt;/code&gt; (&lt;a href=&quot;https://docs.djangoproject.com/en/1.8/ref/models/fields/#db-index&quot;&gt;reference&lt;/a&gt;)
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    You can give your model metadata by adding &lt;code&gt;class Meta&lt;/code&gt;. Example from the official docs: &lt;pre&gt;&lt;code&gt;from django.db import models
class Ox(models.Model):
  horn_length = models.IntegerField()

  class Meta:
      ordering = [&quot;horn_length&quot;]
      verbose_name_plural = &quot;oxen&quot;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  Metadata options can include db_table, ordering, and verbose_name_plural. (&lt;a href=&quot;https://docs.djangoproject.com/en/1.8/ref/models/options/#django.db.models.Options.db_table&quot;&gt;reference&lt;/a&gt;)
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;a href=&quot;http://stackoverflow.com/questions/5870537/whats-the-difference-between-django-onetoonefield-and-foreignkey&quot;&gt;What is the difference between &lt;code&gt;OneToOneField&lt;/code&gt; and &lt;code&gt;ForeignKey&lt;/code&gt;?&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  This post is a part of the &lt;a href=&quot;http://www.thecodingdiaries.com/the-100daysofcode-challenge/#sthash.eAFLTbDO.dpbs&quot;&gt;#100daysofcode&lt;/a&gt; challenge.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/day-3-random-100daysofcode/</link>
                <guid>http://username.github.io/day-3-random-100daysofcode</guid>
                <pubDate>2015-04-23T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Day 2 Random: #100daysofcode&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    In a tuple such as: &lt;pre&gt;&lt;code&gt;  GENDER_CHOICES = (
    (&quot;M&quot;, &quot;Male&quot;),
    (&quot;F&quot;, &quot;Female&quot;),
    (&quot;?&quot;, &quot;Unknown&quot;)
  )
&lt;/code&gt;&lt;/pre&gt;
    
    &lt;p&gt;
      &amp;#8230; within &lt;code&gt;models.py&lt;/code&gt;, the first value is written into the database. The second value is the value that is displayed for the user. 
      
      &lt;li&gt;
        After writing up models.py, you need to run these two migrations to sync the database: &lt;pre&gt;&lt;code&gt;python manage.py makemigrations academy
python manage.py migrate academy
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      
      &lt;li&gt;
        Adding the &lt;code&gt;-p&lt;/code&gt; flag can make TWO directories! For example: &lt;pre&gt;&lt;code&gt;mkdir -p project/subdirectory1/subdirectory2
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      
      &lt;li&gt;
        By default, &lt;code&gt;BASE_DIR&lt;/code&gt; is set to the root of your project file &amp;#8212; the same spot where you can find &lt;code&gt;manage.py&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        open(): &lt;a href=&quot;https://docs.python.org/2/library/functions.html#open&quot;&gt;https://docs.python.org/2/library/functions.html#open&lt;/a&gt;
      &lt;/li&gt; 
      
      &lt;p&gt;
        *&lt;code&gt;csv.DictReader(open(csv_file))&lt;/code&gt; will return a list with each row in the file as a dictionary.
      &lt;/p&gt;
      
      &lt;ul&gt;
        &lt;li&gt;
          OMG THIS INSIDE admin.py IS MAGIC:
        &lt;/li&gt;
      &lt;/ul&gt;
      
      &lt;pre&gt;&lt;code&gt;from django.contrib import admin
from academy.models import Invite

class InviteAdmin(admin.ModelAdmin):
    list_display = (&quot;name&quot;, &quot;branch&quot;, &quot;gender&quot;, &quot;date_of_birth&quot;, &quot;race&quot;)
    list_filter = (&quot;branch&quot;, &quot;gender&quot;, &quot;race&quot;)
    search_fields = (&quot;name&quot;,)

admin.site.register(Invite, InviteAdmin)
&lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;
        *If you just want to &amp;#8216;deploy&amp;#8217; a site so that it&amp;#8217;s available to other users in your intranet network (e.g. other people in your office), try this: 1) Find your IP address by typing &lt;code&gt;ifconfig&lt;/code&gt; into your command line. 2) Run &lt;code&gt;$ python manage.py runserver 0.0.0.0:8000&lt;/code&gt; in your terminal. 3) Paste in http://[IP ADDRESS]:8000/admin/ into your browser. Theoretically, this should work, but it did not work for me just now. :(
      &lt;/p&gt;
      
      &lt;ul&gt;
        &lt;li&gt;
          Every time you change your models, in newer versions of Django, run something like: &lt;code&gt;python manage.py makemigrations appname&lt;/code&gt;. Every time a migration is run, a file will be added to &lt;code&gt;/appname/migrations&lt;/code&gt;. Next, you have to actually run the migration: &lt;code&gt;python manage.py migrate academy&lt;/code&gt;.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;code&gt;list_display&lt;/code&gt; is awesome. So is &lt;code&gt;list_editable&lt;/code&gt;.
        &lt;/li&gt;
      &lt;/ul&gt;
      
      &lt;p&gt;
        Thanks much to &lt;a href=&quot;http://first-django-admin.readthedocs.org/en/latest/&quot;&gt;http://first-django-admin.readthedocs.org/en/latest/&lt;/a&gt; for the surprisingly straightforward and short django tutorial.
      &lt;/p&gt;
      
      &lt;p&gt;
        This post is a part of the &lt;a href=&quot;http://www.thecodingdiaries.com/the-100daysofcode-challenge/#sthash.eAFLTbDO.dpbs&quot;&gt;#100daysofcode&lt;/a&gt; challenge.
      &lt;/p&gt;
&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
                <link>http://username.github.io/day-2-random-100daysofcode/</link>
                <guid>http://username.github.io/day-2-random-100daysofcode</guid>
                <pubDate>2015-04-22T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Day 1 Random: #100daysofcode&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    Note to self: if a div inside a div isn&#39;t recognizing the parent div as a parent when it&#39;s set to &lt;code&gt;position: absolute&lt;/code&gt;, it&#39;s because the closest parent needs to be set to &lt;code&gt;position: relative.&lt;/code&gt; Otherwise, it&#39;ll default to &lt;code&gt;position: static&lt;/code&gt;. (CSS)
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;Meteor.startup() { }&lt;/code&gt; is sort of like &lt;code&gt;$(function() {});&lt;/code&gt; except we use it with meteor. (MeteorJS)
  &lt;/li&gt;
  &lt;li&gt;
    Adjust the height of a textarea with its content: &lt;pre&gt;&lt;code&gt;$(&amp;#39;textarea&amp;#39;).css(&amp;#39;height&amp;#39;, &amp;#39;auto&amp;#39;); 
$(&amp;#39;textarea&amp;#39;).height(this.scrollHeight);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    If you want the ability to write markdown inside your WordPress posts, see:&lt;br /&gt; &lt;a href=&quot;http://www.elegantthemes.com/blog/tips-tricks/using-markdown-in-wordpress&quot;&gt;http://www.elegantthemes.com/blog/tips-tricks/using-markdown-in-wordpress&lt;/a&gt;. (I decided on using the PrettyPress Editor.)
  &lt;/li&gt;
  &lt;li&gt;
    Note: to pull from a &lt;em&gt;branch&lt;/em&gt; inside an upstream repo&amp;#8230; &lt;code&gt;git fetch upstream branchname&lt;/code&gt; and &lt;code&gt;git merge upstream branchname&lt;/code&gt;
  &lt;/li&gt;
  &lt;li&gt;
    If I notice that there are elements inside &lt;code&gt;view:source&lt;/code&gt; but can&#39;t find it inside the browser &lt;code&gt;elements&lt;/code&gt; tab, chances are it&#39;s because there was a &lt;code&gt;.remove()&lt;/code&gt; put on the elements. (JS)
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;localStorage&lt;/code&gt; is nice and lighter weight than cookies.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;Intl.DateTimeFormat().resolvedOptions().timeZone ? Intl.DateTimeFormat().resolvedOptions().timeZone&lt;/code&gt; returns the users&#39;s timezone! However, this is currently supported on only very limited modern browsers. (JS)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  This post is a part of the &lt;a href=&quot;http://www.thecodingdiaries.com/the-100daysofcode-challenge/#sthash.eAFLTbDO.dpbs&quot;&gt;#100daysofcode&lt;/a&gt; challenge.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/day-1-random-100daysofcode/</link>
                <guid>http://username.github.io/day-1-random-100daysofcode</guid>
                <pubDate>2015-04-21T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;The #100daysofcode Share-One-Thing-You-Learn Challenge&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I am pretty sure I am a better developer than I was 100 days ago, but some days I look at my coworkers&amp;#8217; commits, or think about all the frameworks I still don&amp;#8217;t have great experience with, and wonder about the actual rate of my progress.
&lt;/p&gt;

&lt;p&gt;
  Wouldn&amp;#8217;t it be cool if more people shared their small knowledge victories, and were able to point back to those archives and say &amp;#8220;this is what I&amp;#8217;ve learned&amp;#8221;?
&lt;/p&gt;

&lt;p&gt;
  So here&amp;#8217;s the challenge:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    Write a short blog post (or tweet/instagram) about &lt;i&gt;ONE NEW THING&lt;/i&gt; you learn that&amp;#8217;s code-related &amp;#8212; &lt;em&gt;no matter how small&lt;/em&gt; &amp;#8212; each day. It could be a code snippet. It could be a summary of a stackoverflow answer. It could be a sentence referencing an &amp;#8220;aha!&amp;#8221; moment. #100daysofcode
  &lt;/li&gt;
  &lt;li&gt;
    Do it for 100 days.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  Then, if you&amp;#8217;re interested in joining a 24/7 chat of independent beginners and experts helping each other learn coding topics faster, check out the &lt;a href=&quot;http://codebuddies.org&quot; target=&quot;_blank&quot;&gt;codebuddies.org&lt;/a&gt; slack chatroom &amp;#8212; and share the link to your #100daysofcode blog post, tweet, or instagram in the #100daysofcode channel. You can invite yourself to the chatroom here: &lt;a href=&quot;http://codebuddiesmeet.herokuapp.com&quot; target=&quot;_blank&quot;&gt;http://codebuddiesmeet.herokuapp.com&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  You can start the challenge any day.
&lt;/p&gt;

&lt;p&gt;
  Credit goes to &lt;a href=&quot;https://thegreatdiscontent.com/100days&quot;&gt;https://thegreatdiscontent.com/100days&lt;/a&gt; for the inspiration behind this challenge.
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/the-100daysofcode-challenge/</link>
                <guid>http://username.github.io/the-100daysofcode-challenge</guid>
                <pubDate>2015-04-20T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;SASSConf NYC Reportback (2014)&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I went to &lt;a href=&quot;sassconf.com&quot;&gt;SASSConf&lt;/a&gt; (my first SASS Conference!) in October 2014 and had a blast. The conference &amp;#8212; organized by &lt;a href=&quot;https://twitter.com/itsmisscs&quot;&gt;@itsmisscs&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/Snugug&quot;&gt;@Snugug&lt;/a&gt; and supported by a team of volunteers &amp;#8212; had probably the most robust agenda in a conference I&#39;d seen for a while.
&lt;/p&gt;

&lt;p&gt;
  SASSConf took place at convenient time for me &amp;#8212; right when I was just getting into the meat of refactoring some CSS into SCSS for a larger redesign project at work.
&lt;/p&gt;

&lt;p&gt;
  The first day of the conference was set aside for scheduled speaker talks, the second day was set aside for two back-to-back workshops (you could choose from one of two during the morning and afternoon), and the third day was set aside for an un-conference. A lot of care was put into everything from speaker accommodations and food to technical learning opportunities. Oh &amp;#8212; and the after-party on Friday encompassed a karoake and open bar that took place on a boat. A boat.
&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-4.jpg&quot; alt=&quot;A boat!&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
  Before I get into more beautiful boat pictures, though, let me recap my main three technical takeaways from the conference:
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;1. What&#39;s the point? Don&#39;t Repeat Yourself. (DRY)&lt;/strong&gt;&lt;br /&gt; Instead of writing straight CSS in a single file for a single component, organize your CSS into different files based on meaning (e.g. the names of your partials can be _buttons.scss, _colors.scss, _layout.scss), and use variables and nesting to keep the CSS organized nicely. Doing this helps get rid of repetitive styles.
&lt;/p&gt;

&lt;p&gt;
  I also learned that people were actually using different versions of SASS &amp;#8212; i.e. there was &quot;rubysass&quot; versus &quot;libsass.&quot; Libsass is a little behind rubysass in its development, but still comes with some advanced features such as maps and lists. There are also a ton of supplementary tools that some SASS developers use such as Compass, Bourbon (a mixin library), grunt.js, gulp.js, etc.
&lt;/p&gt;

&lt;p&gt;
  However, my takeaway was that it wasn&#39;t important to go out and use every SASS feature or accompanying tool available. You should use SASS in a way that makes sense for your project, keeping in mind that it&#39;s supposed to _help _you write CSS more cleanly and follow the DRY way of thinking.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;2. Mobile first!&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  I asked some conference-goers &amp;#8212; including &lt;a href=&quot;https://twitter.com/jina&quot;&gt;@jina&lt;/a&gt;, a co-organizer for one of the workshops &amp;#8212; what their opinion was of using max-width vs. min-width media queries, and basically got a unanimous response in favor of mobile first. &lt;em&gt;Min-width&lt;/em&gt; media queries it is, then.
&lt;/p&gt;

&lt;p&gt;
  In mobile first, you&#39;re developing for mobile devices from the start &amp;#8212; making sure your website looks great on phones and tablets &amp;#8212; before adding CSS styles that change the layout of the page as you stretch the page. Basically, one of the advantages of &quot;mobile first&quot; is that you don&#39;t need to specify a breakpoint size to target mobile devices only.
&lt;/p&gt;

&lt;p&gt;
  &lt;em&gt;(Side note: I&#39;m super glad I hopped on the mobile-first train, since I ended up suggesting it to my coworker, and we made a decision to go with it, and it made every part of the redesign project a lot easier.)&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;
  A couple of other tips I picked up re: writing CSS for the responsive web:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    Use ems instead of pixels (http://blog.cloudfour.com/the-ems-have-it-proportional-media-queries-ftw/). This might give you problems with IE8, but there are great libraries out there that help fix problems. &lt;strong&gt;UPDATE:&lt;/strong&gt; Thanks Ana Tudor for pointing out that this issue isn&amp;#8217;t really an issue anymore! The CloudFour blog post was published in 2012.
  &lt;/li&gt;
  &lt;li&gt;
    Use &lt;a href=&quot;http://modernizr.com/&quot;&gt;modernizr&lt;/a&gt;, a javascript library that will do a quick check for what things are supported.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;https://github.com/jina/refactoring/blob/master/examples/named-media-queries.scss&quot;&gt;https://github.com/jina/refactoring/blob/master/examples/named-media-queries.scss&lt;/a&gt; has a a great example of a media query mixin.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$bp-tiny: 300px;
$bp-small: 500px;
$bp-medium: 600px;
$bp-large: 800px;
$bp-larger: 1000px;
$bp-full: 1200px;`

@mixin breakpoint($media) {
@if $media == bp-tiny {
@media only screen and (min-width: $bp-tiny) {
@content;
}
}
@else if $media == bp-small {
// small and medium are 1px smaller than their previous variable
@media only screen and (min-width: $bp-small - 1) {
@content;
}
}
@else if $media == bp-medium {
@media only screen and (min-width: $bp-medium - 1) {
@content;
}
}
@else if $media == bp-large {
@media only screen and (min-width: $bp-large - 1) {
@content;
}
}
@else if $media == bp-larger {
@media only screen and (min-width: $bp-larger - 1) {
@content;
}
}
@else if $media == bp-full {
@media only screen and (min-width: $bp-full - 1) {
@content;
}
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
  For a quick demo on use cases, this is what the CSS class .sidebar using the breakpoint mixin looks like when compiled: &lt;a href=&quot;http://sassmeister.com/gist/ea430284384722b8f850&quot;&gt;http://sassmeister.com/gist/ea430284384722b8f850&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;3. Your style guides should be &quot;living.&quot;&lt;/strong&gt;&lt;br /&gt; My takeaways:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &quot;Static (un-automated) documentation is a lie waiting to happen. Live style guides are great.&quot; &amp;#8211; anonymous.
  &lt;/li&gt;
  &lt;li&gt;
    Basically, the argument for &quot;living style guides&quot; (style guides that developers don&#39;t manually have to update, because it updates automatically with CSS commits) is that style guides are fluid and will change. The design will change.
  &lt;/li&gt;
  &lt;li&gt;
    Meetup.com has an example of a robust style guide: github.com/meetup/meetup-swatches
  &lt;/li&gt;
  &lt;li&gt;
    https://github.com/hagenburger/livingstyleguide-workshop is a ruby gem that lets you easily create a style guide from your existing SCSS files using YAML/Markdown-type syntax.
  &lt;/li&gt;
  &lt;li&gt;
    KSS is another popular live style guide creation tool.
  &lt;/li&gt;
  &lt;li&gt;
    With style guides, adoption can sometimes be hard. You need to convince developers to use it and maintain it.&lt;br /&gt; &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;HELPFUL REFERENCE LINKS&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt; &lt;a href=&quot;http://www.anthonydispezio.com/sassconf2014&quot;&gt;http://www.anthonydispezio.com/sassconf2014&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    Lots of great examples of advanced uses of SASS &amp;#8212; with links to &lt;a href=&quot;http://sassmeister.com&quot;&gt;SassMeister&lt;/a&gt;, the JSFiddle-equivalent for CSS.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  &lt;a href=&quot;https://github.com/jina/refactoring/&quot;&gt;https://github.com/jina/refactoring/&lt;/a&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    Lots of great examples from this repo. The media query mixin above is inspired by one of the code examples here.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  &lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-2.jpg&quot; alt=&quot;SASS Stage&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;
  Only ~100 people attended the conference. Although this was a relatively small conference, it was clear that SASS was getting more and more widely used. According to a javascript developer I talked to, last year at CSSDevConf over half the talks were about SASS.
&lt;/p&gt;

&lt;p&gt;
  &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;OTHER NOTES I JOTTED DOWN&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    Mathematicians have done very cool animations using pure CSS keyframes/SASS.
  &lt;/li&gt;
  &lt;li&gt;
    Hampton (&lt;a href=&quot;https://twitter.com/hcatlin&quot;&gt;@hcatlin&lt;/a&gt;) is the creator of SASS and is mostly working on upgrading libsass (&lt;a href=&quot;https://github.com/sass/libsass&quot;&gt;https://github.com/sass/libsass&lt;/a&gt;) to the same level as RubySASS (&lt;a href=&quot;https://rubygems.org/gems/sass&quot;&gt;https://rubygems.org/gems/sass&lt;/a&gt;), which has a few more advanced features.
  &lt;/li&gt;
  &lt;li&gt;
    More advanced features include: SASS lets you iterate over numbers, lists, and maps. You can also use @for, @each, and @while.
  &lt;/li&gt;
  &lt;li&gt;
    &quot;Pairing between a designer and a developer is awesome because you&#39;re learning from each other.&quot; &amp;#8211; &lt;a href=&quot;http://twitter.com/jina&quot;&gt;@jina&lt;/a&gt; (I say this from experience: I totally agree!)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;MORE PHOTOS FROM SASSConf 2014&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-5.jpg&quot;&gt;&lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-5.jpg&quot; alt=&quot;I won a free conference book!&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  I won a book in a random lottery on the third day (unconference-style)!
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-1.jpg&quot;&gt;&lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-1.jpg&quot; alt=&quot;SASS Bag&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Goodie bags for the attendees.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-1-1.jpg&quot;&gt;&lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-1-1.jpg&quot; alt=&quot;photo 1 (1)&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Speakers on the first day.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-2-1.jpg&quot;&gt;&lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-2-1.jpg&quot; alt=&quot;photo 2 (1)&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Guess where the conference was hosted &amp;#8212; at Scholastic Inc.! The last time I&#39;d been in the building was 10 years ago, when I&#39;d won a writing award for a short story as a teenager.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-3-1.jpg&quot;&gt;&lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-3-1.jpg&quot; alt=&quot;photo 3 (1)&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Beautiful SASSMeister projected on a screen.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-4-1.jpg&quot;&gt;&lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-4-1.jpg&quot; alt=&quot;photo 4 (1)&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Between decks on the boat. Filtered.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-5-1.jpg&quot;&gt;&lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-5-1.jpg&quot; alt=&quot;photo 5 (1)&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Is that the Manhattan Bridge?
&lt;/p&gt;

&lt;p&gt;
  &lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2015/02/photo-3.jpg&quot; alt=&quot;SASS Boat&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/sassconf-nyc-reportback-2014/</link>
                <guid>http://username.github.io/sassconf-nyc-reportback-2014</guid>
                <pubDate>2015-03-02T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;On the road to competency &amp;#8211; two tips&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Last year, jumping from an HTML/CSS/JS mindset to working with full-stack apps was confusing. A single rendered page on a full-stack (e.g. Rails or Django or MeteorJS) app could be drawing in code from *multiple* files in different folders. I was often confused about where everything was located.
&lt;/p&gt;

&lt;p&gt;
  Eventually, my co-worker Tim gave me two great tips, which made a *huge* difference in my ability to debug problems in more complicated apps.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Tip #1: &lt;/strong&gt;Install and use the silver searcher (&lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot; target=&quot;_blank&quot;&gt;https://github.com/ggreer/the_silver_searcher&lt;/a&gt;). Once I started learning how to search for keywords by typing in &amp;#8220;&lt;strong&gt;ag [keyword] -C5&lt;/strong&gt;&amp;#8221; or &amp;#8220;&lt;strong&gt;ag [keyword] -l&lt;/strong&gt;&amp;#8221; in my terminal, I was able to figure out much more easily the files that certain bugs were located.
&lt;/p&gt;

&lt;p&gt;
  The first example returns to you the file paths and line numbers where the keyword match (as well as 5 lines before and after the matching row for context).
&lt;/p&gt;

&lt;p&gt;
  The second example returns the file paths and line numbers that match the keyword, but shows up as a list, and does not include any of the code or context. Using the &amp;#8220;-l&amp;#8221; search parameter is helpful if some of your search returns happen to be one long string.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Tip #2: &lt;/strong&gt;Use&lt;strong&gt; find . -name &amp;#8220;keyword&amp;#8221;&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  This command searches for file &lt;em&gt;names&lt;/em&gt; that match a specified keyword. Helpful if &amp;#8212; for example, the word &amp;#8220;apple&amp;#8221; is the &lt;em&gt;name&lt;/em&gt; of a file, but is never within the contents of any of my code.
&lt;/p&gt;

&lt;p&gt;
  =====
&lt;/p&gt;

&lt;p&gt;
  Interesting to reflect that in addition to being competent at &amp;#8220;googling&amp;#8221; for solutions on the internet, part of being a developer is becoming competent at searching for things in your own codebase.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/on-the-road-to-competency-two-helpful-searching-tips/</link>
                <guid>http://username.github.io/on-the-road-to-competency-two-helpful-searching-tips</guid>
                <pubDate>2015-03-02T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Learning TDD&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Just discovered &lt;a href=&quot;https://github.com/gregmalcolm/python_koans&quot; target=&quot;_blank&quot;&gt;https://github.com/gregmalcolm/python_koans&lt;/a&gt; by way of someone who proposed a &lt;a href=&quot;http://hangouts.codebuddies.org/posts/igZTy45aYYE9fKGtR&quot; target=&quot;_blank&quot;&gt;CodeBuddies hangout&lt;/a&gt; on this tonight.
&lt;/p&gt;

&lt;p&gt;
  It&amp;#8217;s a terminal &amp;#8220;game&amp;#8221; that you run while editing files to make the tests pass and it&amp;#8217;s surprisingly fun/a good review.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Steps for getting started:&lt;/strong&gt;&lt;br /&gt; 1. git clone https://github.com/gregmalcolm/python_koans.git&lt;br /&gt; 2. cd python_koans/python2&lt;br /&gt; 3. Run &lt;code&gt;python contemplate_koans.py&lt;/code&gt; in the terminal.&lt;br /&gt; 4. The terminal will tell you which file in python_koans/python2/koans to open up and edit. Edit the line and then run python contemplate_koans.py in the terminal again to make it pass, at which point you&amp;#8217;ll be pointed to the next error to fix.
&lt;/p&gt;

&lt;p&gt;
  SURPRISINGLY ADDICTIVE!
&lt;/p&gt;

&lt;p&gt;
  I recently had a coffee chat with &lt;a href=&quot;http://twitter.com/saronyitbarek&quot; target=&quot;_blank&quot;&gt;@saronyitbarek&lt;/a&gt;, who swore by TDD, and a lot of what she told me made sense &amp;#8212; i.e. the idea of outlining your steps before you start to code. We&amp;#8217;d just installed &lt;a href=&quot;https://github.com/django-nose/django-nose&quot; target=&quot;_blank&quot;&gt;nose&lt;/a&gt; at work too, so I plan to try to get into the habit of it too.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/learning-tdd/</link>
                <guid>http://username.github.io/learning-tdd</guid>
                <pubDate>2015-03-02T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Learning to code, but feeling lost? I interviewed some experts, and here’s what I found. (Part II)&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I recently had the pleasure of connecting with five talented people who had wisdom to share about their journeys into tech. I&amp;#8217;ll let their words speak for themselves.
&lt;/p&gt;

&lt;pre&gt;&lt;strong&gt;INTERVIEWEE PROFILES&lt;/strong&gt;&lt;/pre&gt;

&lt;div style=&quot;display: block; clear: both;&quot;&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.14-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-993&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.14-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;Stephanie Chang&lt;/strong&gt; (&lt;a href=&quot;http://bit.ly/1DxZ9KI&quot; target=&quot;_blank&quot;&gt;@stchangg&lt;/a&gt;) taught herself web development and &lt;a href=&quot;http://bit.ly/1DxZayg&quot; target=&quot;_blank&quot;&gt;hacked her way to a full-stack software engineering job at Khan Academy&lt;/a&gt;. She studies behavior change, occasionally pens &lt;a href=&quot;http://bit.ly/1vjhs0s&quot; target=&quot;_blank&quot;&gt;nerdy raps&lt;/a&gt;, and blogs at &lt;a href=&quot;http://bit.ly/1DxZehy&quot; target=&quot;_blank&quot;&gt;stchangg.com&lt;/a&gt;.
&lt;/div&gt;

&lt;div style=&quot;display: block; clear: both;&quot;&gt;
  &lt;strong&gt;&lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.27-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-994&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.27 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.27-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;Marcus Willock&lt;/strong&gt; (&lt;a href=&quot;http://bit.ly/1rlgyQn&quot; target=&quot;_blank&quot;&gt;@crazcalm&lt;/a&gt;) is a self-taught technologist who recently landed a QA engineering job at &lt;a href=&quot;http://bit.ly/Y7z5Ff&quot; target=&quot;_blank&quot;&gt;Adcade&lt;/a&gt;. When it comes to development, he is a hackathon enthusiast who tries to always have a side project in the works.
&lt;/div&gt;

&lt;div style=&quot;display: block; clear: both;&quot;&gt;
  &lt;p&gt;
    &lt;strong&gt;&lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.39-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-996&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.39 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.39-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;Cheney Tsai&lt;/strong&gt; (&lt;a href=&quot;http://bit.ly/Ze3Dqg&quot; target=&quot;_blank&quot;&gt;@cheneytsai&lt;/a&gt;) is currently a mobile solutions consultant at Google. When it comes to development, he’s a full-stack engineer with a deep interest in UX design.
  &lt;/p&gt;
  
  &lt;div style=&quot;display: block; clear: both;&quot;&gt;
    &lt;strong&gt;&lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.54-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-998&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.54 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.54-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;Wayne Warner&lt;/strong&gt; (&lt;a href=&quot;http://bit.ly/1uqKXjZ&quot; target=&quot;_blank&quot;&gt;@wawjr3d&lt;/a&gt;) is a senior front-end developer at Bloomberg LP who’s been programming for 15 years. He blogs at &lt;a href=&quot;http://bit.ly/1oitRxw&quot; target=&quot;_blank&quot;&gt;wawjr3d.tumblr.com&lt;/a&gt;.
  &lt;/div&gt;
  
  &lt;div style=&quot;display: block; clear: both;&quot;&gt;
    &lt;strong style=&quot;line-height: 24px; font-size: 16px;&quot;&gt;&lt;a style=&quot;color: #ff4b33;&quot; href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.39.08-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-999&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.39.08 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.39.08-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;Nicole Bieber&lt;/strong&gt; (&lt;a href=&quot;http://bit.ly/1vfry3g&quot; target=&quot;_blank&quot;&gt;@nicolethenerd&lt;/a&gt;) is a senior software engineer at &lt;a href=&quot;http://bit.ly/1ptdbCN&quot; target=&quot;_blank&quot;&gt;Amplify&lt;/a&gt; and an instructor at the &lt;a href=&quot;http://bit.ly/1rnwToT&quot; target=&quot;_blank&quot;&gt;New York Code + Design Academy&lt;/a&gt;. She earned an SB and MEng in Computer Science from MIT.
  &lt;/div&gt;
  
  &lt;div class=&quot;clear&quot;&gt;
  &lt;/div&gt;
  
  &lt;pre&gt;&lt;span style=&quot;color: #993300;&quot;&gt;&lt;strong&gt;ABOUT THE INTERVIEWER&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt;
  
  &lt;div style=&quot;display: block; clear: both;&quot;&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/08/linda.jpeg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-950&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Linda&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/08/linda.jpeg&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;Linda Peng&lt;/strong&gt; (&lt;a href=&quot;http://bit.ly/Y7wOKm&quot; target=&quot;_blank&quot;&gt;@lpnotes&lt;/a&gt;) is a front-end web developer at &lt;a href=&quot;http://bit.ly/1sskVNa&quot; target=&quot;_blank&quot;&gt;ActionKit&lt;/a&gt;. She recently became convinced that studying full-stack web development with strangers via self-organized Google Hangouts at &lt;a href=&quot;http://bit.ly/1mtKaMq&quot; target=&quot;_blank&quot;&gt;CodeBuddies.org&lt;/a&gt; (pair programming partners!) is incredibly fun. She enjoys Harry Potter, &lt;a href=&quot;http://bit.ly/1CkZOxF&quot; target=&quot;_blank&quot;&gt;playing violin&lt;/a&gt;, and collaborating with people on meaningful projects.
  &lt;/div&gt;
  
  &lt;div class=&quot;clear&quot;&gt;
  &lt;/div&gt;
  
  &lt;pre&gt;&lt;strong&gt;THE QUESTIONS&lt;/strong&gt;&lt;/pre&gt;
  
  &lt;h2&gt;
    1. What&amp;#8217;s your name, when did you first start learning to code, and what technologies are you most familiar with?
  &lt;/h2&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.14-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-993&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.14-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;STEPHANIE:&lt;/strong&gt; I’m Stephanie H. Chang. Because my name is so dang generic, I go by @stchangg on the internet.
  &lt;/p&gt;
  
  &lt;p&gt;
    I first started trying to learn how to code the summer after I graduated high school. I bought an intro to Java textbook and tried to teach myself, but got stuck after trying to get Eclipse set up on my Windows computer. When I started college a few months later, I took an introductory MATLAB programming course for engineers. I signed up for and dropped the core intro to CS course TWICE before I completed it for real, because I was so intimidated by the first week&amp;#8217;s course load and didn&amp;#8217;t think I could keep up. Even after successfully completing the intro to CS course and TA-ing for it, I tried to get into web development on my own and struggled to make progress, so much that I ruled out the possibility of becoming an engineer after college.
  &lt;/p&gt;
  
  &lt;p&gt;
    It was only after I graduated from college and worked for a while that I got a second wind learning web development and landed my current programming job. So for me, learning to program has been a long journey, filled with many false starts and many dark moments of insecurity. I&amp;#8217;m most familiar with Python, Google App Engine, JavaScript, jQuery, Backbone.js, &lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot;&gt;React&lt;/a&gt;, and git.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.27-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-994&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.27 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.27-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;MARCUS:&lt;/strong&gt; My name is Marcus. I first learned to code in school. I was a math major and Java 101 was a mandatory course. At the time, I hated it. Till this day, I still do not code in Java. However, towards the end of my math degree, I started to gain interest in coding, but I never had time to pursue it. A few years later, when I was in my master’s program for teaching Chinese, I suddenly had the free time to learn something new. I chose Python. I had heard good things about the language and there were no curly braces to deal with.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.39-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-996&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.39 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.39-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;CHENEY:&lt;/strong&gt; Hey! I’m Cheney and I’m currently a Mobile Solutions Consultant at Google. My first exposure to code was actually rather early when my dad made a digital card for my 4th birthday. He used BASIC in a MS-DOS environment to draw a cake and output MIDI for the birthday tune. From that moment on, I was hooked on the power that comes from teaching a computer to do things.
  &lt;/p&gt;
  
  &lt;p&gt;
    I was notorious in 5th grade for lugging around gigantic books that were far beyond me at the time (Visual Basic 6, Game Programming in C++, and so forth). While I never did build what I had imagined in my head (my own Pokemon RPG), it was great to start understanding how systems worked as well as to decompose gaming ROMs to modify my favorite games.
  &lt;/p&gt;
  
  &lt;p&gt;
    Though I dabbled in a lot of technologies, I didn’t start focusing on Computer Science and Engineering until my senior year in high school. From that point on, I found myself working in Web Development, Electronics, and now Mobile Development. I consider myself a Front-End leaning full-stack engineer given my interest in Design and User Experience, so I spend alot of time in JS as well as HTML/CSS. My scripting language of choice is probably Python though I’ve been experimenting more with Node and Go recently. Outside of web dev, I use Java for Android development and have been looking into Swift for iOS.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.54-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-998&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.54 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.54-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;WAYNE:&lt;/strong&gt; My name is Wayne Warner. I learned to code when I was about 15. I&amp;#8217;m most familiar with javascript, CSS, and HTML. But I&amp;#8217;ve used pretty much everything that exists: at some point PHP, C++, Ruby, VB.net, ASP.net, etc. Whatever you can think about! I work as a front-end developer now, but I&amp;#8217;m transitioning into management.
  &lt;/p&gt;
  
  &lt;p&gt;
    The first thing I learned was HTML and Javascript and CSS when I was 15. Then I had an internship with a gas company, where I gained experience with VB.net. I didn&amp;#8217;t really learn any of this in school. When I got to college, I learned computer science is a mathematical theory. I did some Java, C++, and C&amp;#8211;, which was a language that my school created. But I didn&amp;#8217;t learn that in a professional way. I couldn&amp;#8217;t have taken that knowledge and transferred that into what I know now. Officially, I majored in cognitive science with a concentration in computer science.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a style=&quot;color: #ff4b33;&quot; href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.39.08-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-999&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.39.08 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.39.08-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;NICOLE:&lt;/strong&gt; Hi, I’m Nicole! I was lucky enough to be introduced to programming at the young age of 8, when a volunteer at my elementary school taught us to program in Logo. I wish I could say I caught the coding bug then, but I don’t think I quite understood at that point that I could recombine individual commands to draw whatever I wanted &amp;#8211; I was mostly copying whole programs off a worksheet and changing a few variables to move them around or change the colors. I lucked out again when a different volunteer introduced me to programming on a TI-81 the next year, and I haven’t stopped programming since.
  &lt;/p&gt;
  
  &lt;p&gt;
    Today, I program almost exclusively in JavaScript, using AngularJS &amp;#8211; but I don’t consider it my “native” programming language &amp;#8211; that would have to be Java, which I used for most of my formative coding years. I’ve also spent a decent amount of time programming in Python. I consider myself a front-end developer these days, but that’s a fairly recent development.
  &lt;/p&gt;
  
  &lt;h2&gt;
    2. What was a turning point/lightbulb moment for you when you first started learning?
  &lt;/h2&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.14-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-993&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.14-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;STEPHANIE:&lt;/strong&gt; One big &amp;#8220;aha&amp;#8221; moment happened when I was working on a little project to scratch an itch I had. I like making visual art and wanted 1) to learn JavaScript, 2) to learn how to work with an API, and 3) to showcase my art on my personal website. I was disappointed with many popular Flickr plugins, which to me felt too slow and over-stylized. I wanted to make a plugin that would load batches of images from Flickr in the background as the user browsed my photos.
  &lt;/p&gt;
  
  &lt;p&gt;
    As I worked on this project, I ventured to ask an incredibly newbie question on StackOverflow revealing my total lack of understanding of how AJAX (asynchronous HTTP requests) worked. Since all the coding background I&amp;#8217;d had before was in Java (before Java 8), I didn&amp;#8217;t know about callbacks and functional programming paradigms. But once I grasped the basic concepts, APIs for JavaScript libraries like jQuery and Backbone.js started making a lot more sense.
  &lt;/p&gt;
  
  &lt;p&gt;
    The interesting thing is that, while you might be intimidated by all of the jargon at first, if you give it some time, and just patiently and persistently explore the giant maze that is modern web programming, one concept at a time, it&amp;#8217;ll start making more sense. It&amp;#8217;s overwhelming at first, but it really does get better with more exposure, and to be honest, you don’t even need to know everything or even a majority of it to make significant progress.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.27-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-994&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.27 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.27-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;MARCUS:&lt;/strong&gt; The turning point in my learning of programming was when I decided to try to make a career out of it. At the time of this decision, I was not good at programming, but having a career minded mindset helped me focus on learning how to code properly. I started caring about code quality, code design, clean code, and coding practices. Completing a project was no longer good enough. I now had to complete the project and have code that I could be proud of.
  &lt;/p&gt;
  
  &lt;p&gt;
    I started learning python by completing the course in Codecademy and doing &lt;a href=&quot;https://projecteuler.net/&quot; target=&quot;_blank&quot;&gt;Project Euler&lt;/a&gt; questions on the side. I got so obsessed with solving those problems that I would sit in the back and code during my grad classes. After studying by myself for a long while, I felt the need to branch out and search for other people who like to code.
  &lt;/p&gt;
  
  &lt;p&gt;
    Being a student at the time, I began my search by looking through the student organizations on campus. The student CS organization hung out in a place called the &amp;#8220;Cave.&amp;#8221; That place was, and is still filled, with CS majors who have fully embraced the hacking culture. Through that group, I learned about hackathons, tech meetups, hacker schools, and a bunch of outlandish tech trivia.
  &lt;/p&gt;
  
  &lt;p&gt;
    In terms of languages, I am most familiar with Python. It was my first language and, because I felt a need to learn the fundamentals of Computer Science, I used python as a tool to learn everything I missed out on by not studying CS in school. I bought python books for data structures and algorithms, GUI programming, web development, object oriented design, coding cookbooks, and plenty others just so I could beef up my CS knowledge.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.39-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-996&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.39 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.39-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;CHENEY:&lt;/strong&gt; I’ve had ups and downs with learning as my interests changed over the years, but what always seems to bring me back is the satisfaction when an idea is actualized. This ranges from seeing a fellow classmate’s design project, watching one of my students successfully program their Lego robot, and even the releases of new technologies and the possibilities they bring.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.54-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-998&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.54 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.54-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;WAYNE:&lt;/strong&gt; There&amp;#8217;s been a ton of lightbulb moments. A couple of memories stand out:&lt;br /&gt; &amp;#8211; Back in the day, when I figured out who to use javascript to do something I wanted to do that seemed really hard at the time. This was before position:fixed was possible in CSS.&lt;br /&gt; &amp;#8211; Another moment was when I made a project to learn how to code. When I was 15, I had an internship at a help desk. One of my co-workers asked: &amp;#8220;Does anyone know how to make websites?&amp;#8221; And I raised my hand. This was in 2001.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a style=&quot;color: #ff4b33;&quot; href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.39.08-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-999&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.39.08 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.39.08-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;NICOLE:&lt;/strong&gt; I really got into programming around the time when I was in fifth grade, at roughly the same time that I started spending a lot of time playing video games (that interest has since waned &amp;#8211; fortunately, my interest in programming is still going strong!) It was at that point that I decided that I wanted to be a programmer when I grew up &amp;#8211; particularly, a game programmer at Nintendo. So when the monthly Scholastic catalog came out featuring a Learn to Program Basic computer game, I had to have it &amp;#8211; because I was going to be a programmer! Fortunately, my parents were kind enough to oblige.
  &lt;/p&gt;
  
  &lt;p&gt;
    One of the big questions I’d had about programming up until that point was how game programmers moved their characters around on the screen. No programming language I had seen so far had commands for “up”, “down”, “left” or “right” &amp;#8211; and I often wondered where these missing commands were. What was the secret that I was missing? When my Learn to Program Basic software finally arrived, I found out &amp;#8211; the coordinate system! It was so brilliant, I wished I had thought of it myself.
  &lt;/p&gt;
  
  &lt;h2&gt;
    3. What tutorials or resources did you use when you were learning X, Y, or Z?
  &lt;/h2&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.14-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-993&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.14-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;STEPHANIE:&lt;/strong&gt; I worked through Michael Hartl&amp;#8217;s Rails Tutorial (http://www.railstutorial.org/) and watched Ryan Bates&amp;#8217;s RailsCasts (http://railscasts.com/) to learn how to build a website from the ground up, but as someone with zero knowledge of how the web worked (e.g., HTTP requests, servers, AJAX), I got overwhelmed pretty quickly.
  &lt;/p&gt;
  
  &lt;p&gt;
    The thing that eventually worked the most for me was to start working on small, fun projects and Google for help (StackOverflow, coding blogs) when I got stuck. However, this type of learning doesn’t work best for everyone, so it’s important to reflect on your own learning style and find what works for you.
  &lt;/p&gt;
  
  &lt;p&gt;
    Fortunately, there are tons of &lt;a href=&quot;https://www.khanacademy.org/computing/cs/programming&quot; target=&quot;_blank&quot;&gt;resources&lt;/a&gt; and &lt;a href=&quot;http://www.codecademy.com/&quot; target=&quot;_blank&quot;&gt;tutorials&lt;/a&gt; for beginners these days. Give them a whirl and read &lt;a href=&quot;http://www.amazon.com/Mindset-The-New-Psychology-Success/dp/0345472322&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Mindset&lt;/em&gt; by Carol Dweck&lt;/a&gt; while you’re doing so to ensure you celebrate and learn from failures instead of beating yourself up about them. The most important part of the process is to keep it fun and to help yourself &lt;a href=&quot;https://www.khanacademy.org/youcanlearnanything&quot; target=&quot;_blank&quot;&gt;internalize the belief that you can do it&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.27-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-994&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.27 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.27-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;MARCUS:&lt;/strong&gt; I am a big book person. If I want to learn something, I&amp;#8217;ll buy the book, read it, and write out the examples. I love second hand knowledge, reading tech books speeds up my growth process by introducing me to tested solutions for problem X, Y, or Z.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.39-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-996&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.39 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.39-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;CHENEY:&lt;/strong&gt; Oddly enough, I don’t have a go-to place for tutorials, but I approach it in more of an ad-hoc way. Google search is always my home base, and I try to follow relevant field leaders on social media for tips I wouldn’t know to search for. I’ve spent time on various blogs for focused tutorials (rather than full-fledged courses that I find overwhelming like Lynda’s offerings) as well as sites like bento.io.
  &lt;/p&gt;
  
  &lt;p&gt;
    I caution people looking to learn to avoid thinking you have to know everything before you can build anything. With so many new frameworks, trends, and options to choose from now, it’s unreasonable to think that you should have everything in your head. Instead, you should train yourself to be relentlessly resourceful. I don’t strive to be the go-to expert for Python or JS nor am I anywhere close. Rather, I strive to have the confidence that I can pick-up what I need to learn and solve any problems in front of me.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.54-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-998&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.54 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.54-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;WAYNE:&lt;/strong&gt; I can&amp;#8217;t even remember the first web resources I used!
  &lt;/p&gt;
  
  &lt;p&gt;
    These days, I just use the internet at large. I often just go to people&amp;#8217;s websites and look at the source code. To learn javascript, I went to dynamicdrive.com.
  &lt;/p&gt;
  
  &lt;p&gt;
    A couple years ago, I read through the source code for jQuery.
  &lt;/p&gt;
  
  &lt;p&gt;
    Now, I won&amp;#8217;t sit and read an entire repo, but I&amp;#8217;ll look at snippets here and there.
  &lt;/p&gt;
  
  &lt;p&gt;
    The trick is in knowing how to do a skilled Google search, and how to find the answer you’re looking for the first time.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a style=&quot;color: #ff4b33;&quot; href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.39.08-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-999&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.39.08 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.39.08-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;NICOLE:&lt;/strong&gt; Ooh, that’s a tough question &amp;#8211; there are so many great tutorials out there. I’m a big fan of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot; target=&quot;_blank&quot;&gt;Mozilla JavaScript Guide&lt;/a&gt;, and &lt;a href=&quot;http://tympanus.net/codrops/&quot; target=&quot;_blank&quot;&gt;Codrops&lt;/a&gt; has a lot of really beautiful front-end tutorials and examples. For another comprehensive JavaScript overview, &lt;a href=&quot;http://eloquentjavascript.net/&quot; target=&quot;_blank&quot;&gt;Eloquent JavaScript&lt;/a&gt; is pretty good, and for learning Rails, the &lt;a href=&quot;https://www.railstutorial.org/book&quot; target=&quot;_blank&quot;&gt;Learn Rails By Example&lt;/a&gt; tutorial really impressed me with how well it balanced teaching advanced material with keeping things beginner accessible.
  &lt;/p&gt;
  
  &lt;p&gt;
    If you’re looking for something a bit more beginner-friendly, I highly recommend &lt;a href=&quot;http://www.codecademy.com/&quot; target=&quot;_blank&quot;&gt;Codecademy&lt;/a&gt; and &lt;a href=&quot;https://www.khanacademy.org/&quot; target=&quot;_blank&quot;&gt;Khan Academy&lt;/a&gt; &amp;#8211; I’ve had good results using both of these with my students.
  &lt;/p&gt;
  
  &lt;h2&gt;
    4. What&amp;#8217;s been the most frustrating thing about learning to code or being a developer (if you work as one professionally)?
  &lt;/h2&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.14-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-993&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.14-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;STEPHANIE:&lt;/strong&gt; As a developer, I&amp;#8217;d say that there&amp;#8217;s always a healthy tension between writing good code and shipping. You don&amp;#8217;t want to over-engineer a solution, but you also don&amp;#8217;t want to write horrible code that, while functional, will make it harder to iterate and improve on the feature. It&amp;#8217;s frustrating at times because without more experience, it&amp;#8217;s really hard to know the answer. But at the same time, it&amp;#8217;s one of the cool non-deterministic challenges that can make programming a really creative pursuit.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.27-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-994&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.27 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.27-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;MARCUS:&lt;/strong&gt; The most frustrating thing about learning to code is learning all the associated knowledge that no one warns you about.
  &lt;/p&gt;
  
  &lt;p&gt;
    I started programming as a windows user. In terms of coding, everything seemed to be going fine. I had recently struggled through building a blog from scratch, and I was hoping to put it online. That was about the time where I found out that the typical server is a Linux box and, if you want to make your website live, you need to learn how to navigate Linux. I then spent the next month trying to install Ubuntu on my Windows 8 box so that I could learn Linux.
  &lt;/p&gt;
  
  &lt;p&gt;
    Once I had a (very) basic understanding of Linux, I tried to put my blog online again. That was about the time realized the difference between serving your code on localhost and serving your code on a Linux box that you happened to be ssh into. I also ran into a file permission issue that had me stumped for 2 months.
  &lt;/p&gt;
  
  &lt;p&gt;
    In the end, I did get a site running (&lt;a href=&quot;http://bit.ly/KxmjJP&quot; target=&quot;_blank&quot;&gt;a website that I made for my girlfriend as a gift&lt;/a&gt;), but the entire process scarred me for life. I just wish someone could have told me about this associated knowledge beforehand so that I could have been better prepared.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.39-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-996&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.39 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.39-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;CHENEY:&lt;/strong&gt; Imposter Syndrome. Some of the most seemingly confident people I know are developers, and these same people can also be the most insecure. In recent years, this concept is now well-written about, but it remains a common issue that it’s so easy to think that we’re just faking it.
  &lt;/p&gt;
  
  &lt;p&gt;
    In a way, it’s an empowering thing, because it keeps you striving to be better. On the other hand, it can be debilitating, because you’re giving time estimates you know you can’t keep and end up unbalancing other aspect of your life as you try to make up for it.
  &lt;/p&gt;
  
  &lt;p&gt;
    One unique aspect of writing code is the multiplier of effectiveness. Perhaps in other occupations and hobbies, an expert is someone who is only generating 3x more output than an amateur, but our industry has been enamored with the idea of a 10x engineer. With that wider range of output, it’s easy to perceive gigantic gaps between ourselves and those that we admire, and perhaps we’re a little bit too hard on ourselves on this one.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.54-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-998&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.54 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.54-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;WAYNE:&lt;/strong&gt; When you&amp;#8217;re in a workforce, you may be blocked by non-technical issues that have nothing to do with the technology that you want to solve.
  &lt;/p&gt;
  
  &lt;p&gt;
    Technically speaking, there&amp;#8217;s only one thing that I&amp;#8217;ve found impossible: and that&amp;#8217;s when it&amp;#8217;s not in the API. In my role as a front-end developer, I deal with browser support issues, but that actually never bothers me. That makes me very comfortable.
  &lt;/p&gt;
  
  &lt;p&gt;
    The only thing that bothers me as a front-end developer is that the industry can sometimes be so back-end oriented that it&amp;#8217;s difficult to get the respect you get.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a style=&quot;color: #ff4b33;&quot; href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.39.08-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-999&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.39.08 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.39.08-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;NICOLE:&lt;/strong&gt; One of the things that you often don’t get a great feel for while you’re still learning is dealing with other people’s code. In the real world, the APIs aren’t always going to be clean and readable, and sometimes you’ll have to support legacy code that’s messy or so old that nobody even remembers who wrote it. And of course, there’s always that other team that you’ll have critical dependencies on who can just never quite get it together. I say this a bit tongue-in-cheek, but just like being able to work with someone else’s code is a critical skill, so is being able to work with other people. Being a developer isn’t just about coding &amp;#8211; interpersonal skills are important too &amp;#8211; and it’s good to be able to roll with the punches, and to be able to offer constructive critique and ask for what you or your team needs without blaming or finger-pointing.
  &lt;/p&gt;
  
  &lt;h2&gt;
    5. What advice would you give to someone just starting out?
  &lt;/h2&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.14-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-993&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.14-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;STEPHANIE:&lt;/strong&gt; Internalize &lt;a href=&quot;http://www.amazon.com/Mindset-The-New-Psychology-Success/dp/0345472322&quot; target=&quot;_blank&quot;&gt;growth mindset&lt;/a&gt;. &lt;a href=&quot;http://www.stchangg.com/blog/why-stories-are-so-important/&quot; target=&quot;_blank&quot;&gt;Talk to yourself everyday to internalize it&lt;/a&gt;, if that&amp;#8217;s what it takes. Do it wherever &amp;#8211; on your lunch break, on your commute to work. (Nothing to be ashamed of! I did it and still do it.)
  &lt;/p&gt;
  
  &lt;p&gt;
    If you&amp;#8217;re not a person who struggles to maintain a growth mindset, the most important thing you can do is to create a safe space for you to learn. That might mean avoiding events where you have to perform under pressure (e.g., newbie-unfriendly hackathons).
  &lt;/p&gt;
  
  &lt;p&gt;
    Spend time upfront trying to find out how you can make the process fun for you, such as by working on tiny, inconsequential scratch-your-itch projects. Try to scope projects so that you can feel yourself making progress quickly, to create a positive feedback loop, and to keep them simple so that you don&amp;#8217;t get overwhelmed trying to learn a thousand different things at once.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.27-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-994&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.27 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.27-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;MARCUS:&lt;/strong&gt; Join a tech group, find a group of people who like to code and make them your friends, go to hackathons, listen to podcasts, watch conference videos, and read tech books. All the information and help needed to learn how to program is out there. You just need to find it.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.39-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-996&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.39 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.39-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;CHENEY:&lt;/strong&gt; Writing code is a bit different from some other disciplines. You’ll find that progress tends to be like a step function. If you find yourself in a flat part of a project, keep at it! Don’t be afraid to ask for help or look up resources.
  &lt;/p&gt;
  
  &lt;p&gt;
    Don’t worry about getting everything completely right when you’re learning. Set up small tangible goals for yourself. And above all else. Close some tabs. Information paralysis when you’re learning is a real problem.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.54-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-998&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.54 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.54-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;WAYNE:&lt;/strong&gt; I think everyone gets to coding and perceive it as a much harder thing as it actually is, saying &amp;#8220;my brain doesn&amp;#8217;t work that way.&amp;#8221;
  &lt;/p&gt;
  
  &lt;p&gt;
    To me, CSS is very simple: here&amp;#8217;re rules, and you follow them. That&amp;#8217;s easy compared to navigating personalities as a politician or a teacher. With computers, everything is simple, so I would tell people it&amp;#8217;s easier than you think it is.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a style=&quot;color: #ff4b33;&quot; href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.39.08-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-999&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.39.08 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.39.08-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;NICOLE:&lt;/strong&gt; Find a mentor or coding buddy, or a bunch of them! You can learn a lot nowadays from the internet, but it’s always nice to get a fresh perspective on things and get another set of eyes on your code. If you live in a city, you can probably find plenty of local meetups for new coders, and if not, there are sites like &lt;a href=&quot;http://bit.ly/ZOMlA2&quot; target=&quot;_blank&quot;&gt;Codermatch.me&lt;/a&gt; (&lt;em&gt;interviewer: or online learning communities like &lt;a href=&quot;http://bit.ly/1qwP46w&quot; target=&quot;_blank&quot;&gt;Code Buddies&lt;/a&gt;&lt;/em&gt;) to help you find a buddy.
  &lt;/p&gt;
  
  &lt;p&gt;
    And go to hackathons! I’ve found that’s a great place to try out a new tech stack and get introduced to lots of new ideas (and people); I know a lot of beginners can be a bit wary of going to their first hackathon, but they tend to be very welcoming places &amp;#8211; we don’t bite, I promise!
  &lt;/p&gt;
  
  &lt;h2&gt;
    6. Why do you keep doing it?
  &lt;/h2&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.14-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-993&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.14-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;STEPHANIE:&lt;/strong&gt; Creating products through programming is an awesome way to reach a lot of people super quickly. It&amp;#8217;s incredibly motivating to build a feature and have thousands or millions of users start using it and, better yet,&lt;a href=&quot;https://www.khanacademy.org/stories&quot; target=&quot;_blank&quot;&gt; telling you how it&amp;#8217;s helping them achieve their goals&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.27-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-994&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.27 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.27-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;MARCUS:&lt;/strong&gt; I love learning, and I love solving problems! Also, I love the fact that I can reuse code! One of the promises that academia makes to a math major is that once you prove something, you never have to prove it again. In the world of mathematicians that might be true, but in the world of college students, that is a lie! Programming, on the other hand, has kept that promise. The ability to reuse code is something that I cherish!
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.39-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-996&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.39 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.39-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;CHENEY:&lt;/strong&gt; I love to learn and I love to make things happen. The tools don’t actually matter to me, but engineering + design has been amazing at helping me communicate the ideas I have in my head.
  &lt;/p&gt;
  
  &lt;div class=&quot;clear&quot;&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.54-AM.png&quot;&gt;&lt;img class=&quot;clear&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.38.54 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.38.54-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;WAYNE:&lt;/strong&gt; I keep it doing it for the same reason I started: to be honest, it pays a lot.
  &lt;/p&gt;
  
  &lt;p&gt;
    Coming out of high school, I used to draw, and I was good at math. Computing jobs were lucrative, so I thought I’d do that. As Kanye West said, you can&amp;#8217;t have the same job for 10 years.
  &lt;/p&gt;
  
  &lt;p&gt;
    Being a developer is a really cushy job. You&amp;#8217;re pretty much in control of what you can do. People don&amp;#8217;t have a view into your code, so you hold a piece of knowledge someone else doesn&amp;#8217;t have. Like a plumber.
  &lt;/p&gt;
  
  &lt;p&gt;
    (When I was at The Ladders, I built an open-source javascript framework. BloombergView.com now uses it. It&amp;#8217;s something I&amp;#8217;ve been building for three years, and hopefully will be out this month or the next.)
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a style=&quot;color: #ff4b33;&quot; href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.39.08-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-999&quot; style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Screen Shot 2014-09-22 at 12.39.08 AM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/09/Screen-Shot-2014-09-22-at-12.39.08-AM.png&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;NICOLE:&lt;/strong&gt; Because I love it! I love making things and then being able to actually use and play with what I’ve made. And as a creator of educational software, knowing that kids all over the country are learning from software I worked on is incredibly fulfilling.
  &lt;/p&gt;
&lt;/div&gt;

&lt;div style=&quot;display: block; clear: both;&quot;&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://bit.ly/1t1aXg7&quot; target=&quot;_blank&quot;&gt;Click here to read Part I of this interview series.&lt;/a&gt;&amp;lt;/p&amp;gt; &amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/learning-to-code-but-feeling-lost-i-interviewed-some-experts-and-heres-what-i-found-part-ii/</link>
                <guid>http://username.github.io/learning-to-code-but-feeling-lost-i-interviewed-some-experts-and-heres-what-i-found-part-ii</guid>
                <pubDate>2014-09-25T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Learning to code, but feeling lost? I interviewed some experts, and here&amp;#8217;s what I found. (PART I)&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://bit.ly/1wN20uK&quot;&gt;Read Part II of this interview series.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Almost every night in the past two weeks, I’ve gone out and talked to beginners about their experiences learning to code.
&lt;/p&gt;

&lt;p&gt;
  I heard many stories of struggle: the pharmacy student who&amp;#8217;d excitedly signed up for the HTML/CSS track at Codecademy last summer, but then had gotten stuck and quit. The financial analyst who had some entrepreneurial ideas, but then tried and failed to figure out how to turn her idea into reality. The graduating business student anxious about picking up marketable skills for the job market next year. The business director who wanted to be able to understand the language of some of his co-workers better. The PHD candidate in biology interested in learning how to analyze big data with python.
&lt;/p&gt;

&lt;p&gt;
  I began to wonder: what were the stories of people who were able to successfully learn how to code? What frustrations did they face when they were just starting out, and how did they get past them? What advice would they give to beginners?
&lt;/p&gt;

&lt;p&gt;
  My goal was to interview people with a wide range of experience levels. But when I reached out to my network of friends and acquaintances, I was surprised by the diversity of responses I got back.
&lt;/p&gt;

&lt;p&gt;
  I am incredibly grateful to Lenny, Darrell, Henry, Betsy, and Felicia for sharing their stories with me.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;&lt;em&gt;About the interviewer:&lt;/em&gt;&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/08/linda.jpeg&quot;&gt;&lt;img style=&quot;margin-right: 10px; float: left;&quot; alt=&quot;Linda&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/08/linda.jpeg&quot; width=&quot;118&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;Linda Peng &lt;/strong&gt; (&lt;a href=&quot;http://twitter.com/lpnotes&quot; target=&quot;_blank&quot;&gt;@lpnotes&lt;/a&gt;) works at actionkit.com, blogs at this blog, plays violin when she&amp;#8217;s not geeking out about web development, and has started spending her weekends experimenting with &lt;a href=&quot;http://bit.ly/1qTUcUc&quot; target=&quot;_blank&quot;&gt;codebuddies.org&lt;/a&gt; to help people learning from code tutorials get un-stuck faster via virtual study groups.
&lt;/p&gt;

&lt;p&gt;
  &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Interviewee Profiles&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/08/Screen-Shot-2014-08-05-at-9.35.22-PM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-938&quot; style=&quot;float: left; margin-right: 10px;&quot; alt=&quot;Lenny&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/08/Screen-Shot-2014-08-05-at-9.35.22-PM.png&quot; width=&quot;118&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;Lenny Bogdonoff&lt;/strong&gt; is a developer at &lt;em&gt;The New Yorker&lt;/em&gt; and currently working on the New Public Arts Foundation. You can follow him &lt;a href=&quot;http://twitter.com/rememberlenny&quot; target=&quot;_blank&quot;&gt;@rememberlenny&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/08/Screen-Shot-2014-08-05-at-9.35.37-PM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-939&quot; style=&quot;float: left; margin-right: 10px;&quot; alt=&quot;Henry&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/08/Screen-Shot-2014-08-05-at-9.35.37-PM.png&quot; width=&quot;118&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;Henry Qin&lt;/strong&gt; is a PHD candidate in Computer Science at Stanford University working on RAMCloud, a distributed, low-latency key-value store.
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;&lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/08/Screen-Shot-2014-08-05-at-9.35.52-PM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-940&quot; style=&quot;float: left; margin-right: 10px;&quot; alt=&quot;Betsy&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/08/Screen-Shot-2014-08-05-at-9.35.52-PM.png&quot; width=&quot;118&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;Betsy Cannon&lt;/strong&gt; is a product engineer at Tumblr, Hacker School alumna, and collector of forks. She posts about math and forks at &lt;a href=&quot;http://forklady42.tumblr.com&quot; target=&quot;_blank&quot;&gt;forklady42.tumblr.com&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/08/Screen-Shot-2014-08-05-at-9.36.03-PM.png&quot;&gt;&lt;img style=&quot;float: left; margin-right: 10px;&quot; alt=&quot;Felicia&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/08/Screen-Shot-2014-08-05-at-9.36.03-PM.png&quot; width=&quot;118&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;strong&gt;Felicia O’Garro&lt;/strong&gt; is a developer evangelist at NineFold and co-founder of Code Crew, a meetup in NYC for people learning to code. You can follow her &lt;a href=&quot;http://twitter.com/feliciaogarro&quot; target=&quot;_blank&quot;&gt;@feliciaogarro&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
  &lt;img class=&quot;alignnone size-full wp-image-942&quot; style=&quot;font-size: 12px; line-height: 18px; float: left; margin-right: 10px;&quot; alt=&quot;Darrell&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/08/Screen-Shot-2014-08-05-at-9.36.15-PM.png&quot; width=&quot;118&quot; height=&quot;115&quot; /&gt;&lt;strong&gt;Darrell Simmons&lt;/strong&gt; is a freelance front-end developer currently working on &lt;a href=&quot;http://bit.ly/1kFMiQK&quot; target=&quot;_blank&quot;&gt;30Websites.com&lt;/a&gt; &amp;#8211; a project that helps people learn to code. He writes at &lt;a href=&quot;http://hellodrell.tumblr.com&quot; target=&quot;_blank&quot;&gt;hellodrell.tumblr.com&lt;/a&gt; and tweets &lt;a href=&quot;http://twitter.com/drell424&quot; target=&quot;_blank&quot;&gt;@drell424&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;strong&gt;1. When did you first start learning to code, and what technologies are you most familiar with?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;
  &lt;strong&gt;LENNY: &lt;/strong&gt;“I learned everywhere on the Internet. I got my first exposure to learn to program when I was in elementary school. My parents sent me to a computer summer camp. Basically it was a group of anti social geeks and a group of uber geeks. The uber geeks were instructed to teach the underlings how to walk through a week-long programming course. During the camps, I think I played more Starcraft than anything else. I went to that camp for three years. During one point I learned how to make a website on Dreamweaver.
&lt;/p&gt;

&lt;p&gt;
  I didn&amp;#8217;t remember anything. The takeaway I had was stupid computer security stuff I learned. I learned how to install Trojan horses and access unprotected network settings on other people’s computers. This wasn&amp;#8217;t so much programming as figuring out how stuff worked.
&lt;/p&gt;

&lt;p&gt;
  In high school I made a website associated with web comics. I liked Worms 2, the game, and started blogging on my own site. I remember being impressed by my Table layout skills and Sprite making abilities. The site I made back then Is still embarrassingly on angelfire. Link from 2004: &lt;a href=&quot;http://www.angelfire.com/oz/tomato/HOME.html&quot; target=&quot;_blank&quot;&gt;http://www.angelfire.com/oz/tomato/HOME.html&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Oddly enough, I didn&amp;#8217;t touch programming during high school. I went through a rebellious phase and defined that I was computer literate. I decided to pursue art and design oriented subjects. Looking back, this was a great idea. I came back around to the programming by the end of college. I was working a series of hourly paid jobs and decided there must be some better way. I got familiar with WordPress, learned the rules of front end development, familiarized myself with HTML/CSS, and began from there.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;BETSY:&lt;/strong&gt; “I first started learning to code in 2007 when my high school required me to take a Java class. I love data science (analysis and machine learning) but am also comfortable with back-end development.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;DARRELL:&lt;/strong&gt; “Prior to actually learning to code, I started making websites with WordPress (2010). I would use pre-made themes and then spend hours trying to get the site to look how I wanted it to but usually I just ended up frustrated. I decided I needed a more fundamental understanding of what was going on under the hood. I started with Codecademy and then watched a lot of video tutorials on Lynda.com. But something just wasn’t clicking. I couldn’t conceptualize how everything actually worked together. Less than a year ago (Fall 2013), I decided to take the plunge and signed up for the Front End Web Development (FEWD) course at General Assembly and haven’t looked back. Following FEWD, I also took their Back End Web Development course. However, I still feel most comfortable on the front end.
&lt;/p&gt;

&lt;p&gt;
  Currently, I am most proficient with front end technologies &amp;#8211; HTML, CSS, Javascript and most of the frameworks, plugins, and libraries that come with it. I would say I have an intermediate level understanding of Ruby on Rails and can hack together Rails apps.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;HENRY:&lt;/strong&gt; “I technically first started learning to code in Visual Basic when I was in middle school, but I did not really grok programming until I took my first CS class at Duke, where we learned to write simple 2D games using the Fang library.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;FELICIA:&lt;/strong&gt; “I started learning how to code while working a full-time unrelated job to web development in late December of 2012. After being laid off in March of 2013 I began to really take things seriously and even threw myself completely in the fire by taking on paid and unpaid freelance gigs for early-stage startups. I’ve dabbled with a lot of different technologies and would say I’m most familiar with HTML, CSS, JavaScript, Ruby and Rails.”
&lt;/p&gt;

&lt;h2&gt;
  &lt;strong&gt;2. What was a turning point/lightbulb moment for you when you first started learning?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;
  &lt;strong&gt;LENNY:&lt;/strong&gt; “The turning point was when I realized people would pay me to learn. I could incentivize myself by getting people to pay me to work on their projects. I went on Craigslist and looked for people who wanted a website. I reached out to a few people and found someone who would pay me to make their website.
&lt;/p&gt;

&lt;p&gt;
  I told them I had no idea what I was doing and they could pay me less than they would a professional. The result was the ability to incentivize myself to learn. It worked really well. I have repeated this formula throughout my career.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;BETSY:&lt;/strong&gt; “Recursion was one of the first times that I realized the power of code. Before that I would use loops and logic to brute force whatever I was working on. Recursion made me realize how much just one of two lines of code could contain.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;DARRELL:&lt;/strong&gt; “The turning point for me was when I realized professional developers don’t actually know everything. They simply know how to find out what they don’t know. Learn the fundamentals, then learn how to break a problem down into its parts. Once you have a general idea of what you’re trying to accomplish with each step, chances are someone on Stackoverflow has already asked a similar question.
&lt;/p&gt;

&lt;p&gt;
  Also, javascript. The first two lectures on javascript in my Front-End Web Development class at General Assembly were mind-blowing. Javascript opens up huge possibilities that I didn’t even know where possible on the front end. With all the API’s out there, it is becoming less and less necessary to be a full stack developer. There is so much functionality you can achieve using only javascript and API’s. There’s even a JSON API plugin for WordPress so you can implement a completely custom front end on your WordPress site without writing a single line of PHP. That’s pretty cool.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;HENRY:&lt;/strong&gt; “The closest thing for me is probably realizing that I could step through code one line at a time, or even one machine instruction at a time using a debugger. That is because reading code and understanding it has always been harder than writing the code to implement an idea.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;FELICIA:&lt;/strong&gt; “My lightbulb moment was when I first started prematurely interviewing for full-time developer/engineer positions in May of 2013. During this period I learned that there was so much more for me to learn to become a proficient professional web developer including but not limited to the connection between the client and server side, more about object oriented programming, version control, testing and how to use client-side frameworks.”
&lt;/p&gt;

&lt;h2&gt;
  &lt;strong&gt;3. What tutorials did you use when you were learning X, Y, or Z?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;
  &lt;strong&gt;LENNY:&lt;/strong&gt; “I started understanding the web through WordPress. It was a lot of trial and error. I didn&amp;#8217;t really know where I could learn the foundation, so I took what I could get. I did tutorials, read smashing magazine articles, read through the documentation, and skipped a lot of stuff that didn’t make sense.
&lt;/p&gt;

&lt;p&gt;
  The best way I learned WordPress was through the example of other peoples work. I would use the same wordpress theme from WooThemes as my base and then I would expand from there. I got to the point where I would need to modify something and get stuck. That&amp;#8217;s when I would go back to googling.
&lt;/p&gt;

&lt;p&gt;
  I remember being really stuck on how the wp_query function and the wp_walker class worked. I thought the code was pretty difficult and never really understood it. I would make alterations to the working code and stop when I got the preferred result.
&lt;/p&gt;

&lt;p&gt;
  I eventually started listening to all the podcasts I could find. Chris Coyier became an asset: I loved the ShopTalk show. Another thing that helped a lot was the history of the web. The more I understood the history of where web browsers used to be, the better I would understand why tuning where the way they were.
&lt;/p&gt;

&lt;p&gt;
  I decided to learn JavaScript and Ruby about a year ago. I pushed hard by doing tutorials and looking for opportunities to implement what I learned. I attended a LOT of Hackathons and meetups. I also started attending conferences. That helped me meet people who were professionally doing the things I wanted to do. By meeting people, I was able to get a holistic look at what I still needed to learn.
&lt;/p&gt;

&lt;p&gt;
  One thing that always stuck with me was something I read about successful programmers. The idea was that good programmers didn&amp;#8217;t know the syntax any better, but instead were more likely to reuse code they wrote in the past. From this I started focusing my effort on learning frameworks.
&lt;/p&gt;

&lt;p&gt;
  When I moved away from rote memorization and started manipulating existing frameworks, I learned the most.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;BETSY:&lt;/strong&gt; “After I had been programming for a few years, I decided I wanted to learn a functional language. I used Learn You Some Erlang for Great Good, which was a great resource, though I also recommend getting out of the tutorials and playing around the language some on your own pretty quickly and then going back to work through the exercises once you get the feel of the basics.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;DARRELL:&lt;/strong&gt; “Codecademy started it all. I then moved on to Lynda.com for more in-depth topics. General Assembly’s Dash is pretty cool too. These all helped with the basics. However, I feel learning this way you miss out on a lot of the fundamentals. For a more fundamental understanding I would recommend an in-person class or, believe it or not, real books. There are lots of great programming books out there.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;HENRY:&lt;/strong&gt; “The book that really helped me understand Objects and Object-Oriented programming was Head First Java. Topcoder exercises helped a great deal in understanding how to turn algorithms into running code.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;FELICIA:&lt;/strong&gt; “I like reading books and watching tutorials afterwards to reinforce concepts. Some of the resources that really helped me in the beginning:
&lt;/p&gt;

&lt;p&gt;
  Chris Pine’s &lt;em&gt;Learn to Program&lt;/em&gt;&lt;br /&gt; Michael Hartl’s &lt;em&gt;Ruby on Rails tutorial&lt;/em&gt;&lt;br /&gt; Treehouse’s &lt;em&gt;Front-End&lt;/em&gt; and &lt;em&gt;Rails&lt;/em&gt; tracks&lt;br /&gt; Code School&amp;#8217;s &lt;em&gt;Three for Five&lt;/em&gt; and &lt;em&gt;jQuery&lt;/em&gt; tracks&lt;br /&gt; Codecademy’s &lt;em&gt;Ruby&lt;/em&gt; track&amp;#8221;
&lt;/p&gt;

&lt;h2&gt;
  &lt;strong&gt;4. What&amp;#8217;s been the most frustrating thing about learning to code or being a developer (if you work as one professionally)?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;
  &lt;strong&gt;LENNY:&lt;/strong&gt; “As a freelancer, it&amp;#8217;s understanding what the customer wants. As a designer, it&amp;#8217;s coming to terms that what you make will not look the same. As a developer, it&amp;#8217;s a middle ground between feeling like the problem is interesting enough to solve.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;BETSY:&lt;/strong&gt; “Code only improves with review and by getting other people&amp;#8217;s feedback, so I have to fight my perfectionist tendency to keep my code to myself until I&amp;#8217;m absolutely happy with it and it&amp;#8217;s exactly what I want to be. Products end up being better when you receive feedback early on and remain flexible.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;DARRELL:&lt;/strong&gt; “When something isn’t working that should be! Spending hours reviewing your code only to find out you missed a bracket, comma or worse, spelled something wrong. Ugh, how annoying! However, that feeling when it works makes it all better!”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;HENRY:&lt;/strong&gt; “Dealing with poor APIs and poorly-documented APIs. The normal way that I learn an API is to skim the documentation to find the functionality I am trying to invoke, and then write a toy program to exercise the parts of the API I am interested in.
&lt;/p&gt;

&lt;p&gt;
  This helps me ensure that I understand the API. When the API&amp;#8217;s are not well-documented, and I need to read the API&amp;#8217;s source code to understand how it works and how to invoke it correctly, that wastes a lot of time.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;FELICIA:&lt;/strong&gt; “I would say the most frustrating thing about learning how to code and being a developer is that nothing ever works the way you want it to. However, the good side of that is that there is never a dull moment and you learn a lot debugging.”
&lt;/p&gt;

&lt;h2&gt;
  &lt;strong&gt;5. What advice would you give to someone just starting out?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;
  &lt;strong&gt;LENNY:&lt;/strong&gt; “Figure out what incentivizes you. Don&amp;#8217;t give up. Show people what you make. Give yourself time to learn. Even if you don&amp;#8217;t think you are learning, if you go through the motions you will absorb something. That&amp;#8217;s a starting point.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;BETSY:&lt;/strong&gt; “Choose a project to make something that you always wished existed, or something that you think is the most exciting problem ever. It&amp;#8217;s easier to persevere when you have a clear goal that you&amp;#8217;re excited about rather than the abstract learning for learning&amp;#8217;s sake. You&amp;#8217;ll pick up skills along the way and even more importantly, learn how to fit those skills together.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;DARRELL:&lt;/strong&gt; “Don’t get intimidated. There is so much to learn and that alone can be overwhelming. I know it was for me, actually it still is. Learn to be process-oriented, not goal-oriented. There is no end point; there is no way you will ever learn everything that is out there to learn and that’s OK. If you know more today than you did yesterday that is all that matters. Baby steps really add up.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;HENRY:&lt;/strong&gt; “a) Learn how to isolate bugs and create a Minimum, Complete, Verifiable Example. The ability to do this will enable you to ask proper questions on StackOverflow, which will enable you to get unblocked much more quickly when you get stuck.
&lt;/p&gt;

&lt;p&gt;
  b) Learn to use the command line to compile and run programs, before you decide to be permanently married to your IDE. There will come a time when you will need the command line to debug, even if you end up using an IDE for your day-to-day work. Learn to use Linux, even if you use Windows or OS X in your daily life. Unless you plan to work for a Microsoft shop for the rest of your life, you will be glad that you learned LInux.
&lt;/p&gt;

&lt;p&gt;
  c) There are (at least) two broad types of programming. One involves building applications and systems and the expertise is focused around designing and using API&amp;#8217;s, as well as system architecture. The other involves writing programs to efficiently solve mathematical problems. Do not assume that being good at one means you will be good at the other.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;FELICIA:&lt;/strong&gt; “Don&amp;#8217;t compare yourself to others. Also, know that the learning-how-to-code journey is a life-long journey if you&amp;#8217;re serious. A lot of people beat themselves up in the beginning, thinking ‘I&amp;#8217;m so dumb’ and ‘I’ll never get there.’ But if you take the time to learn and focus, and think ‘If i don&amp;#8217;t get it today I&amp;#8217;ll get it tomorrow,’ you&amp;#8217;ll get there. Also: ask questions, find a mentor, and don&amp;#8217;t be afraid to get involved in the community.
&lt;/p&gt;

&lt;p&gt;
  I meet a lot of people who are intimidated to go to meetups like Code Crew even though we have an audience primarily for beginners. I&amp;#8217;ve met people who don&amp;#8217;t like to go to other meetups because they&amp;#8217;re not as comfortable or good enough. Some people feel like you have to be at a certain level before you come out, and that&amp;#8217;s totally not true.
&lt;/p&gt;

&lt;p&gt;
  Leading sessions for study groups and being an instructor/mentor has also been extremely helpful for me. When you&amp;#8217;re stuck in a position where you actually have to teach someone something, you really need to know the topic.”
&lt;/p&gt;

&lt;h2&gt;
  &lt;strong&gt;6. Why do you keep doing it?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;
  &lt;strong&gt;LENNY:&lt;/strong&gt; “I love it. I’m making things that people can use. It’s like art. But there’s a lot of practical value associated to what you can do. It’s always changing. There’s never a shortage of topics to learn. And you can infinitely create value.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;BETSY:&lt;/strong&gt; “It&amp;#8217;s fun! Being able to ask a question and then quickly distill an answer from hundreds of thousands of data points still blows my mind.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;DARRELL:&lt;/strong&gt; “Every time I sit down to make something, I’m amazed with what I can accomplish. There are very few careers where you can continually amaze yourself.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;HENRY:&lt;/strong&gt; “I carry the hope that some day, in some small way, I will create systems and tools that will make the world a more productive place.”
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;FELICIA:&lt;/strong&gt; “I&amp;#8217;ve always wanted to find a career that I enjoyed and that challenged me. I love to code, I love learning, and I feel a void when I&amp;#8217;m not doing it. It&amp;#8217;s a journey for me. Also, meeting folks is fun. You become a life-long learner.&amp;#8221;
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;
  Liked this interview series? Please &lt;a href=&quot;https://twitter.com/intent/retweet?tweet_id=496898769196437504&quot;&gt;share by retweeting this post&lt;/a&gt; or &lt;a href=&quot;http://bit.ly/1nsJAZf&quot; target=&quot;_blank&quot;&gt;upvoting on r/learnprogramming&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;UPDATE #1:&lt;/strong&gt; Over 30 retweets and 300 upvotes so far! Thanks to everyone who shared or upvoted!
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://bit.ly/1wN20uK&quot;&gt;Read Part II of this interview series.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/learning-to-code-but-feeling-lost-i-interviewed-some-experts-and-heres-what-i-found/</link>
                <guid>http://username.github.io/learning-to-code-but-feeling-lost-i-interviewed-some-experts-and-heres-what-i-found</guid>
                <pubDate>2014-08-06T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;How to volunteer in the NYC tech community with little to no effort (and gain a lot in the process!)&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Some people think that volunteering requires a lot of effort. You apply to a program; they accept you; you train for a few hours, and then you commit to volunteering a couple of hours every week.
&lt;/p&gt;

&lt;p&gt;
  In my opinion, though, volunteering in a city like NYC &amp;#8212; with its large and ever-growing tech community &amp;#8211; doesn&amp;#8217;t need to be so difficult. If you identify as a developer, or if you&amp;#8217;re even just &lt;em&gt;learning&lt;/em&gt; to code, you don&amp;#8217;t need to look too far to engage.
&lt;/p&gt;

&lt;p&gt;
  Below is a list of my favorite spaces to &amp;#8220;volunteer&amp;#8221; with (in no order of preference) in NYC.
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;a href=&quot;http://www.meetup.com/hackerhours/&quot; target=&quot;_blank&quot;&gt;Hacker Hours&lt;/a&gt;, &lt;a href=&quot;http://www.meetup.com/codecrewny/&quot; target=&quot;_blank&quot;&gt;Code Crew&lt;/a&gt;, &lt;a href=&quot;http://www.meetup.com/nycpython/&quot; target=&quot;_blank&quot;&gt;NYC Python Meetup&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;http://www.meetup.com/Women-Who-Code-NYC/&quot; target=&quot;_blank&quot;&gt;Women Who Code&lt;/a&gt;, &lt;a href=&quot;http://www.meetup.com/Ladies-Who-Code/&quot; target=&quot;_blank&quot;&gt;Ladies Who Code&lt;/a&gt;, &lt;a href=&quot;http://www.meetup.com/NYC-PyLadies/&quot; target=&quot;_blank&quot;&gt;PyLadies&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;http://www.meetup.com/init-developer/&quot; target=&quot;_blank&quot;&gt;Init Developer&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;https://www.codemontage.com/&quot; target=&quot;_blank&quot;&gt;CodeMontage&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;http://www.coderdojonyc.com/&quot; target=&quot;_blank&quot;&gt;CoderDojo&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;http://www.meetup.com/Tech-For-Good-NYC/&quot; target=&quot;_blank&quot;&gt;Tech for Good NYC&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;http://monthlymusichackathon.org/&quot; target=&quot;_blank&quot;&gt;Monthly Music Hackathon&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;http://nycbigapps.com/&quot; target=&quot;_blank&quot;&gt;NYC BigApps&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;http://www.meetup.com/WordPressNYC/&quot; target=&quot;_blank&quot;&gt;WordPress NYC&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;http://bit.ly/1xl0Iev&quot; target=&quot;_blank&quot;&gt;CodeBuddies&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  In general, my philosophy is that volunteering is about being&lt;em&gt; present&lt;/em&gt;. You volunteer by going to a meetup and asking thoughtful questions. You volunteer by helping a stranger solve a technical problem that they were struggling with. You volunteer by exchanging advice and resource tips with the team you work with at a hackathon. You volunteer by talking to newbies about your own learning path as a developer.
&lt;/p&gt;

&lt;p&gt;
  Often, what you&amp;#8217;ll come to find is that in the act of &amp;#8220;volunteering,&amp;#8221; you learn a lot too. New friends give you professional or technical advice. New mentors help you when it&amp;#8217;s &lt;em&gt;your&lt;/em&gt; turn to get stuck on a new framework you&amp;#8217;ve been learning for your personal project. You serendipitously discover a lot of free stickers you can put on your laptop.
&lt;/p&gt;

&lt;p&gt;
  If you&amp;#8217;d like to add to my list by offering a recommendation, please leave a comment below!
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/how-to-volunteer-in-the-nyc-tech-community-with-little-to-no-effort-and-gain-a-lot-in-the-process/</link>
                <guid>http://username.github.io/how-to-volunteer-in-the-nyc-tech-community-with-little-to-no-effort-and-gain-a-lot-in-the-process</guid>
                <pubDate>2014-08-05T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Using VVV to develop multiple WordPress sites locally (alternative to using MAMP Pro!)&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Went to my first &lt;a href=&quot;https://twitter.com/hashtag/wcnyc?src=hash&quot; target=&quot;_blank&quot;&gt;Wordcamp in NYC&lt;/a&gt; this weekend! Funny enough, one of the first people I met upon entering the conference was &lt;a href=&quot;https://twitter.com/karmatosed&quot; target=&quot;_blank&quot;&gt;@karmatosed&lt;/a&gt;, whose &lt;a href=&quot;http://www.packtpub.com/buddypress-theme-development/book?utm_source=social+media&amp;amp;utm_medium=email&amp;amp;utm_campaign=social+media&quot; target=&quot;_blank&quot;&gt;Buddypress Theme Development book&lt;/a&gt; I had just downloaded for offline reading on my Safari Books Online mobile app. (I had *literally* been reading it on the subway just a few minutes before I met her. :D) So many accomplished WordPress developers at this conference.
&lt;/p&gt;

&lt;p&gt;
  Anyway, this post is about how I learned to set up multiple local instances of WordPress on my macbook air WITHOUT using MAMP Pro (go Vagrant!), thanks much to &lt;a href=&quot;http://twitter.com/drewapicture&quot; target=&quot;_blank&quot;&gt;@DrewAPicture&lt;/a&gt;, a web engineer at &lt;a href=&quot;10up.com&quot; target=&quot;_blank&quot;&gt;10Up&lt;/a&gt; and contributor to WordPress and to VVV. He helped me figure out &amp;#8220;what&amp;#8217;s next?&amp;#8221; after the  setup instructions in &lt;a href=&quot;https://github.com/Varying-Vagrant-Vagrants/VVV&quot; target=&quot;_blank&quot;&gt;https://github.com/Varying-Vagrant-Vagrants/VVV&lt;/a&gt; left me hanging.
&lt;/p&gt;

&lt;p&gt;
  I thought the instructions in the initial README were great for getting my first http://local.wordpress.dev site set up. But what if I wanted to set up another instance? Below are my notes.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;STEPS FOR CREATING ANOTHER LOCAL WP INSTANCE:&lt;/strong&gt;&lt;br /&gt; 0. Create a new folder in vagrant-local/www. For example: &lt;strong&gt;vagrant-local/www/name-of-your-project/&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  1. In your &lt;strong&gt;VVV/database&lt;/strong&gt; folder, change the file name of &lt;strong&gt;init-custom-sample.sql&lt;/strong&gt; to &lt;strong&gt;init-custom.sql&lt;/strong&gt;.
&lt;/p&gt;

&lt;p&gt;
  2. Inside &lt;strong&gt;vagrant-local/database/init-custom.sql&lt;/strong&gt;, create the databases. For example:
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;CREATE DATABASE IF NOT EXISTS `name-of-project`;
GRANT ALL PRIVILEGES ON `name-of-project`.* TO &amp;#39;wp&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;wp&amp;#39;;CREATE DATABASE IF NOT EXISTS `name-of-project2`;
GRANT ALL PRIVILEGES ON `name-or-project2`.* TO &amp;#39;wp&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;wp&amp;#39;;&lt;/pre&gt;

&lt;p&gt;
  4. In &lt;strong&gt;vagrant-local/config/nginx-config/sites/&lt;/strong&gt;, create &lt;strong&gt;servers&lt;/strong&gt;&lt;b&gt;.conf&lt;/b&gt;. This is where you&amp;#8217;ll configure your nginx. If you have multiple dev instances, you&amp;#8217;ll have multiple &lt;strong&gt;server{ }&lt;/strong&gt; blocks. For example:
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;server {
listen       80;
listen       443 ssl;
server_name  name-of-project.dev;
root         &amp;#47;srv&amp;#47;www&amp;#47;name-of-project;
include &amp;#47;etc&amp;#47;nginx&amp;#47;nginx-wp-common.conf;
}&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;server {
listen       80;
listen       443 ssl;
server_name  name-of-project2.dev;
root         &amp;#47;srv&amp;#47;www&amp;#47;name-of-project2;
include &amp;#47;etc&amp;#47;nginx&amp;#47;nginx-wp-common.conf;
}&lt;/pre&gt;

&lt;p&gt;
  5. &lt;strong&gt;In your terminal, make sure the vagrant IPs are added to the bottom of your ~/etc/hosts file.&lt;/strong&gt;
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ sudo -s
$ cd ~&amp;#47;
$ cd ..&amp;#47;..&amp;#47;
$ cd etc
$ vim hosts&lt;/pre&gt;

&lt;p&gt;
  Make sure:
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;192.168.50.4 name-of-project.dev
192.168.50.4 name-of-project2.dev&lt;/pre&gt;

&lt;p&gt;
  … is added to the bottom of the hosts file.
&lt;/p&gt;

&lt;p&gt;
  Type &lt;b&gt;exit&lt;/b&gt; to get out.
&lt;/p&gt;

&lt;p&gt;
  6. Run&lt;strong&gt; vagrant provision &lt;/strong&gt;in your terminal so that the databases changes are registered.
&lt;/p&gt;

&lt;p&gt;
  7. Download wordpress in vagrant using the command line.
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ vagrant ssh
$ cd ..&amp;#47;..&amp;#47;
$ cd srv&amp;#47;www&amp;#47;name-of-project
$ wp core download&lt;/pre&gt;

&lt;p&gt;
  &lt;b&gt;exit&lt;/b&gt; to get out of vagrant.
&lt;/p&gt;

&lt;p&gt;
  8. Navigate to http://name-of-project.dev in the browser to create a new wp-config.php file, and follow the steps.
&lt;/p&gt;

&lt;p&gt;
  Your database host should be &lt;strong&gt;localhost&lt;/strong&gt;, and the user and password should be associated with what you input in step #2. In this example, the user and password are &amp;#8216;wp&amp;#8217; and &amp;#8216;wp.&amp;#8217;
&lt;/p&gt;

&lt;p&gt;
  9. You should now be able to see your local wordpress installation at &lt;strong&gt;http://name-of-project.dev/&lt;/strong&gt;!
&lt;/p&gt;

&lt;p&gt;
  10. In practice, it&amp;#8217;s better not to use version control on the core WordPress docs. You can &lt;strong&gt;git init&lt;/strong&gt; inside &lt;strong&gt;vagrant-local/www/name-of-your-project/wp-content/themes/your-own-wordpress-theme&lt;/strong&gt; to use version control specifically on your theme.
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/using-vvv-to-develop-wordpress-sites-locally-alternative-to-using-mamp-pro/</link>
                <guid>http://username.github.io/using-vvv-to-develop-wordpress-sites-locally-alternative-to-using-mamp-pro</guid>
                <pubDate>2014-08-02T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Actionify the News&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  My original motivation for learning how to code wasn&amp;#8217;t because developers were in high demand career-wise, or because there was a lot of support for women interested in tech.
&lt;/p&gt;

&lt;p&gt;
  My original motivation for learning was because I really, &lt;em&gt;really&lt;/em&gt; wanted to create a mini social network for students working on civic engagement and social impact causes in their community, so that different student organizations working on similar non-profit-driven missions could connect and share resources and ultimately become *better* at what they were doing.
&lt;/p&gt;

&lt;p&gt;
  Incredibly, I signed up my first 300 users and created my first prototype of that site &amp;#8212; a WordPress site with a Buddypress plugin &amp;#8212; without knowing an ounce of code. I&amp;#8217;d somehow convinced my freshman-year economics professor, Dr. Leachman, to be my advisor for a self-crafted independent study course on social networks and civic engagement, which in my mind validated the 8 hours a day I was spending working on the site. I was literally treating it like a full-time job, which was hilarious because in addition to balancing it with four other econ courses and a part-time job, I was also &amp;#8212; again &amp;#8212; in the unenviable position of not really knowing how to code.
&lt;/p&gt;

&lt;p&gt;
  What I mostly did, instead, was look at my WordPress files and guess at their functions. I&amp;#8217;d change up CSS values, and google CSS snippets, but I didn&amp;#8217;t know that it would&amp;#8217;ve been incredibly helpful to master CSS *selectors*. I&amp;#8217;d move around text, and accidentally break PHP, and then hilariously call up my hosting company to ask them to reverse my changes by loading an older version of the database.
&lt;/p&gt;

&lt;p&gt;
  Ultimately, I probably spent much more time than I needed working on development features with a hammer instead of a scalpel, but reflecting back, I don&amp;#8217;t regret it, because it was &lt;em&gt;so much fun&lt;/em&gt; &amp;#8212; because:
&lt;/p&gt;

&lt;p&gt;
  A) In addition to installing an atrocious number of WordPress and Buddypress plugins, I was scheduling interviews with students, professors, and university staff, and learning about their goals and motivations, and trying to find buy-in where I could, and demo-ing my site.
&lt;/p&gt;

&lt;p&gt;
  B) People were truly excited about the potential for the social network to shine a light on student civic initiatives and local non-profits, and had lots of questions about why people would want to visit my site instead of Facebook, and loved the gamification features (which I installed using a Buddypress plugin). I got lots of buy-in from people who weren&amp;#8217;t sure where this social network was going, but were interested in getting aboard the ride.
&lt;/p&gt;

&lt;p&gt;
  C) I wasn&amp;#8217;t always able to figure out how to implement the suggestions people gave me, but I remember that it was thrilling &amp;#8212; always &amp;#8212; to make some small change and see it come live on the site.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Fast forward:&lt;/strong&gt; I finally pick up a legit CSS and jQuery and WordPress book, and find it helpful for when I&amp;#8217;m thinking up prototypes to A/B test at my job, where I&amp;#8217;m having tons of fun trying to increase the rate of action-taking and sharing of meaningful progressive content.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Fast forward:&lt;/strong&gt; I enroll in a 12-week Mon./Wed. evening front-end development course, have an incredible amount of fun learning with my fellow part-timer classmates, learn *that&amp;#8217;s* how HTML/CSS/JS files can work together to *run in one&amp;#8217;s localhost*, learn about how *filepaths* in HTML files work for the first time, and start taking the Chrome web console seriously as a debugger tool, and learn about how media queries are used for responsive design.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Fast forward:&lt;/strong&gt; I pick up Bootstrap and Git (convenient because I end up using both for my job, where I&amp;#8217;ve transitioned into doing front-end web development full-time), and discover that I *love* going to hackathons and learning from/working with/teaching other people.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Fast forward:&lt;/strong&gt; I realize that I suck at javascript. I read Eloquent Javascript for the first time, but read it incorrectly &amp;#8212; i.e. glancing at the solutions, skipping over the exercises, and not often fully comprehending the concepts I&amp;#8217;m reading about: things like closure and hoisting and the unique treatment of the javascript &amp;#8220;this.&amp;#8221; I take a class on Javascript, which introduces me to a whole new world of thinking in terms of objects and classes, and I severely regret the fact that I had zero interest in taking an introductory Computer Science course (&amp;#8220;I don&amp;#8217;t want to have a career where I stare at a computer screen all day!&amp;#8221; &amp;#8220;I don&amp;#8217;t want to follow in my dad&amp;#8217;s footsteps!&amp;#8221; &amp;#8220;I probably won&amp;#8217;t be very good at it!&amp;#8221;) for the majority of my time in school.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Fast forward&lt;/strong&gt;: I lose my initial, irrational fear of working with APIs.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Fast forward&lt;/strong&gt;: I self-study Learn Python the Hard Way and  Introduction to Object-Oriented Programming with Python course on Udacity, which &amp;#8212; funnily enough &amp;#8212; helps &lt;em&gt;accelerate&lt;/em&gt; my understanding of javascript. From going through Django tutorials as well, I suddenly realize how little I know of regular expressions and creating models/databases and &amp;#8212; in general &amp;#8212; full-stack, back-end web development.
&lt;/p&gt;

&lt;p&gt;
  I am lucky enough to have a wonderful significant other and family and friends who support me, though, and who have helped me discover that learning programming &lt;em&gt;together&lt;/em&gt; &amp;#8212; i.e. reading a tutorial together and pair programming through exercises and projects &amp;#8212; can be an incredibly helpful part of the learning process.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Current time: &lt;/strong&gt;I feel the pressure of learning ALL THE THINGS.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Current time: &lt;/strong&gt;I feel the pressure of learning ALL THE THINGS, but what I do have to show for it?
&lt;/p&gt;

&lt;p&gt;
  Damn.
&lt;/p&gt;

&lt;p&gt;
  You know, this post was supposed to be about &lt;strong&gt;actionifying the news &lt;/strong&gt;&amp;#8212; i.e. using a website, in some way, to help people digest the terrible things happening in the news, and turn that outrage into positive action that can be tracked &amp;#8212; step-by-step &amp;#8212; and historically &amp;#8212; through time. A timeline of real-time advocacy, if you will. That was my idea.
&lt;/p&gt;

&lt;p&gt;
  Somewhere, I think, my motivations got bogged down by the technicalities. And maybe that&amp;#8217;s okay. I&amp;#8217;ve found that the more I learn, the more I see different languages and technologies tying together, and the more competent I&amp;#8217;ll be if I ever want to product manage &lt;em&gt;and&lt;/em&gt; build out an incipient fleeting idea.
&lt;/p&gt;

&lt;p&gt;
  But I *am* starting to realize that maybe &amp;#8212; just maybe &amp;#8212; I need to take a deep breath, and not lose sight of the ultimate goal of mastering models-views-controllers or python or a particular javascript framework&amp;#8230; the ultimate goal being, of course, the &lt;em&gt;creation &lt;/em&gt;itself.
&lt;/p&gt;

&lt;p&gt;
  In this current world &amp;#8212; where we have the option of choosing between Django vs. Rails and WordPress vs. Drupal and SASS vs. LESS and Twitter Boostrap vs. Zurb Foundation and Flask vs. Sinatra and MySQL vs. Postgres vs. MongoDB and AngularJS vs. NodeJS and Jekyll vs. Tumblr vs. WordPress vs. Blogspot vs. Ghost and etc. vs. etc. &amp;#8212; let&amp;#8217;s not lose sight of the end users and the &lt;em&gt;ultimate&lt;/em&gt; value added of our products.
&lt;/p&gt;

&lt;p&gt;
  After all, no one questions that Watsi runs on X technology stack when it raises enough money to cover the medical fees of thousands of people, or that Upworthy runs on Rails when it&amp;#8217;s able to shine million of views on formerly unknown inspiring people and projects, or that Nicholas Kristof&amp;#8217;s writings (no code!) on his New York Times blog raises thousands of dollars for out-of-sight causes, or that Everytown runs on Y technology stack when it raises enough donations to deliver over 2 million postcards against gun violence to policy decision makers, or that the technologies behind Avaaz, Change, and MoveOn.org for their petition tools and advocacy platforms are Q, R, and S.
&lt;/p&gt;

&lt;p&gt;
  What matters is the user experience, the use case, and the outcome. The technology is only a tool.
&lt;/p&gt;

&lt;p&gt;
  So without further ado:
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    Dear Self:
  &lt;/p&gt;
  
  &lt;p&gt;
    Don&amp;#8217;t stress out.
  &lt;/p&gt;
  
  &lt;p&gt;
    With reflection,
  &lt;/p&gt;
  
  &lt;p&gt;
    LP
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/my-original-motivation-for-learning-how-to-code/</link>
                <guid>http://username.github.io/my-original-motivation-for-learning-how-to-code</guid>
                <pubDate>2014-06-22T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Comedy Hack Day Reportback&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  What do you get when you combine awkward developers with awkward comedians in a single room over a weekend?
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.comedyhackday.org/&quot; target=&quot;_blank&quot;&gt;Comedy Hack Day&lt;/a&gt;, of course.
&lt;/p&gt;

&lt;p&gt;
  Participants pitched their comedy hack ideas on Friday evening, and as per my nature, I wanted to work on *everything*, so I initially had trouble deciding on a team. I started helping out a bit with the members of what turned out to be the winning team (go Timesify!) before they switched ideas, but then I decided to commit to working with my friend &lt;a href=&quot;http://www.twitter.com/nicolethenerd&quot; target=&quot;_blank&quot;&gt;@nicolethenerd&lt;/a&gt; on her idea:
&lt;/p&gt;

&lt;p&gt;
  Microsoft Clippy &amp;#8212; FOR THE INTERNET.
&lt;/p&gt;

&lt;p&gt;
  The project was affectionately named &lt;a href=&quot;https://github.com/nbieber/browser_companion&quot; target=&quot;_blank&quot;&gt;Browser Companion&lt;/a&gt; on github, and these were my contributions:
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/Screen-Shot-2014-06-14-at-1.38.58-PM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-893&quot; alt=&quot;Ryan Gosling Browser Buddy&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/Screen-Shot-2014-06-14-at-1.38.58-PM.png&quot; width=&quot;1412&quot; height=&quot;749&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/Screen-Shot-2014-06-17-at-7.59.57-PM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-894&quot; alt=&quot;snitch&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/Screen-Shot-2014-06-17-at-7.59.57-PM.png&quot; width=&quot;1411&quot; height=&quot;691&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Have you ever wanted Ryan Gosling as a constant companion while you surfed the web? No? Yes? What about a Golden Snitch that moved when you hovered over it? (My other idea was to add in a helpful Rubber Duck (TM) for programmers, but alas, we ran out of time.)
&lt;/p&gt;

&lt;p&gt;
  The browser companions would also appear with snarky quips which the two comedians on our team had written up if you landed on certain designated websites, and we had other characters too &amp;#8212; including Browser Bro and Subway Rat.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/Screen-Shot-2014-06-17-at-8.32.36-PM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-897&quot; alt=&quot;Screen Shot 2014-06-17 at 8.32.36 PM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/Screen-Shot-2014-06-17-at-8.32.36-PM.png&quot; width=&quot;633&quot; height=&quot;401&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  I learned the basics about how to create a chrome browser extension, and learned from working with the code of a more experienced javascript developer. @nicolethenerd also did an excellent job presenting. Our comedy hack didn&amp;#8217;t advance to the final day&amp;#8217;s round of seven presentations on Sunday, but we got an honorable mention &amp;#8212; which meant we were probably 8th-10th place in a round of 23 demos.
&lt;/p&gt;

&lt;p&gt;
  By the way, if you&amp;#8217;re interested in participating in another Comedy Hack Day this year, they&amp;#8217;ll be in San Francisco and LA later in 2014. Sign up to stay informed: &lt;a href=&quot;http://www.comedyhackday.org/&quot; target=&quot;_blank&quot;&gt;http://www.comedyhackday.org/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  And to give you an idea of what it was like (since videos from this year haven&amp;#8217;t been uploaded yet), here&amp;#8217;s a hilarious demo from a previous year&amp;#8217;s presentation:
&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/comedy-hack-day-reportback/</link>
                <guid>http://username.github.io/comedy-hack-day-reportback</guid>
                <pubDate>2014-06-18T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Quizzing Yourself Is The Best Way, Maybe? (More Learning-How-To-Code Revelations)&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  If you&amp;#8217;ve met me at all, you might realize that I love discussing web development and exchanging tutorials/resources and tips with other people. Naturally, when I heard a woman with a computer engineering background at a javascript meetup talk about picking up jQuery via a free Kindle e-book, my ears perked up.
&lt;/p&gt;

&lt;p&gt;
  &amp;#8220;Which e-book?&amp;#8221; I said, curious.
&lt;/p&gt;

&lt;p&gt;
  She told me to scroll down to the bottom of jQuery.com and click on one of the links there. Funny, in all time I&amp;#8217;ve been using jQuery, I&amp;#8217;d never paid much attention to the links at the bottom of &lt;a href=&quot;http://jquery.com/&quot; target=&quot;_blank&quot;&gt;jQuery.com&lt;/a&gt; &amp;#8212; but lo and behold, there it was: &lt;a href=&quot;http://www.syncfusion.com/resources/techportal/ebooks/jquery?utm_medium=BizDev-jQuery.org0513&quot; target=&quot;_blank&quot;&gt;jQuery Succinctly by Cody Lindley, free downloadable e-book&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/Screen-Shot-2014-06-09-at-11.53.43-PM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-876&quot; alt=&quot;jquery.com&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/Screen-Shot-2014-06-09-at-11.53.43-PM.png&quot; width=&quot;524&quot; height=&quot;225&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Turns out this isn&amp;#8217;t the only free e-book offered by &lt;a href=&quot;http://www.syncfusion.com/resources/techportal/ebooks&quot; target=&quot;_blank&quot;&gt;Syncfusion&lt;/a&gt;, the publisher; I quickly found the &lt;a href=&quot;http://www.syncfusion.com/resources/techportal/ebooks&quot; target=&quot;_blank&quot;&gt;full list at http://www.syncfusion.com/resources/techportal/ebooks&lt;/a&gt; and gleefully downloaded &lt;a href=&quot;http://www.syncfusion.com/resources/techportal/ebooks/javascript&quot; target=&quot;_blank&quot;&gt;Javascript Succinctly&lt;/a&gt; (because I wanted to review prototypal inheritance) and &lt;a href=&quot;http://www.syncfusion.com/resources/techportal/ebooks/nodejs&quot; target=&quot;_blank&quot;&gt;Node.JS Succinctly&lt;/a&gt; onto my Kindle as well.
&lt;/p&gt;

&lt;p&gt;
  I should caveat that in general, I&amp;#8217;m using other, more comprehensive resources to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects&quot; target=&quot;_blank&quot;&gt;review&lt;/a&gt; Javascript &lt;a href=&quot;http://javascript.info/tutorial/inheritance&quot; target=&quot;_blank&quot;&gt;objects&lt;/a&gt; and &lt;a href=&quot;http://nodeschool.io/&quot; target=&quot;_blank&quot;&gt;dip into NodeJS&lt;/a&gt; &amp;#8212; but when it comes to finding ways to spend my time efficiently during a subway commute, I&amp;#8217;ve been struggling with scroll exhaustion, wifi outages and blank screens when I try to use my iPhone&amp;#8217;s screen to load up developer docs on the web.
&lt;/p&gt;

&lt;p&gt;
  Kindle presents such a nicer reading experience on the phone, and the best part was that I didn&amp;#8217;t need wifi or spend a lot of money to read these books! Yay for productivity!
&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  ===
&lt;/p&gt;

&lt;p&gt;
  Okay. My second revelation during the javascript meetup occurred when I realized that the only reason I&amp;#8217;ve found learning programming in tandem with other people rather productive was because &lt;strong&gt;&lt;em&gt;we asked each other questions all the&lt;/em&gt;&lt;em&gt; time&lt;/em&gt;. &lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  For example:
&lt;/p&gt;

&lt;p&gt;
  Person A: What is X?&lt;br /&gt; Person B: I think it has something to do with Y.&lt;br /&gt; Person A: Oh, really? *starts Googling*&lt;br /&gt; Person A: Ah, I see, this tutorial defines X as YZ and&amp;#8230; wait, I don&amp;#8217;t understand this part. What does that mean when it says Y is a function of XYZ?&lt;br /&gt; Person B: *starts reading too* I think it means that ZYX. Here, look at this explanation above from ABC.&lt;br /&gt; Person A: That makes sense now! They&amp;#8217;re the same thing.&lt;br /&gt; Person B: Yeah, I understand it now too. Thanks for figuring it out with me.
&lt;/p&gt;

&lt;p&gt;
  A commenter on one of my previous blog posts mentioned &amp;#8220;spaced repetition quizzing&amp;#8221; &lt;a href=&quot;http://www.amazon.com/Make-Stick-Peter-C-Brown-ebook/dp/B00JQ3FN7M/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1400835717&amp;amp;sr=1-1&amp;amp;keywords=make+it+stick+the+science+of+successful+learning&quot; target=&quot;_blank&quot;&gt;from this book&lt;/a&gt; as a good way to make concepts stick, and I am intrigued; I am tempted to type out all my future notes in question/answer quiz format now.
&lt;/p&gt;

&lt;p&gt;
  Of course, writing quiz questions for review isn&amp;#8217;t exactly a novel concept; I didn&amp;#8217;t go through sixteen years of schooling without writing out questions for Spanish class or testing myself using flashcards.
&lt;/p&gt;

&lt;p&gt;
  On the other hand, I haven&amp;#8217;t approached note-taking in &lt;em&gt;programming&lt;/em&gt; the same way, because I&amp;#8217;ve been learning on the job &amp;#8212; i.e. in a non-academic setting. Maybe it&amp;#8217;s time to start.
&lt;/p&gt;

&lt;p&gt;
  To be continued!
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/quizzing-yourself-is-the-best-way-maybe-more-learning-how-to-code-revelations/</link>
                <guid>http://username.github.io/quizzing-yourself-is-the-best-way-maybe-more-learning-how-to-code-revelations</guid>
                <pubDate>2014-06-10T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Tech Meetup Appreciation Post (With Photos!)&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  There is just something about listening to people talk about a programming concept in person &amp;#8212; or having to explain a programming concept to another person &amp;#8212; that makes &lt;em&gt;mastering the material&lt;/em&gt; a lot more fun, and the frustrations much easier to struggle through.
&lt;/p&gt;

&lt;p&gt;
  Obviously the bulk of the learning comes during one&amp;#8217;s own time &amp;#8212; i.e. when you&amp;#8217;re following a tutorial, or independently writing code. However, I&amp;#8217;ve found that the simple act of going to tech meetups and talking about the web development experience with other people has been incredibly helpful in accelerating my learning. At these meetups, I&amp;#8217;ve:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    debugged terminal/installation/language syntax problems with some slight guidance from more experienced developers;
  &lt;/li&gt;
  &lt;li&gt;
    walked newbies through pushing and pulling from git, javascript, and Bootstrap CSS;
  &lt;/li&gt;
  &lt;li&gt;
    solved a problem I got stuck with in the middle of doing a supplementary exercise in &lt;a href=&quot;http://www.tangowithdjango.com/book/&quot; target=&quot;_blank&quot;&gt;Tango with Django&lt;/a&gt; by using &lt;a href=&quot;http://south.aeracode.org/&quot; target=&quot;_blank&quot;&gt;South&lt;/a&gt;, thanks to some guidance from a more experienced Django developer;
  &lt;/li&gt;
  &lt;li&gt;
    gotten recommendations for several good Python and Django tutorials, including &lt;a href=&quot;http://pydanny.com/announcing-two-scoops-of-django-1.6.html&quot; target=&quot;_blank&quot;&gt;Two Scoops of Django&lt;/a&gt;, Tango with Django, and &lt;a href=&quot;http://www.slideshare.net/ChristopherAdams5/epic-south-disasters&quot; target=&quot;_blank&quot;&gt;this slidedeck&lt;/a&gt; about epic disasters with South;
  &lt;/li&gt;
  &lt;li&gt;
    recommended &lt;a href=&quot;https://www.udacity.com/course/ud036&quot; target=&quot;_blank&quot;&gt;Udacity&amp;#8217;s Intro to OOP&lt;/a&gt; course to a lot of beginners struggling through Learn Python the Hard Way (Hi! Hope it&amp;#8217;s been helpful!);
  &lt;/li&gt;
  &lt;li&gt;
    reviewed basic python and OOP concepts in random conversation;
  &lt;/li&gt;
  &lt;li&gt;
    realized that I knew a lot more about installing Django with virtualenv than I thought I did when I had to explain it to a Django beginner;
  &lt;/li&gt;
  &lt;li&gt;
    reviewed Python fundamentals at two PyLadies meetups and got access to some &lt;a href=&quot;http://nbviewer.ipython.org/github/logston/talks/blob/master/2014-05-22_Python_for_Intermediates/2014-05-22PyLadiesIntermediate.ipynb&quot; target=&quot;_blank&quot;&gt;awesome slides&lt;/a&gt;:
  &lt;/li&gt;
  &lt;li&gt;
    forked a Jekyll blog and collected some really useful tips about developing in Jekyll (hello, SASS and Grunt and jekyll serve &amp;#8211;watch commands!) as well as migrating from WordPress to Jekyll
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  I am grateful to all those who&amp;#8217;ve shared help, tutorial tips, and &amp;#8220;talked shop&amp;#8221; with me. Below is a collage of some photos from these meetups.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/classes.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-835&quot; alt=&quot;classes&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/classes.jpg&quot; width=&quot;960&quot; height=&quot;720&quot; /&gt;&lt;/a&gt;Andrei from a Python meetup explains OOP with drawings of houses.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/datastructures.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-836&quot; alt=&quot;datastructures&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/datastructures.jpg&quot; width=&quot;960&quot; height=&quot;720&quot; /&gt;&lt;/a&gt;I meet Marcus, who has a well-worn hard copy of this book, which you can incidentally find online for free: &lt;a href=&quot;http://interactivepython.org/courselib/static/pythonds/index.html&quot; target=&quot;_blank&quot;&gt;http://interactivepython.org/courselib/static/pythonds/index.html&lt;/a&gt;. This book is definitely on my reading list, by the way.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/flask.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-837&quot; alt=&quot;flask&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/flask.jpg&quot; width=&quot;960&quot; height=&quot;720&quot; /&gt;&lt;/a&gt;&lt;br /&gt; A presenter at a PyLadies meetup does a lightning talk about how his startup uses Flask and AngularJS.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/abtesting.jpg&quot;&gt;&lt;img alt=&quot;abtesting&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/abtesting.jpg&quot; width=&quot;960&quot; height=&quot;720&quot; /&gt;&lt;/a&gt;&lt;br /&gt; I learn about how meetup.com uses multi-armed bandit to do A/B testing.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/googletech.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-838&quot; alt=&quot;googletech&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/googletech.jpg&quot; width=&quot;960&quot; height=&quot;720&quot; /&gt;&lt;/a&gt;&lt;br /&gt; Inspiration from more experienced folks at a Google-hosted event for women in technology.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/hackathonoffice.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-839&quot; alt=&quot;hackathonoffice&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/hackathonoffice.jpg&quot; width=&quot;960&quot; height=&quot;494&quot; /&gt;&lt;/a&gt;&lt;br /&gt; This is what the office window view looked like at dawn on a Sunday morning at a hackathon.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/nasahackathon.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-840&quot; alt=&quot;nasahackathon&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/nasahackathon.jpg&quot; width=&quot;960&quot; height=&quot;720&quot; /&gt;&lt;/a&gt;&lt;br /&gt; Sometimes astronauts are present at hackathons too.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/panda.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-842&quot; alt=&quot;panda&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/panda.jpg&quot; width=&quot;960&quot; height=&quot;720&quot; /&gt;&lt;/a&gt;&lt;br /&gt; My first time being introduced to these python notebooks &amp;#8212; great for presentations!
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/pythonmeetup.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-843&quot; alt=&quot;pythonmeetup&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/pythonmeetup.jpg&quot; width=&quot;960&quot; height=&quot;720&quot; /&gt;&lt;/a&gt;&lt;br /&gt; Python review from a presenter.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/selenium.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-844&quot; alt=&quot;selenium&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/selenium.jpg&quot; width=&quot;960&quot; height=&quot;720&quot; /&gt;&lt;/a&gt;&lt;br /&gt; I learn about the cool things Selenium, a Python package, can do to help QA testers. In this demo, Christie (the presenter) demo-ed the browser automagically logging into WordPress and creating a post.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/subwayreading.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-845&quot; alt=&quot;subwayreading&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/subwayreading.jpg&quot; width=&quot;960&quot; height=&quot;640&quot; /&gt;&lt;/a&gt;&lt;br /&gt; I accidentally took this photo on my iPhone&amp;#8230; this was some subway light reading from another free e-book called &lt;a href=&quot;http://www.greenteapress.com/thinkpython/thinkpython.html&quot; target=&quot;_blank&quot;&gt;Think Python&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/vocab.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-846&quot; alt=&quot;vocab&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/vocab.png&quot; width=&quot;774&quot; height=&quot;430&quot; /&gt;&lt;/a&gt;&lt;br /&gt; Useful screenshot from a &lt;a href=&quot;https://www.udacity.com/course/ud036&quot; target=&quot;_blank&quot;&gt;Udacity course&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/womenwhocodejs.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-847&quot; alt=&quot;womenwhocodejs&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/womenwhocodejs.jpg&quot; width=&quot;320&quot; height=&quot;259&quot; /&gt;&lt;/a&gt;&lt;br /&gt; Women Who Code (a mix of complete beginners and experienced javascript devs) working on javascript!
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/Screen-Shot-2014-06-04-at-7.48.20-PM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-872&quot; alt=&quot;Screen Shot 2014-06-04 at 7.48.20 PM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/Screen-Shot-2014-06-04-at-7.48.20-PM.png&quot; width=&quot;1285&quot; height=&quot;750&quot; /&gt;&lt;/a&gt;Forking Barry Clark&amp;#8217;s &lt;a href=&quot;https://github.com/barryclark/jekyll-now&quot; target=&quot;_blank&quot;&gt;jekyll starter repo&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/tech-meetup-appreciation-post-with-photos/</link>
                <guid>http://username.github.io/tech-meetup-appreciation-post-with-photos</guid>
                <pubDate>2014-06-08T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Re-reading Eloquent Javascript&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I am re-reading &lt;a href=&quot;http://eloquentjavascript.net/&quot; target=&quot;_blank&quot;&gt;Eloquent Javascript&lt;/a&gt; with Arthur at the moment, and realizing how much of a mistake I made reading it the first time around &amp;#8212; that is, I read it by myself, barely typed out any of the exercises before looking at the solutions, and skimmed past sections when it got confusing.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/ejs.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-866&quot; alt=&quot;ejs&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/06/ejs.png&quot; width=&quot;250&quot; height=&quot;330&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  (Although you can &lt;a href=&quot;http://www.amazon.com/gp/product/1593272820?ie=UTF8&amp;amp;tag=marijhaver-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1593272820&quot; target=&quot;_blank&quot;&gt;purchase this book&lt;/a&gt; online, it&amp;#8217;s free to read online.)
&lt;/p&gt;

&lt;p&gt;
  Arthur isn&amp;#8217;t a programmer in the career sense, but he double majored in math along with italian, and apparently having had practice solving mathematical problems helps a lot.
&lt;/p&gt;

&lt;p&gt;
  Having a study partner also helps a lot. As we read, we&amp;#8217;ll paraphrase the content out loud, quiz each other about what we just read, google an answer when the answer to a question isn&amp;#8217;t immediately apparent, work on the exercises individually, share our respective solutions to the exercises using JSFiddle, and puzzle out root causes when something we coded renders something surprising.
&lt;/p&gt;

&lt;p&gt;
  For example:
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    split and join are not precisely each other&amp;#8217;s inverse. string.split(x).join(x) always produces the original value, but array.join(x).split(x) does not. Can you give an example of an array where .join(&amp;#8221; &amp;#8220;).split(&amp;#8221; &amp;#8220;) produces a different value? &amp;#8211; &lt;strong&gt;Exercise 4.3&lt;/strong&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
  &lt;strong&gt;We each approached the solution differently:&lt;/strong&gt;
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;var testo = &amp;#91;&amp;#34;This is a&amp;#34;, &amp;#34;sentence Arthur wrote.&amp;#34;&amp;#93;;
console.log(testo.join(&amp;#34; &amp;#34;));
console.log(testo.join(&amp;#34; &amp;#34;).split(&amp;#34; &amp;#34;));&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;array = &amp;#91;&amp;#34;this&amp;#34;, &amp;#34;is &amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;sentence&amp;#34;, &amp;#34;Linda&amp;#34;, &amp;#34;wrote&amp;#34;, &amp;#34;with&amp;#34;, &amp;#34;an&amp;#34;, &amp;#34;extra&amp;#34;, &amp;#34;space&amp;#34;, &amp;#34;after&amp;#34;, &amp;#34;is&amp;#34;&amp;#93;;
console.log(array.join(&amp;#34; &amp;#34;));
console.log(array.join(&amp;#34; &amp;#34;).split(&amp;#34; &amp;#34;));&lt;/pre&gt;

&lt;p&gt;
  To solve this, we had to truly understand what the .join() and .split() methods did in javascript.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;There&amp;#8217;s good documentation on Mozilla:&lt;/strong&gt;&lt;br /&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join&lt;br /&gt; &lt;/a&gt;&amp;#8220;The join() method joins all elements of an array into a string.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
  In other words, you start with an array, and you turn it into a string!
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split&lt;br /&gt; &lt;/a&gt;&amp;#8220;The split() method splits a String object into an array of strings by separating the string into substrings.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
  In other words, you split a string up into an array!
&lt;/p&gt;

&lt;p&gt;
  The two methods are not exact opposites of each other, though, as we just demonstrated via the book exercise.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/re-reading-eloquent-javascript/</link>
                <guid>http://username.github.io/re-reading-eloquent-javascript</guid>
                <pubDate>2014-06-08T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;REVIEW: Getting Started with Django Video Series on Vimeo (Kickstarter-backed), Part I&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  W00t, I just deployed my first Django app on Heroku! Only took about a day of debugging, but the tutorial is pretty great.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Full URL of &lt;em&gt;Getting Started with Django&lt;/em&gt;:&lt;/strong&gt;&lt;br /&gt; &lt;a href=&quot;http://gettingstartedwithdjango.com/en/lessons/introduction-and-launch/&quot;&gt;http://gettingstartedwithdjango.com/en/lessons/introduction-and-launch/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;

&lt;p&gt;
  By the way, I&amp;#8217;d recommend watching the video of the tutorial and using the text below it as review or as a summary of what you&amp;#8217;re watching. The text is not fully comprehensive with all the commands, and if you only follow the text you&amp;#8217;ll get confused.
&lt;/p&gt;

&lt;p&gt;
  Created by Kenneth Love, this &lt;a href=&quot;https://www.kickstarter.com/projects/657368266/getting-started-with-django&quot; target=&quot;_blank&quot;&gt;Kickstarter-backed&lt;/a&gt; Django tutorial was uploaded around January 2013. The first part purports to teach you how to create a small blogging app, and later parts feature larger demonstration projects.
&lt;/p&gt;

&lt;p&gt;
  Neither of the Django tutorials I&amp;#8217;d visited so far &amp;#8212; &lt;a href=&quot;https://www.youtube.com/watch?v=3DccH9AMwFQ&quot;&gt;Coding for Entrepeneurs&lt;/a&gt; nor &lt;a href=&quot;http://www.tangowithdjango.com/book/&quot;&gt;Tango with Django&lt;/a&gt; &amp;#8212; had visited deployment (to Heroku, no less!) as part of the setup in the &lt;em&gt;beginning, &lt;/em&gt;so it was a nice change. Also nice was that this tutorial:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    uses vagrant on top of Virtualbox and virtualenv, which is a best practice setup for running Django apps nowadays
  &lt;/li&gt;
  &lt;li&gt;
    uses Postgres for the database instead of sqllite or MySQL (Tango with Django uses sqllite3, which this author recommended against in a production environment)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  Note that the first chapter of this tutorial doesn&amp;#8217;t get into creating the full blown-out microblog app yet, but does cover a lot with installation and app file setup.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;The downsides?&lt;/strong&gt; I ran into a couple of issues that took me a while to debug, and I&amp;#8217;ll make note of them in more detail below. Also, at the time that this series was made, Django 1.4.3 was the most up-to-date version, so I made sure to install 1.4.3. and not 1.6 or 1.7 &amp;#8212; the &lt;em&gt;most&lt;/em&gt; up-to-date version as of May 2014.
&lt;/p&gt;

&lt;h2&gt;
  &lt;strong&gt;Issues:&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;
  &lt;strong&gt;1) When I tried to create a new &amp;#8220;vagrant&amp;#8221; user in postgres, I got:&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  ERROR: role &amp;#8220;vagrant&amp;#8221; already exists
&lt;/p&gt;

&lt;p&gt;
  The solution was to run
&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;code&gt;sudo su postgres&lt;/code&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;dropuser vagrant&lt;/code&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
  But then I had to make sure to type &lt;strong&gt;exit&lt;/strong&gt; to exit out of &lt;strong&gt;postgres@precise64:/vagrant/projects/microblog$&lt;/strong&gt; and get back to &lt;strong&gt;(blog-venv)vagrant@precise64:/vagrant/projects/microblog$&lt;/strong&gt;  to continue with the rest of the tutorial.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;2) When I ran &amp;#8216;heroku run python manage.py syncdb&amp;#8217;, I got:&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  Error: could not connect to server: No such file or directory Is the server running locally and accepting connections on Unix domain socket &amp;#8220;/var/run/postgresql/.s.PGSQL.5432&amp;#8243;?
&lt;/p&gt;

&lt;p&gt;
  Luckily,&lt;a href=&quot;http://stackoverflow.com/questions/14574827/gswd-heroku-django-manage-py-issue&quot;&gt; someone on stackoverflow&lt;/a&gt; had had the same problem; the solution was to make sure my settings/local.py file was in .gitignore; otherwise, Heroku would be confused by the presence of two DATABASES = { } dictionaries in both base.py and settings.py.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;3) Running multiple Django apps in my local environment created PORT conflicts&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  Since I had been in the middle of working on another Django app from the Tango with Django book when I started following this tutorial, I got a conflict in Vagrant with the port numbers. I ended up having to go into &lt;strong&gt;Vagrantfile &lt;/strong&gt;to change one of the ports from 8888 to 8889.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/05/Screen-Shot-2014-05-29-at-3.23.27-PM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-814&quot; alt=&quot;Screen Shot 2014-05-29 at 3.23.27 PM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/05/Screen-Shot-2014-05-29-at-3.23.27-PM.png&quot; width=&quot;209&quot; height=&quot;98&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/05/Screen-Shot-2014-05-29-at-3.23.52-PM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-815&quot; alt=&quot;Screen Shot 2014-05-29 at 3.23.52 PM&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/05/Screen-Shot-2014-05-29-at-3.23.52-PM.png&quot; width=&quot;703&quot; height=&quot;130&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
  Instead of being able to see my project in my local browser by just typing &lt;span style=&quot;color: #000000;&quot;&gt;&lt;b&gt;$ python manage.py runserver&lt;/b&gt;, I had to type &lt;strong&gt;$ &lt;/strong&gt;&lt;b&gt;python &lt;/b&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;b&gt;manage.py&lt;/b&gt;&lt;/span&gt;&lt;b&gt; runserver 0.0.0.0:8000&lt;/b&gt; to see my project in &lt;span style=&quot;text-decoration: underline;&quot;&gt;http://127.0.0.1:8889/&lt;/span&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  Meanwhile, to see my Tango with Django project, I had to run make sure to specify a local port too: &lt;strong&gt;$ python manage.py runserver 0.0.0.0:8887&lt;/strong&gt; and http://127.0.0.1:8887/rango.
&lt;/p&gt;

&lt;p&gt;
  NOTE: to start working on the project again, follow these steps after getting back into the &lt;strong&gt;gswd-vagrant&lt;/strong&gt; folder:&lt;br /&gt; $ vagrant suspend&lt;br /&gt; $ vagrant up #start the vagrant up again&lt;br /&gt; $ vagrant ssh #password is vagrant&lt;br /&gt; $ source ~/blog-venv/bin/activate
&lt;/p&gt;

&lt;p&gt;
  NOTE: if there is a vagrant conflict, make sure to vagrant halt on the other instance of vagrant running.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/review-getting-started-with-django-video-series-on-vimeo-kickstarter-backed-part-i/</link>
                <guid>http://username.github.io/review-getting-started-with-django-video-series-on-vimeo-kickstarter-backed-part-i</guid>
                <pubDate>2014-05-29T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;LEARNING TO CODE TIP: Find a Study Partner&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Find a study partner.
&lt;/p&gt;

&lt;p&gt;
  Your partner should be a friend or significant other, not a competitor.
&lt;/p&gt;

&lt;p&gt;
  Read through an entire book or tutorial together. Work through the parts you each get stuck on &amp;#8212; the parts that would&amp;#8217;ve discouraged you or driven you to distraction had you been studying the material by yourself.
&lt;/p&gt;

&lt;p&gt;
  Schedule an hour every day to work on the material in tandem. Don&amp;#8217;t skip ahead; don&amp;#8217;t let your partner skip ahead.
&lt;/p&gt;

&lt;p&gt;
  If you can&amp;#8217;t meet in person, talk on skype and use Skype&amp;#8217;s free screenshare feature in turns so that one or the other can &amp;#8220;drive&amp;#8221; the code.
&lt;/p&gt;

&lt;p&gt;
  Make sure you both type out any code passages in the book/tutorial. Complete the exercises. Ask questions about the same passages. Quiz each other on whether you can explain new concepts.
&lt;/p&gt;

&lt;p&gt;
  If something doesn&amp;#8217;t make sense, find external help. Start typing out questions on stackoverflow, and realize 90% of the way through that you already knew the answer. Use each of your respective googling skills. Find someone to take a look at your question at a programming meetup if all else fails.
&lt;/p&gt;

&lt;p&gt;
  Talk out loud. Constantly ask each other questions. Program individually, and then review each other&amp;#8217;s code.
&lt;/p&gt;

&lt;p&gt;
  Make it a habit. Do this an hour a day.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/learning-to-code-tip-find-a-study-partner/</link>
                <guid>http://username.github.io/learning-to-code-tip-find-a-study-partner</guid>
                <pubDate>2014-05-28T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;&amp;#8220;It’s not that you’re not smart – it’s just that repetition is often what it takes.&amp;#8221;&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I am still in the middle of learning Django.
&lt;/p&gt;

&lt;p&gt;
  In retrospect, starting with the &lt;a href=&quot;https://docs.djangoproject.com/en/1.5/intro/tutorial01/&quot; target=&quot;_blank&quot;&gt;Official Django Tutorial&lt;/a&gt; was a mistake. The tutorial jumps around too much, even in the first chapter; it&amp;#8217;s possible to follow the instructions and get your app working, but it probably serves better as a case study rather than a beginner&amp;#8217;s tutorial.
&lt;/p&gt;

&lt;p&gt;
  Recently, I read Erin Parker&amp;#8217;s story about &lt;a href=&quot;http://blog.hackbrightacademy.com/2014/04/spitfire-athlete-boasts-two-technical-co-founders-erin-parker-nidhi-kulkarni/&quot; target=&quot;_blank&quot;&gt;how she learned to program in Ruby on Rails and Objective-C in pursuit of her entrepreneurial goals&lt;/a&gt;, and it lifted me a little from my despair that learning Django was taking far longer than I thought it would. Okay, to be fair, I was sidelined a little by my attempts to get more comfortable with Python first. But Django still seemed scary. This was her advice:
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    Don’t be afraid to go through programming books many, many times! I went through the Michael Hartl Ruby on Rails tutorial 3 times before it finally clicked. [&amp;#8230;] Don’t be afraid to repeat, repeat, repeat until you’re comfortable with something inside and out. It’s not that you’re not smart – it’s just that repetition is often what it takes.&amp;#8221;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
  I&amp;#8217;m happy to report that I just re-read &lt;a href=&quot;https://docs.djangoproject.com/en/1.5/intro/tutorial01/&quot; target=&quot;_blank&quot;&gt;https://docs.djangoproject.com/en/1.5/intro/tutorial01/&lt;/a&gt; after finishing the exercises in &lt;a href=&quot;http://www.tangowithdjango.com/book/chapters/setup.html&quot; target=&quot;_blank&quot;&gt;http://www.tangowithdjango.com/book/chapters/setup.html&lt;/a&gt; and half of &lt;a href=&quot;https://www.youtube.com/watch?v=D5VlpgEVVg4&amp;#038;list=PLxxA5z-8B2xk4szCgFmgonNcCboyNneMD&quot; target=&quot;_blank&quot;&gt;https://www.youtube.com/watch?v=D5VlpgEVVg4&amp;amp;list=PLxxA5z-8B2xk4szCgFmgonNcCboyNneMD&lt;/a&gt;, and the interactions between the models, views, urls.py and databases, and why &lt;code&gt;syncdb&lt;/code&gt; is necessary makes a lot more sense! I can also see better all the ways the official tutorial jumped around, and in some ways got me to confuse the trees for the forest.
&lt;/p&gt;

&lt;p&gt;
  Anyway, tldr: don&amp;#8217;t give up. Revisit. Read carefully. Re-read.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/its-not-that-youre-not-smart-its-just-that-repetition-is-often-what-it-takes/</link>
                <guid>http://username.github.io/its-not-that-youre-not-smart-its-just-that-repetition-is-often-what-it-takes</guid>
                <pubDate>2014-05-22T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;More Python/Django Revelations&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Ok, I&amp;#8217;m still due to write a proper full review of &lt;a href=&quot;https://www.udacity.com/course/ud036&quot; target=&quot;_blank&quot;&gt;Udacity&amp;#8217;s Intro to Object-Oriented Programming&lt;/a&gt; course at some point (hopefully soon), but for now, I wanted to take a moment to say: I&amp;#8217;m so glad I made myself go through all the videos there, because a lot of the confusing things from before, from when I was trying to familiarize myself with Django for the first time, aren&amp;#8217;t so confusing anymore.
&lt;/p&gt;

&lt;p&gt;
  For example, here in the &lt;a href=&quot;https://docs.djangoproject.com/en/dev/topics/db/models/&quot; target=&quot;_blank&quot;&gt;Django docs about models&lt;/a&gt;:
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;from django.db import models

class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)&lt;/pre&gt;

&lt;p&gt;
  Looking at this piece of code for the first time, I HAD NO IDEA THAT &lt;code&gt;models.Model&lt;/code&gt; referred to the &lt;code&gt;models&lt;/code&gt; module, whose documentation can be found at &lt;a href=&quot;https://docs.djangoproject.com/en/dev/topics/db/models/&quot; target=&quot;_blank&quot;&gt;https://docs.djangoproject.com/en/dev/topics/db/models/&lt;/a&gt;!
&lt;/p&gt;

&lt;p&gt;
  &lt;code&gt;models.Model&lt;/code&gt; simply calls the &lt;code&gt;Model&lt;/code&gt; class from he module &lt;code&gt;models&lt;/code&gt;. It&amp;#8217;s a standard base class that helps us create representations of data in Django. In the example above, too, class &lt;code&gt;Person&lt;/code&gt; inherits properties from class &lt;code&gt;Models.model&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
  Also, a key line from the docs:&lt;br /&gt; &amp;#8220;Generally, each model maps to a single database table.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
  Makes a lot of sense now. We now have a database table named Person, with two columns for storing 30-character data: one to populate first_name, and another to populate last_name.
&lt;/p&gt;

&lt;p&gt;
  By the way, for the record, I&amp;#8217;m still finding &lt;a href=&quot;https://www.youtube.com/watch?v=D5VlpgEVVg4&amp;#038;list=TL04EOI77QDS76GOt2LAh57x8tD4JBu7kX&quot; target=&quot;_blank&quot;&gt;Mike Hibbert&amp;#8217;s Python/Django tutorial on YouTube&lt;/a&gt; really helpful. I&amp;#8217;d written previously about his videos in the context of setting up a virtualenv with Django.
&lt;/p&gt;

&lt;p&gt;
  If all goes well, perhaps I&amp;#8217;ll stick with it and see how it goes. More soon.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/more-pythondjango-revelations/</link>
                <guid>http://username.github.io/more-pythondjango-revelations</guid>
                <pubDate>2014-05-19T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;May 2014 To-Do List&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;s&gt;Finish Udacity&amp;#8217;s Object-Oriented Programming Tutorial (Python)&lt;/s&gt; Finished! Review coming soon.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;s&gt;Go through another Django tutorial and start building out the app for a real personal project&lt;/s&gt; I am going through &lt;a href=&quot;https://www.youtube.com/watch?v=D5VlpgEVVg4&amp;#038;list=TL04EOI77QDS76GOt2LAh57x8tD4JBu7kX&quot; target=&quot;_blank&quot;&gt;Mike Hibbert&amp;#8217;s Python/Django Youtube Series&lt;/a&gt; and the &lt;a href=&quot;http://www.tangowithdjango.com/book/&quot; target=&quot;_blank&quot;&gt;Tango with Django&lt;/a&gt; book.
  &lt;/li&gt;
  &lt;li&gt;
    Build something small with Backbone.js
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  &lt;b&gt;Upcoming Blog Entries In Draft&lt;/b&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    Review of a really good D3.js tutorial
  &lt;/li&gt;
  &lt;li&gt;
    Reflections of an astronaut&amp;#8217;s remarks from the NASA hackathon
  &lt;/li&gt;
  &lt;li&gt;
    &lt;s&gt;Review of what I learned participating in the Techcrunch Disrupt 2014 hackathon  (SASS, AngularJS design, don&amp;#8217;t pull an all-nighter, etc.)&lt;/s&gt;
  &lt;/li&gt;
  &lt;li&gt;
    Review of Codeschool.com&amp;#8217;s Chrome Browser tutorial (surprisingly good!)
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/may-2014-to-do-list/</link>
                <guid>http://username.github.io/may-2014-to-do-list</guid>
                <pubDate>2014-05-19T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;RESOURCE: Querying your Django Web App Without Using SQL&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  In case you need to query your Django API but don&amp;#8217;t want to write SQL, here&amp;#8217;s a useful video showing a summary of all the commands you can use:&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;
  Also: Ahh! Why is it that I often find screencasts to have much clearer explanations than written tutorials? In retrospect, it makes a lot of sense; the *ideal* tutorial would probably be a series of animated GIFs showing steps and the results of those actions, but nobody has time to compile a bunch of GIFs and then write out explanation texts when it&amp;#8217;s possible to hit two birds with one stone using a screencast.
&lt;/p&gt;

&lt;p&gt;
  The reason I&amp;#8217;m happy with this tutorial is because 1/3 of the way through the video, it reminded me that I could use .value(&amp;#8216;COLUMNA&amp;#8217;, &amp;#8216;COLUMNB&amp;#8217;) to grab the contents of the columns I needed. And I&amp;#8217;d failed to notice how to do it when I was skimming through the &lt;a href=&quot;https://docs.djangoproject.com/en/1.2/topics/db/queries/&quot; target=&quot;_blank&quot;&gt;official documentation on Django querysets&lt;/a&gt; earlier, mostly because &amp;#8212; well,
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/05/Screen-Shot-2014-05-17-at-11.42.55-PM.png&quot;&gt;&lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/05/Screen-Shot-2014-05-17-at-11.42.55-PM.png&quot; alt=&quot;django documentation screenshot&quot; width=&quot;921&quot; height=&quot;545&quot; class=&quot;alignnone size-full wp-image-759&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &amp;#8230; look a lot different than:
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/05/Screen-Shot-2014-05-17-at-11.30.39-PM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-758&quot; alt=&quot;screenshot django query&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/05/Screen-Shot-2014-05-17-at-11.30.39-PM.png&quot; width=&quot;800&quot; height=&quot;613&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Yes, I know this means I could try to read better, too. Just wanted to point out the usefulness of screencasts as a teaching method, I suppose &amp;#8212; especially for computer-based learning.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/resource-orm-query-api-from-the-full-web-framework-python-django-tutorial/</link>
                <guid>http://username.github.io/resource-orm-query-api-from-the-full-web-framework-python-django-tutorial</guid>
                <pubDate>2014-05-18T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Installing Django With Virtualenv&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I&amp;#8217;ve been looking at a couple of other Django tutorials lately, and recently &amp;#8212; thanks to David, another Django learner I talked to at a Python meetup &amp;#8212; I started making do with two great resources:
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;A) Youtube Series with Mike Hibbert:&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;B) &lt;a href=&quot;http://www.tangowithdjango.com/book/index.html&quot; target=&quot;_blank&quot;&gt;Tango with Django&lt;/a&gt; by Leif Azzopardi and David Maxwell.&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  The Tango with Django book initially looked great, but I was disappointed to find that it doesn&amp;#8217;t start off showing users how to run develop their app using virtualenv. (Some brief notes about using virtualenv doesn&amp;#8217;t come until &lt;a href=&quot;http://www.tangowithdjango.com/book/chapters/deploy.html#creating-a-virtual-environment&quot; target=&quot;_blank&quot;&gt;later in the book&lt;/a&gt;.) Mike Hibbert&amp;#8217;s video series, on the other hand, *starts off* walking the user through installation and virtualenv.
&lt;/p&gt;

&lt;p&gt;
  For the sake of my own memory and to save myself some time from having to go play/pause through all 17 minutes of the installation video again, I decided to jot down the steps to creating a new Django application using virtualenv:
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;1) Create a virtualenv:&lt;br /&gt; &lt;/strong&gt;
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ virtualenv --no-site-packages NAME-OF-VIRTUALENV&lt;/pre&gt;

&lt;p&gt;
  Replace all capital letters with a name of your choosing.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;2) Activate your virtualenv:&lt;/strong&gt;
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ source NAME-OF-VIRTUALENV&amp;#47;bin&amp;#47;activate&lt;/pre&gt;

&lt;p&gt;
  This gets you into the virtual environment. You&amp;#8217;ll notice that your command line now has this prefix:
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;(NAME-OF-VIRTUALENV)Your-MacBook-Air:$&lt;/pre&gt;

&lt;p&gt;
  &lt;strong&gt;3) Change directory into your project folder and install Django:&lt;/strong&gt;
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ cd NAME-OF-VIRTUALENV
$ easy_install django&lt;/pre&gt;

&lt;p&gt;
  You can also run &lt;code&gt; pip install -U django==1.5.4&lt;/code&gt; instead of &lt;code&gt; easy_install django&lt;/code&gt; if you want to install a specific version of Django instead of the latest version.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;4) Start a new project:&lt;/strong&gt;
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ django-admin.py startproject YOURPROJECTNAME&lt;/pre&gt;

&lt;p&gt;
  You&amp;#8217;re creating a new project.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;5) Preview your project in the browser:&lt;/strong&gt;
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ cd YOURPROJECTNAME
$ python manage.py runserver&lt;/pre&gt;

&lt;p&gt;
  After you type the second command, you&amp;#8217;ll be able to preview your app in your local browser.
&lt;/p&gt;

&lt;p&gt;
  &lt;span style=&quot;color: #000000;&quot;&gt;&lt;b&gt;6) Create a new application within your Django project (think of an application as an ice crem tub inside your Django freezer &amp;#8212; thanks for the metaphor, &lt;a href=&quot;http://pydanny.com/announcing-two-scoops-of-django-1.6.html&quot; target=&quot;_blank&quot;&gt;Two Scoops of Django&lt;/a&gt;!):&lt;/b&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ python manage.py startapp APPNAME&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I found another good tutorial! The founder behind Coding for Entrepreneurs Youtube series demonstrates the creation of a Django project in virtualenv on his mac:&amp;lt;/p&amp;gt; &lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/installing-django-with-virtualenv/</link>
                <guid>http://username.github.io/installing-django-with-virtualenv</guid>
                <pubDate>2014-05-17T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;What I learned from participating in TechCrunch Disrupt&amp;#8217;s 2014 Hackathon&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Wow, what a night. After acquiring a ticket to the Techcrunch hackathon through pure chance, I ended up entering the door at 12:30pm on Saturday, May 3rd without a strong idea for a hack or a team. Luckily, it wasn&amp;#8217;t too hard to find a team to join after I simply started chatting with the folks who were already seated at the tables.
&lt;/p&gt;

&lt;p&gt;
  I ended up working with a group of strangers who didn&amp;#8217;t have a strong idea of what they wanted to build either, so for the first half hour or so we simply looked at and chatted with the different API sponsors. We started building on the Concur API, but ultimately drew in five more (Mailjet, Sendgrid, Evernote, Pearson, Wunderground) for the dashboard. Three of us focused on the front-end/UX/AngularJS side, and two of us focused on the API/NodeJS/back-end side.
&lt;/p&gt;

&lt;p&gt;
  We stayed up all night.
&lt;/p&gt;
&lt;figure id=&quot;attachment_722&quot; aria-labelledby=&quot;figcaption_attachment_722&quot; class=&quot;wp-caption alignnone&quot; style=&quot;width: 964px&quot;&gt;

&lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/05/tc.jpg&quot;&gt;&lt;img class=&quot;size-full wp-image-722&quot; alt=&quot;Techcrunch 2014&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/05/tc.jpg&quot; width=&quot;960&quot; height=&quot;720&quot; /&gt;&lt;/a&gt;&lt;figcaption id=&quot;figcaption_attachment_722&quot; class=&quot;wp-caption-text&quot;&gt;Techcrunch Hackathon 2014. I took this photo a little past midnight.&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;
  &lt;strong&gt;Lesson Learned #1: Don&amp;#8217;t pull an all-nighter. &lt;/strong&gt;&lt;br /&gt; The pain from pulling an all-nighter is probably ten times worse than the pain from simply waking up tired in the morning. My plan for the next 24-hour hackathon I attend, I think, would be to finish the bulk of the code by midnight, submit the project description by 1AM to qualify for a presentation spot, make everyone go home to nap, come back in the morning, and start again refreshed.
&lt;/p&gt;

&lt;p&gt;
  I could feel my body start to shut down around 4am/5am. It was not fun.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;#2: I really enjoy working with other developers in person&lt;/strong&gt;.&lt;br /&gt; That feeling when you commit something you think is adequate but not great, and then your teammate comes back with a spectacular design or code improvement? Pretty awesome &amp;#8212; since in my experience, that&amp;#8217;s when my best learning takes place.
&lt;/p&gt;

&lt;p&gt;
  Working in person, I also enjoyed the advantage of being able to walk over to say &amp;#8220;Hey, how did you achieve that effect?&amp;#8221; or to show someone my screen and get immediate feedback on what I was working on. I&amp;#8217;ve been working in a virtual office long enough to know that it is possible to work effectively in a distributed environment, but being at this hackathon reminded me of the convenience of being able to explain something going on with my development environment without needing to type multiple words or use an app.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;#3: I need to learn Backbone.js and Node.js. Preferably both.&lt;/strong&gt;&lt;br /&gt; I felt a little crippled because I could mostly only contribute to the UI, which doesn&amp;#8217;t do much for making the web app work. So&amp;#8230; onwards! After Django.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;#4: I really like SASS!&lt;/strong&gt;&lt;br /&gt; I&amp;#8217;d used LESS before, but didn&amp;#8217;t care for it much. Turns out that SASS is very similar, and one of the differences is the use of $ signs instead of @ signs for variables. Working with Daniel, another front-end developer who seemed to know his way around SASS, I looked at the beauty of his CSS files, read through the &lt;a href=&quot;http://sass-lang.com/guide&quot; target=&quot;_blank&quot;&gt;introductory documentation&lt;/a&gt;, wrote some nested CSS myself, and promptly fell in love.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;#5: Apparently $2 bills are real&amp;#8230;?   &lt;/strong&gt;&lt;br /&gt; One of the companies/sponsors started passing out newly minted $2 bills. There were homeless people down the street. No further comment.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;#6: Web development is a craft.&lt;/strong&gt;&lt;br /&gt; To be a superb full-stack developer who can also design, you need to be artistically inclined, logical, mathematically inclined, have patience, be able to communicate effectively with others, and also be able to pay superb attention to detail.
&lt;/p&gt;

&lt;p&gt;
  You don&amp;#8217;t need to be a genius, but you do need perseverance and experience. Actually, experience is probably the key; I&amp;#8217;ve met highly proficient web developers who didn&amp;#8217;t graduate from college, and who didn&amp;#8217;t study computer science. Nobody cares about your &amp;#8220;academic background&amp;#8221; as long as you can build and ship it.
&lt;/p&gt;

&lt;p&gt;
  Modern-age blacksmiths, anyone? No hammer needed; just the ability to type and a high tolerance level for frustration.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;#7: &amp;#8216;Pass-by-reference&amp;#8217; and &amp;#8216;pass-by-value&amp;#8217; in javascript. &lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/05/oopjs.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-733&quot; alt=&quot;oopjs&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/05/oopjs.png&quot; width=&quot;560&quot; height=&quot;371&quot; /&gt;&lt;/a&gt;&lt;br /&gt; &lt;em&gt;primitives are pass-by-value.&lt;/em&gt;&lt;br /&gt; &lt;em&gt; Primitives include undefined, null, boolean, string, number, object {bar: &amp;#8220;something&amp;#8221;} and are pass-by-value. Values are not connected.&lt;/em&gt;&lt;br /&gt; &lt;em&gt; Special objects include function, array, regexp&lt;/em&gt;&lt;br /&gt; &lt;em&gt;Objects are pass-by-reference.&lt;/em&gt;&lt;br /&gt; &amp;#8212; Haphazard notes from very late night in the late, when I thought it would be a good idea to refresh my understanding of object-oriented javascript by watching &lt;a href=&quot;http://www.objectplayground.com/&quot; target=&quot;_blank&quot;&gt;http://www.objectplayground.com&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  (Hah! Who says you can&amp;#8217;t learn at hackathons?)
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;#8: Where to get free high-quality photos and font icons. &lt;/strong&gt;&lt;br /&gt; I learned about &lt;a href=&quot;http://www.unsplash.com&quot; target=&quot;_blank&quot;&gt;unsplash.com&lt;/a&gt; and &lt;a href=&quot;http://www.fontawesome.io&quot; target=&quot;_blank&quot;&gt;fontawesome.io&lt;/a&gt; from my team. Thanks, team!
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;#9: Life realizations. &lt;/strong&gt;&lt;br /&gt; &amp;#8230; Just kidding.&lt;br /&gt; No, actually, participating in this hackathon did remind me that I was here to learn, and also made me more determined to use my skills to start building out more civic tech/social innovation-type ideas. Convenience apps that solve first-world problems are only so important so long as the &lt;a href=&quot;http://www.nytimes.com/2014/05/13/science/earth/collapse-of-parts-of-west-antarctica-ice-sheet-has-begun-scientists-say.html?_r=0&quot; target=&quot;_blank&quot;&gt;Antarctic ice sheet isn&amp;#8217;t falling apart&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;#10: Sunshine is awesome&lt;/strong&gt;.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/05/summer.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-723&quot; alt=&quot;summer&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/05/summer.jpg&quot; width=&quot;3264&quot; height=&quot;2448&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  I went home in the morning, collapsed for four hours, and then woke up barely coherent enough to decide to go for a run before the sun set.
&lt;/p&gt;

&lt;p&gt;
  I think I can understand why people choose to hang outside with friends and family over the weekend instead of hanging out at hackathons, but why choose the easy path?
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;EPILOGUE:&lt;/strong&gt;&lt;br /&gt; My team won first place for one of the sponsor prizes! Many thanks to &lt;a href=&quot;http://blog.mailjet.com/&quot; target=&quot;_blank&quot;&gt;Mailjet&lt;/a&gt; for the recognition, and to my hackathon teammates who taught me so much in 18 hours: Miguel, Sandra, Anthony, and Daniel.
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/what-i-learned-from-participating-in-techcrunch-disrupts-2014-hackathon/</link>
                <guid>http://username.github.io/what-i-learned-from-participating-in-techcrunch-disrupts-2014-hackathon</guid>
                <pubDate>2014-05-05T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;10 Reasons I Encourage Friends To Go To Hackathons&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I went to my first hackathon in November 2012, registered as a &amp;#8220;designer&amp;#8221; instead of a &amp;#8220;developer,&amp;#8221; found myself the only woman on a team, and proceeded to have the most fun, nerve-wracking, up-and-down weekend ever with a group of strangers.
&lt;/p&gt;

&lt;p&gt;
  This is what I remember: joy, laughter, sharing of backgrounds, learning how to work together, an argument between two team members over a code design technicality, panic, stepping in at the last hour to help finish a presentation.
&lt;/p&gt;

&lt;p&gt;
  Later on, one of those strangers &amp;#8212; a marine-turned-business-consultant &amp;#8212; would tell us that not since his military days had he had such an intense bonding experience with a team.
&lt;/p&gt;

&lt;p&gt;
  I wasn&amp;#8217;t on a winning hackathon team until &lt;a href=&quot;http://open.blogs.nytimes.com/2013/11/22/timesopen-hack-day-2013/?_php=true&amp;amp;_type=blogs&amp;amp;_r=0&quot; target=&quot;_blank&quot;&gt;about a year later&lt;/a&gt;, at my 6th or 7th one. What I&amp;#8217;d realized by then was that I didn&amp;#8217;t have to win to have a great experience. Every time, it was the people I connected with that made the experience the most satisfying.
&lt;/p&gt;

&lt;p&gt;
  A few reasons I&amp;#8217;d encourage any budding developer to go to a hackathon:
&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;strong&gt;You&amp;#8217;ll learn what you don&amp;#8217;t know.&lt;/strong&gt; &lt;ul&gt;
      &lt;li&gt;
        Hackathons are as much a social event as a coding event. In the process of talking to people, you&amp;#8217;ll learn from the tools they use or the tools and resources they talk about using.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;strong&gt;You&amp;#8217;ll realize what you *do* know, and teach others about what you know.&lt;/strong&gt; &lt;ul&gt;
      &lt;li&gt;
        Technology is big, and there&amp;#8217;s a wide range of people who go to hackathons. An iOS developer is not going to have the same range of expertise as an Android developer or a web applications developer or an arduino hacker or a UX designer. Don&amp;#8217;t be shy about sharing your skills &amp;#8212; even if it&amp;#8217;s a cool trick in Photoshop. I guarantee there will be people who don&amp;#8217;t know how to use Photoshop too.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;strong&gt;You&amp;#8217;ll get to pair-program.&lt;/strong&gt; &lt;ul&gt;
      &lt;li&gt;
        THIS. Pair-programming is awesome if want to focus on getting as much done as possible in a short amount of time, and would enjoy talking out problems with a partner. It&amp;#8217;s best to find someone of a similar skill level, and take turns &amp;#8220;driving&amp;#8221; (typing) and advising.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;strong&gt;Free food!&lt;/strong&gt; &lt;ul&gt;
      &lt;li&gt;
        To be honest, the food quality depends on how much attention the organizers pay to it. But yes &amp;#8212; most times, expect nourishment.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;strong&gt;You&amp;#8217;ll build something by the end of the weekend.&lt;/strong&gt; &lt;ul&gt;
      &lt;li&gt;
        More often than not, it&amp;#8217;s not *completely* done&amp;#8230; but most likely you&amp;#8217;ll have something visual to demo, and that&amp;#8217;s all that matters.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;strong&gt;You&amp;#8217;ll automatically contribute to open source.&lt;/strong&gt; &lt;ul&gt;
      &lt;li&gt;
        Hint: if it&amp;#8217;s software, push it to github.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;strong&gt;You&amp;#8217;ll meet many interesting, motivated people.&lt;/strong&gt; &lt;ul&gt;
      &lt;li&gt;
        Who goes to hackathons, if not motivated people who think it&amp;#8217;ll be fun to spend a weekend building something?
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;strong&gt;You&amp;#8217;ll make new friends.&lt;/strong&gt; &lt;ul&gt;
      &lt;li&gt;
        Hackathons are time-sensitive, sometimes intense experiences that force people to work together. This makes for great bonding experiences.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;strong&gt;You&amp;#8217;ll be on a prize-winning team 10-25% of the time.&lt;/strong&gt; &lt;ul&gt;
      &lt;li&gt;
        Companies sometimes sponsor hackathons to advertise their APIs or products to developers. They also occasionally sponsor prizes. What this often means is that there&amp;#8217;s no single hackathon &amp;#8220;winner,&amp;#8221; but rather multiple winners.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;strong&gt;You&amp;#8217;ll grow as a developer.&lt;/strong&gt; &lt;ul&gt;
      &lt;li&gt;
        You&amp;#8217;ll learn a lot from talking to people, from being forced to understand better the unfamiliar framework your team picked to use, and from being able to sit by your team and ask or answer any immediate quesetion.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
  A few misconceptions about hackathons:
&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;strong&gt;You have to be on time.&lt;/strong&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;You have to pull an all-nighter and/or sleep overnight.&lt;/strong&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;You have to be a good programmer.&lt;/strong&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
  You don&amp;#8217;t have to be a good programmer, stay overnight, or even be on time to go to a hackathon. Half the time, most of the attendees won&amp;#8217;t know what they&amp;#8217;re working on until a couple hours in &amp;#8212; *after* they&amp;#8217;ve formed teams with other strangers. Approach hackathons with the willingness to meet people and to learn, and you&amp;#8217;ll have a fantastic experience.
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/why-you-should-go-to-a-hackathon/</link>
                <guid>http://username.github.io/why-you-should-go-to-a-hackathon</guid>
                <pubDate>2014-05-02T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;REVIEW: Coding for Entrepreneurs Video Series Tutorial (Build a Django App)&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  This tutorial took a couple of hours on Saturday afternoon and a couple of hours at Hacker Hours today, + 2 hours this evening to finish. All 21 videos were free, and you can start watching it here:
&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;

&lt;p&gt;
  My review: videos &lt;strong&gt;1-16&lt;/strong&gt; were great, especially since the main part I was clueless about was working with models/views/controllers &amp;#8212; so it was helpful seeing a couple of examples laid out step-by-step. I ran into trouble twice &amp;#8212; once because I made a typo, and a second time because I missed that a tuple containing a single value still needed a comma (seriously).
&lt;/p&gt;

&lt;p&gt;
  Although this (&lt;a href=&quot;https://www.kickstarter.com/projects/jmitchel3/coding-for-entrepreneurs&quot;&gt;Kickstarter-backed!&lt;/a&gt;) series purports to be aimed at entrepreneurs with &amp;#8220;no background,&amp;#8221; I&amp;#8217;m not sure I&amp;#8217;d recommend it to a complete beginner. Yes, it does a nice job summarizing simple command line and keyboard tricks as an acknowledgment to those who&amp;#8217;ve never encountered the terminal, but I imagine some knowledge of python (so one can roughly understand what they&amp;#8217;re typing) and html/css would significantly improve the experience.
&lt;/p&gt;

&lt;p&gt;
  I was not a fan of &lt;strong&gt;17&lt;/strong&gt;, &lt;strong&gt;18&lt;/strong&gt;, and &lt;strong&gt;19&lt;/strong&gt;, since for some reason the series decided to advertise paid hosting on webfaction.com and advocated manually dragging/dropping files via SFTP.
&lt;/p&gt;

&lt;p&gt;
  There was also no mention of version control, or the fact that herokuapp technically allows free django app deployments from git&amp;#8230; which would&amp;#8217;ve been a great step to see.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;20&lt;/strong&gt; was mostly about a simple copy/paste job of facebook/twitter plugin snippets. The series also relied heavily on bootstrap 3 to make its UI shiny, which I thought was a smart move, but I still can&amp;#8217;t imagine anyone without at least *some* prior html/css knowledge going through this tutorial without a lot of questions.
&lt;/p&gt;

&lt;p&gt;
  Summary: This ended being a pretty-good-start-to-but-not-entirely-comprehensive Django tutorial. I&amp;#8217;m going to hit a textbook next.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/review-coding-for-entrepreneurs-video-series-tutorial-build-a-django-app/</link>
                <guid>http://username.github.io/review-coding-for-entrepreneurs-video-series-tutorial-build-a-django-app</guid>
                <pubDate>2014-04-22T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Udacity&amp;#8217;s Intro to Object-Oriented Programming Class&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Udacity just launched an intro to object-oriented programming class using python (as always), and I am super excited! I&amp;#8217;d already gone through some of its &lt;a href=&quot;https://www.udacity.com/course/cs101&quot; target=&quot;_blank&quot;&gt;Intro to Computer Science&lt;/a&gt; and &lt;a href=&quot;https://www.udacity.com/course/cs253&quot; target=&quot;_blank&quot;&gt;Web Development&lt;/a&gt; curriculum. What I really like about the videos is that they stop occasionally to quiz you. In addition, they give you exercises and homework assignments to submit, and forums to go to if you have a question.
&lt;/p&gt;

&lt;p&gt;
  I&amp;#8217;ll have a more complete review about this series after I complete more than just the first few chapters.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;UPDATE: &lt;/strong&gt;I finished! Took me about a week and a half to go through. I&amp;#8217;ll have a more thorough review of the course up later.
&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/udacitys-intro-to-object-oriented-programming-class/</link>
                <guid>http://username.github.io/udacitys-intro-to-object-oriented-programming-class</guid>
                <pubDate>2014-04-20T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;REVIEW: Zed Shaw&amp;#8217;s &amp;#8216;Learn Python The Hard Way&amp;#8217; (Chapters 1-43)&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Learning Python was a lot easier after being familiar with Javascript.
&lt;/p&gt;

&lt;p&gt;
  I was warned about Python&amp;#8217;s spacing and indentation issues, which I took in stride. I also really enjoyed the lack of extra () and {}. Also, coming from javascript, I felt that the language was pretty intuitive. &lt;em&gt;For loops&lt;/em&gt; and &lt;em&gt;while loops&lt;/em&gt; were similar. There was even an equivalent between the &lt;strong&gt;console.log() &lt;/strong&gt;in javascript and &lt;strong&gt;print&lt;/strong&gt; in Python; I remember asking, several months ago, the difference between &lt;strong&gt;console.log&lt;/strong&gt; and &lt;strong&gt;return&lt;/strong&gt; in javascript, and I can only now belatedly appreciate just how elementary that question was.
&lt;/p&gt;

&lt;p&gt;
  For beginners completely new to web development, I&amp;#8217;d still recommend learning html/css/javascript first, along with a simple introduction to github, just so they can get over the hurdles of understanding functions for the first time, why they need to use the terminal, and how file paths work, etc.
&lt;/p&gt;

&lt;p&gt;
  Anyway. I should probably preface that before I started &lt;a href=&quot;http://learnpythonthehardway.org/book/&quot;&gt;Learn Python The Hard Way (LPTHW)&lt;/a&gt; this time, I went through about 43% of &lt;a href=&quot;http://www.codecademy.com/tracks/python&quot; target=&quot;_blank&quot;&gt;Codecademy&amp;#8217;s Python track&lt;/a&gt;. It was helpful insofar as getting me used to Python syntax (its unique way of writing functions!) and some simple exercises, but LPTHW is definitely the meatier of the two tutorials. Here&amp;#8217;s my brief review of the first 43 chapters:
&lt;/p&gt;

&lt;p&gt;
  &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Chapters 1-10&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  Breezed though these chapters, mainly because there are only so many differences between javascript and python re: comments, variables, and strings. I think I&amp;#8217;d previously written about beginners possibly getting &lt;a title=&quot;Teaching a beginner Lessons 0 and 1 of Zed Shaw’s Learn Python The Hard Way&quot; href=&quot;http://www.thecodingdiaries.com/teaching-a-beginner-lessons-0-and-1-of-zed-shaws-learn-python-the-hard-way/&quot; target=&quot;_blank&quot;&gt;tripped up by having to use the terminal&lt;/a&gt;. The other thing that must&amp;#8217;ve tripped up true programming beginners would probably be typos, but I didn&amp;#8217;t have as much a problem with that. The thing I did have to re-familiarize myself with was the concept of substitution:
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;my_eyes = &amp;#39;brown&amp;#39;
my_hair = &amp;#39;black&amp;#39;
print &amp;#34;He&amp;#39;s got %s eyes and %s hair.&amp;#34; % (my_eyes, my_hair)&lt;/pre&gt;

&lt;p&gt;
  &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Chapters 11-20&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  Some notes for review:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    Put a comma at the end of each &lt;strong&gt;print&lt;/strong&gt; line so that &lt;strong&gt;print &lt;/strong&gt;doesn&amp;#8217;t end with a newline character and go to the next line (Chapter 11)
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;variable = raw_input(&amp;#8220;&amp;gt; &amp;#8220;) &lt;/strong&gt; (Chapter 11)
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;txt = open(filename)&lt;/strong&gt; creates a variable named &amp;#8216;txt&amp;#8217; and opens up the file. &lt;strong&gt;print txt.read() &lt;/strong&gt;opens up the file and spews out the contents of the file. Commenting each line of code helped me understand it a lot better. (Chapter 15)
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;from sys import argv&lt;/strong&gt;, typically seen at the top of a file, means that sys is a &lt;em&gt;package&lt;/em&gt;, and the &lt;em&gt;argv&lt;/em&gt; feature is retrieved from that package. (Chapter 15)
  &lt;/li&gt;
  &lt;li&gt;
    Googled why I had to do &lt;strong&gt;output.close(): &lt;/strong&gt;https://mail.python.org/pipermail/tutor/2012-January/088031.html (Chapter 17)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;span style=&quot;color: #000000; text-decoration: underline;&quot;&gt;&lt;b&gt;Chapters 21-3&lt;/b&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;strong&gt;int(raw_input()) &lt;/strong&gt;vs. &lt;strong&gt;float(raw_input())&lt;/strong&gt;
  &lt;/li&gt;
  &lt;li&gt;
    control-d exits you out of the python shell
  &lt;/li&gt;
  &lt;li&gt;
    If you have a file named example.py, you can type &lt;strong&gt;python &lt;/strong&gt;to get into the python shell, type &lt;strong&gt;from example import * &lt;/strong&gt;to import all the features from the example.py package, type &lt;strong&gt;help(example)&lt;/strong&gt; to see the contents of that file, and run commands against that file.
  &lt;/li&gt;
  &lt;li&gt;
    Make sure to change a piece of string into a list using &lt;strong&gt;.split(&amp;#8216; &amp;#8216;) &lt;/strong&gt;first if you want to use something like &lt;strong&gt;.pop(0)&lt;/strong&gt; to break off the first word in the list.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;pre class=&quot;prettyprint&quot;&gt;def break_words(stuff):
&amp;#34;&amp;#34;&amp;#34;This function will break up words for us.&amp;#34;&amp;#34;&amp;#34;
words = stuff.split(&amp;#39; &amp;#39;)
return words&lt;/pre&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    Exercise 26: more practice with functions.
  &lt;/li&gt;
  &lt;li&gt;
    Exercise 27: &lt;pre class=&quot;prettyprint&quot;&gt;TRUE or FALSE -&amp;gt; if has true in it, true.
TRUE AND FALSE -&amp;gt; if has false in it, false.&lt;/pre&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    Exercise 30: Story with a bear.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Chapters 31-43&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    Start with an empty list&lt;br /&gt; &lt;code class=&quot;prettyprint&quot;&gt;elements = &amp;#91;&amp;#93;&lt;/code&gt;&lt;br /&gt; , then use the range function to count from 0 to 5 &lt;pre class=&quot;prettyprint&quot;&gt;for i in range(0,6):
     print &amp;#34;Adding %d to the list.&amp;#34; % i
     #append is a function that lists understand
     elements.append(i)&lt;/pre&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    There a bunch of methods you can use on lists, like &lt;strong&gt;list.append(), list.extend(), list.pop(), list.sort(), list.reverse()&lt;/strong&gt;, etc.: &lt;a href=&quot;https://docs.python.org/2/tutorial/datastructures.html&quot; target=&quot;_blank&quot;&gt;https://docs.python.org/2/tutorial/datastructures.html&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    My solution for printing out a 2D list like [[1,2,3][4,5,6]]: &lt;pre class=&quot;prettyprint&quot;&gt;#starting with an empty list
elements = &amp;#91;&amp;#93;
#then use the range function to do 0 to 5 counts
for i in range(0,2):
     new = &amp;#91;&amp;#93;
     #append is a function that lists understand
     for j in range(1,4):
         if i == 1:
            new.append(j+3)
         else:
            new.append(j)
     elements.append(new)
# now we can print them out too
print elements&lt;/pre&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    Use &lt;strong&gt;while&lt;/strong&gt; loops sparingly in python. Usually a &lt;strong&gt;for &lt;/strong&gt;loop is better.
  &lt;/li&gt;
  &lt;li&gt;
    Review your while statements and make sure that the thing you are testing will become False at some point.
  &lt;/li&gt;
  &lt;li&gt;
    When in doubt, print out your test variable at the top and bottom of the while-loop to see what it&amp;#8217;s doing.
  &lt;/li&gt;
  &lt;li&gt;
    Think of using &lt;strong&gt;print&lt;/strong&gt; like using your console.log() in javascript.
  &lt;/li&gt;
  &lt;li&gt;
    Every &lt;strong&gt;if &lt;/strong&gt;statement must also have an &lt;span style=&quot;color: #000000;&quot;&gt;&lt;b&gt;else&lt;/b&gt;.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li&gt;
    Using try/except: &lt;pre class=&quot;prettyprint&quot;&gt;def start():
    print &amp;#34;You are in a dark room.&amp;#34;
    print &amp;#34;There is a door to your right and left.&amp;#34;
    print &amp;#34;Which one do you take?&amp;#34;

    next = raw_input(&amp;#34;&amp;gt; &amp;#34;)
    #print (how_much)

    if next == &amp;#34;left&amp;#34;:
        bear_room()
    elif next == &amp;#34;right&amp;#34;:
        cthulhu_room()
    else:
        try:
            how_much = int(next)
            print &amp;#34;yay number!&amp;#34;
        except ValueError:
            print &amp;#34;Not a number or left or right. You stumble around the room until you starve.&amp;#34;
start()&lt;/pre&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;strong&gt;Q:&lt;/strong&gt; What&amp;#8217;s the relationship between dir(something) and the &amp;#8220;class&amp;#8221; of something?&lt;br /&gt; &lt;strong&gt;A:&lt;/strong&gt; dir(something) gives you all the attributes of the object. The class is like the blueprint for the house.
  &lt;/li&gt;
  &lt;li&gt;
    You can only use numbers to retrieve items from a list. You can use any type to retrieve items from a dictionary. For example: list[1] versus dictionary[&amp;#8216;word&amp;#8217;].
  &lt;/li&gt;
  &lt;li&gt;
    &lt;pre class=&quot;prettyprint&quot;&gt;for a, b in states.items():
    print &amp;#34;%s is abbreviated %s&amp;#34; % (a, b)&lt;/pre&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    In Exercise 40 we finally start talking about classes!&lt;br /&gt; &lt;blockquote&gt;
      &lt;p&gt;
        &amp;#8220;Here&amp;#8217;s why classes are used instead of modules: You can take the above class and use it to craft many of them, millions at a time if you want, and they won&amp;#8217;t interfere with each other. With modules, when you import there is only one for the entire program unless you do some monster hacks.&amp;#8221;
      &lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    When you instantiate a class, you get an object. Example: &lt;pre class=&quot;prettyprint&quot;&gt;thing = MyStuff()
thing.apple()
print thing.tangerine&lt;/pre&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    Exercise 41 is pretty fun: you run a script that helps you memorize how to read each of the components in a module. For example, in English, &lt;strong&gt;class apple(object): def sky(self, horse)&lt;/strong&gt; translates to &amp;#8220;class apple has-a function named sky that takes self and horse parameters.&amp;#8221;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  One day I&amp;#8217;m going to look back on these notes and think: &amp;#8220;Did I really have to take notes on that?&amp;#8221; But in the meantime&amp;#8230;
&lt;/p&gt;

&lt;p&gt;
  Update: This already happened for some bullet points, hah!
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/review-zed-shaws-learn-python-the-hard-way-chapters-1-43/</link>
                <guid>http://username.github.io/review-zed-shaws-learn-python-the-hard-way-chapters-1-43</guid>
                <pubDate>2014-04-20T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;The Growth Stages of Reacting to Error Messages, Web-Developer Style&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Stage 1 (beginner level):&lt;/strong&gt; Panic and call your hosting company.
&lt;/p&gt;

&lt;p&gt;
  Because you&amp;#8217;re a beginner. And for some reason, English in technical jargon just Does Not Compute. To you, &amp;#8220;Error on line 41 in askdjf2fj-sldfkjsfaf.php&amp;#8221; means &amp;#8220;OMG I JUST BROKE THE SITE HOW DO I REVERSE IT.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Stage 2 (after a few months):&lt;/strong&gt; Google.
&lt;/p&gt;

&lt;p&gt;
  After a few months, you start to realize that the hey, the error messages actually contain meaning, and other people have encountered similar errors! If you can&amp;#8217;t undo what you just did to get the error, you copy/paste it into a search engine. Half the time you find nothing helpful; the other half of the time, you find something, but don&amp;#8217;t understand enough to find the Stackoverflow solution helpful.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Stage 3 (after a few months more):&lt;/strong&gt; You read the error like it&amp;#8217;s English.
&lt;/p&gt;

&lt;p&gt;
  &amp;#8230; And you understand enough to decipher the meaningless jargon the screen sometimes spits out from &lt;em&gt;what&amp;#8217;s really important&lt;/em&gt;. Then you go ahead and find the right file and fix the corresponding error. Sometimes the instructions for what to do next (like when there&amp;#8217;s a merge conflict in git) are output directly into the console, yay!
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Stage 4 (a year later): &lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  You know when to attempt a quick fix, when to google, when to ask for help from a co-worker, and when to say &amp;#8220;to heck with it&amp;#8221; and restart your server and rebuild your database. You don&amp;#8217;t panic anymore, because you know that somehow, somewhere, at some point it will be fixed.
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;
  Okay, this is a somewhat tongue-in-cheek story of what I&amp;#8217;ve been through with error messages. I&amp;#8217;m learning Django now, and suddenly I&amp;#8217;m looking forward to a lot more server-issue-related messages. I still don&amp;#8217;t like them, but I panic a lot less now.
&lt;/p&gt;

&lt;p&gt;
  And I&amp;#8217;ve stopped calling my hosting company.*
&lt;/p&gt;

&lt;p&gt;
  *Yes, I am embarrassed to admit this did happen when I messed up some PHP on my first ever self-hosted WordPress site. &lt;em&gt;This was before I even knew CSS, okay? Okay.&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/the-growth-stages-of-reacting-to-error-messages-web-developer-style/</link>
                <guid>http://username.github.io/the-growth-stages-of-reacting-to-error-messages-web-developer-style</guid>
                <pubDate>2014-04-18T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;OMG, I got a two-gold-star-difficulty question on Udacity right!&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;The question:&lt;/strong&gt;
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    # Given a variable, x, that stores the&lt;br /&gt; # value of any decimal number, write Python&lt;br /&gt; # code that prints out the nearest whole&lt;br /&gt; # number to x.&lt;br /&gt; # If x is exactly half way between two&lt;br /&gt; # whole numbers, round up, so&lt;br /&gt; # 3.5 rounds to 4 and 2.5 rounds to 3.&lt;br /&gt; # You may assume x is not negative.
  &lt;/p&gt;
  
  &lt;p&gt;
    # Hint: The str function can convert any number into a string.&lt;br /&gt; # eg str(89) converts the number 89 to the string &amp;#8217;89&amp;#8217;
  &lt;/p&gt;
  
  &lt;p&gt;
    # Along with the str function, this problem can be solved&lt;br /&gt; # using just the information introduced in unit 1.
  &lt;/p&gt;
  
  &lt;p&gt;
    # x = 3.14159&lt;br /&gt; # &amp;gt;&amp;gt;&amp;gt; 3 (not 3.0)&lt;br /&gt; # x = 27.63&lt;br /&gt; # &amp;gt;&amp;gt;&amp;gt; 28 (not 28.0)&lt;br /&gt; # x = 3.5&lt;br /&gt; # &amp;gt;&amp;gt;&amp;gt; 4 (not 4.0)
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;My answer:&lt;/strong&gt;&lt;br /&gt; x = 27.83&lt;br /&gt; rounded = round(x)&lt;br /&gt; convert_to_string = str(rounded)&lt;br /&gt; before_decimal = convert_to_string.find(&amp;#8216;.&amp;#8217;)&lt;br /&gt; print convert_to_string[0:before_decimal]
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
  &amp;#8230; Okay, okay, this probably isn&amp;#8217;t &lt;em&gt;that&lt;/em&gt; impressive, given that I&amp;#8217;d already gone through most of Learn Python the Hard Way before I decided to revisit Udacity, and at this point I&amp;#8217;m comfortable enough to google and understand Python documentation when I need to.
&lt;/p&gt;

&lt;p&gt;
  However, I *do* remember struggling with this last year when I first went tried out Udacity. So &amp;#8212; yay for being self-aware about how I&amp;#8217;m improving, I guess!
&lt;/p&gt;

&lt;p&gt;
  One very simple python function I used that the official Udacity answer didn&amp;#8217;t use (they just manually added 0.5 to x): &lt;a href=&quot;https://docs.python.org/2/library/functions.html#round&quot; target=&quot;_blank&quot;&gt;https://docs.python.org/2/library/functions.html#round&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/yay-i-got-this-two-gold-star-difficulty-question-on-udacity-right/</link>
                <guid>http://username.github.io/yay-i-got-this-two-gold-star-difficulty-question-on-udacity-right</guid>
                <pubDate>2014-04-10T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Well played, AlleyNYC: Free Tech Co-Working on Sundays!&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Early last year, some of &lt;a href=&quot;http://www.meetup.com/codecrewny/&quot; target=&quot;_blank&quot;&gt;my&lt;/a&gt; &lt;a href=&quot;http://www.meetup.com/hackerhours/&quot; target=&quot;_blank&quot;&gt;favorite&lt;/a&gt; &lt;a href=&quot;http://www.meetup.com/nycpython/&quot; target=&quot;_blank&quot;&gt;casual&lt;/a&gt; NYC tech meetups were meeting in coffee shops and the New York Public Library on the weekends. Then, suddenly, I was getting e-mails from &lt;em&gt;all three meetups &lt;/em&gt;about a free new venue on Sunday afternoons &amp;#8212; at a co-working place called &lt;a href=&quot;https://www.google.com/maps/place/AlleyNYC/@40.75313,-73.989527,17z/data=!3m1!4b1!4m2!3m1!1s0x89c2511bf60bc5a9:0xb3062668f38c06a6&quot; target=&quot;_blank&quot;&gt;AlleyNYC&lt;/a&gt;, right under Times Square and to the west of Bryant Park.
&lt;/p&gt;

&lt;p&gt;
  In my opinion, it was &lt;em&gt;excellent&lt;/em&gt; marketing for the space.
&lt;/p&gt;

&lt;p&gt;
  Turns out AlleyNYC also hosts weekend hackathons and other meetups that require eventbrite ticket purchases to attend, but &lt;em&gt;generally&lt;/em&gt; on Sunday afternoons, the space is wide open for anyone to bring their laptop over to hack and chat.
&lt;/p&gt;

&lt;p&gt;
  A quiet late Sunday afternoon:
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/04/photo-2-1.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-627&quot; alt=&quot;Alley NYC - coworking view&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/04/photo-2-1.jpg&quot; width=&quot;640&quot; height=&quot;480&quot; /&gt;&lt;/a&gt;&lt;br /&gt; Perks of being on the 17th floor in midtown Manhattan: the sunlight from the setting sun continues to stream through!
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/04/photo-1-3.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-626&quot; alt=&quot;Alley NYC window view&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2014/04/photo-1-3.jpg&quot; width=&quot;640&quot; height=&quot;480&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  When I have the opportunity to go, I&amp;#8217;ve tended to meet a lot of cool people here, and exchanged much knowledge and tips. The audience tends to be a wide mix of beginners learning to code, startup entrepreneurs working on their apps, and seasoned developers who go to be social and to help others.
&lt;/p&gt;

&lt;p&gt;
  Sharing economy, indeed.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/well-played-alleynyc/</link>
                <guid>http://username.github.io/well-played-alleynyc</guid>
                <pubDate>2014-04-10T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Feeling like an idiot&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Last week, I helped a co-worker debug their jQuery. This weekend, I helped a stranger at a tech office hours meetup debug their R commands on a windows machine. Both times, I received incredible gratitude, and I felt proud of myself &amp;#8212; in part for being a good google searcher of windows machine problems, and in part because I knew I&amp;#8217;d improved my javascript skills since the very beginning.
&lt;/p&gt;

&lt;p&gt;
  Then there are the dark times.
&lt;/p&gt;

&lt;p&gt;
  Have you ever taken a class, and simply *not* grasped the problem sets easily, no matter how hard you tried? I&amp;#8217;ve felt this way, previously, with physics and with multivariable calculus. On Exam Day you&amp;#8217;re slightly panicking, because you know you&amp;#8217;re going to stumble upon a couple of problems that you&amp;#8217;ll only have enough time to solve half-way, or worse &amp;#8212; not solve at all.
&lt;/p&gt;

&lt;p&gt;
  In the past, I&amp;#8217;ve almost always emerged out of my darkest moments of self-doubt thinking &amp;#8220;aha! Can&amp;#8217;t believe I was an idiot and missed those two brackets!&amp;#8221; or &amp;#8220;aha! My eyes were just opened by the fact that you can&amp;#8217;t apply a width to an inline element and GAH, I cannot believe I missed that&amp;#8221; or even &amp;#8220;aha! That&amp;#8230; sort of makes sense, but maybe it&amp;#8217;ll make even more sense after more practice.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
  The idea that &amp;#8212; as an aspiring engineer &amp;#8212; my job security relies on my ability to output software (and consistently learn new ways of creating software) is sobering, but the struggle is often outweighed by the joy of the moment when something &lt;em&gt;works&lt;/em&gt;. And like a proud writer who knows the words fit perfectly (at least until several months down the line when you realize you want to refactor), you bask in the accomplishment, and look for the next challenge. &lt;em&gt;&lt;br /&gt; &lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;
  Yes, ours is a meritocracy, but it is also a sharing economy &amp;#8212; and I think the &amp;#8220;sharing&amp;#8221; part is the key to motivating aspiring software engineers. Some of my most despairing moments have been turned around by brilliant co-workers who haven&amp;#8217;t hesitated to share some knowledge that helped me become less confused or helped me troubleshoot an issue. It&amp;#8217;s the kindness of co-workers and acquaintances and even &lt;em&gt;strangers&lt;/em&gt;, I think, that really makes the open-source tech community click.
&lt;/p&gt;

&lt;p&gt;
  Some of us are slower at math, and some of us are quicker at math, but web development at least judges all the product outputs somewhat equally, even if one website looks better than the other (but that&amp;#8217;s a design thing, not a programming thing.) And &amp;#8212; assuming a similar range of intelligence &amp;#8212; the ones who are slower at math have the opportunity to become quicker at math, too, through simple perseverance and questioning and practice.
&lt;/p&gt;

&lt;p&gt;
  I know I&amp;#8217;m going to be struggling a lot more, still feel like an idiot maybe 60% of the time, and continue to self-consciously ask some smart developers a lot of hopefully non-silly questions. But hopefully I&amp;#8217;ll also be able to look back, and start passing some of my knowledge along, and feel like an idiot only on some things.
&lt;/p&gt;

&lt;p&gt;
  Tech is quite a big world, after all. So many things. So much to learn.
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/feeling-like-an-idiot/</link>
                <guid>http://username.github.io/feeling-like-an-idiot</guid>
                <pubDate>2014-04-08T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Be a Creator, not a Consumer (also: some advice about choosing what to study in college)&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  As much as I love meeting and talking with tech-y people (and sometimes talking tech with unfortunate non-techie friends and family, heh), I sometimes check myself re: whether I&amp;#8217;m spending too much time talking the talk and not walking the walk.
&lt;/p&gt;

&lt;p&gt;
  That is, am I just spouting off on different technologies I might&amp;#8217;ve heard about/learned about/used quite briefly, or have I &lt;em&gt;truly&lt;/em&gt; done a lot of work on that technology &amp;#8212; enough to show something off?
&lt;/p&gt;

&lt;p&gt;
  I see parallels in other places too, regardless of industry. For example, compared to studying engineering or business or being &amp;#8220;pre-med&amp;#8221;, those who &amp;#8220;major in English&amp;#8221; have suffered their fair share of deriders who think that a humanities concentration is less valued in the job market. And yet, some of the most celebrated young people I know &lt;em&gt;have &lt;/em&gt;been English majors (or at least non-STEM majors) &amp;#8212; and have &lt;a href=&quot;http://www.huffingtonpost.com/2012/05/31/marina-keegan-yale-studen_n_1560244.html&quot; target=&quot;_blank&quot;&gt;written strong, inspiring words&lt;/a&gt; &amp;#8212; or &lt;a href=&quot;https://www.youtube.com/watch?v=FSQQK2Vuf9Q&quot; target=&quot;_blank&quot;&gt;given strong, inspiring speeches&lt;/a&gt; &amp;#8212; or created &lt;a href=&quot;https://www.youtube.com/user/Vihart&quot; target=&quot;_blank&quot;&gt;passionate drawings on Youtube&lt;/a&gt;. I&amp;#8217;m not sure what value each of them put on the classes they took or the degrees on their diplomas, but what I do know is that each of them would not have found the success they currently have if they had not sought to publish their thoughts and creations.
&lt;/p&gt;

&lt;p&gt;
  I suppose what I&amp;#8217;m trying to say is that it doesn&amp;#8217;t matter what you majored in in college as long as you were passionate enough about something to &lt;strong&gt;create something&lt;/strong&gt;&lt;strong&gt; and make an impact&lt;/strong&gt;.
&lt;/p&gt;

&lt;p&gt;
  I remember a job interview I had, once, during my senior year of college. &lt;em&gt;What was the outcome?&lt;/em&gt; the interviewer asked. He might as well have been asking, &lt;em&gt;How many people did you influence? How many people cared?&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;
  &amp;#8230; Yes, I realize that in business, traffic value is influenced in some measure by Eyeball Faith &amp;#8212; the faith that eyeball numbers can magically convert into dollars. It&amp;#8217;s why SuperBowl ads are so expensive to purchase, companies with millions of users have sold for billions of dollars despite not being in the clear outside of VC funding, and why YouTube videos gone &amp;#8220;viral&amp;#8221; have launched the careers of many a pop musician/actor/director/author/figure. For better or worse, our creations are always subject to the vagaries of shareability and public traffic.
&lt;/p&gt;

&lt;p&gt;
  But let&amp;#8217;s ignore traffic for now, and just consider this idea: it&amp;#8217;s *way* more satisfying being the creator of a TV show than spending all your days only consuming your peers&amp;#8217; competing TV shows.
&lt;/p&gt;

&lt;p&gt;
  It&amp;#8217;ll take work, but hey &amp;#8212; that film/arts/English/tech concentration you&amp;#8217;re so passionate about? Probably worth more than a 2.7 average GPA in a subject you&amp;#8217;re terrible at, as long as you&amp;#8217;ve created something to show for it at the end.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/be-a-creator-not-a-consumer-also-some-advice-about-college-majors/</link>
                <guid>http://username.github.io/be-a-creator-not-a-consumer-also-some-advice-about-college-majors</guid>
                <pubDate>2014-04-07T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Javascript vs. Python: Simple Naming Differences&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I stumbled upon this 7-minute video about objects in Javascript on YouTube:
&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;

&lt;p&gt;
  While watching it, I realized how funny it was that similar-looking data types were called different things in different programming languages.
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;example = &amp;#91;1, 2, 3, 4&amp;#93;&lt;/pre&gt;

&lt;p&gt;
  In Javascript, this is called an array. In Python, it&amp;#8217;s called a list.
&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;example = {
&amp;#39;protagonist&amp;#39;: &amp;#39;Harry Potter&amp;#39;,
&amp;#39;nemesis&amp;#39;: &amp;#39;Voldemort&amp;#39;,
&amp;#39;antagonist&amp;#39;: &amp;#39;Draco Malfoy&amp;#39;
}&lt;/pre&gt;

&lt;p&gt;
  In Javascript, this is called an object. In Python, this is called a dictionary.
&lt;/p&gt;

&lt;p&gt;
  If you&amp;#8217;re switching from either language for the first time, don&amp;#8217;t get tripped up!
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/javascript-vs-python-simple-naming-differences/</link>
                <guid>http://username.github.io/javascript-vs-python-simple-naming-differences</guid>
                <pubDate>2014-04-05T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Learning Python the Hard Way&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  &amp;#8230; and I say &amp;#8220;the hard way&amp;#8221; because I suddenly need to know it for &lt;em&gt;work&lt;/em&gt; work.
&lt;/p&gt;

&lt;p&gt;
  I think the last time I went through Zed Shaw&amp;#8217;s &lt;a href=&quot;http://learnpythonthehardway.org/&quot; target=&quot;_blank&quot;&gt;Learn Python the Hard Way&lt;/a&gt; I stopped around exercise 15 or 16. At that time, I had no real incentive to learn Python other than for personal interest, though. This time the need is real!
&lt;/p&gt;

&lt;p&gt;
  Bring it on. :-)
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/learning-python-the-hard-way/</link>
                <guid>http://username.github.io/learning-python-the-hard-way</guid>
                <pubDate>2014-02-13T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Neat, short (20 minute) introduction to AngularJS + Firebase&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  This is a pretty cool presentation demo-ing AngularJS + Firebase, an API to store and sync data in real-time. The presenter creates an asynchronous commenting web app (think: youtube comments that refresh by themselves!) using only a couple lines of javascript.
&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;

&lt;p&gt;
  I first heard about Firebase this weekend when I saw a javascript developer get up a NodeJS real-time chat web app within a couple of hours. Glad I heard about it then; else I wouldn&amp;#8217;t have clicked on the link in my twitter feed to this video.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/angularjs-firebase/</link>
                <guid>http://username.github.io/angularjs-firebase</guid>
                <pubDate>2014-02-12T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Yes, Coding Can Be Fun&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  A friend, who once took a computer science class in college (but did not particularly like it), asked me how a hackathon over the weekend went. However, he said it in a way that suggested that it must&amp;#8217;ve been terribly boring, as if we just stared at our computer screens all weekend. &lt;em&gt;And you do this for fun?&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;
  Well.. yes, yes, I do. But I think there are a couple of misunderstandings here.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Misunderstanding #1: We Stare At Our Computer Screens All Day&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  Hackathons and coding-oriented tech meetups like &lt;a href=&quot;http://www.meetup.com/hackerhours/&quot;&gt;Hacker Hours&lt;/a&gt; or &lt;a href=&quot;http://www.meetup.com/Ladies-Who-Code/events/168492592/&quot;&gt;Hack the Night Away&lt;/a&gt; are social events by nature, and I&amp;#8217;ve had some of the best times talking shop with other developers, exchanging learning resources, exchanging live on-screen technical help, reflecting on the industry, and generally feeling productive in a relaxed way.
&lt;/p&gt;

&lt;p&gt;
  I took some social entrepreneurship classes in college, and I remember sitting around with my teammates pitching ideas and writing business plans. But at hackathons? We&amp;#8217;re also talking to each other and pitching ideas, but then we&amp;#8217;re working together to &lt;em&gt;implement&lt;/em&gt; those ideas. The result isn&amp;#8217;t a 25-page paper few people will read, but an actual prototype that took a lot teamwork and the sum of our respective design and development skills. &lt;em&gt;Much&lt;/em&gt; more fun.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Misunderstanding #2: Web Development Is Computer Science&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  I admit that I&amp;#8217;ve never taken a computer science class in an official academic setting, though I have heard horror stories from former classmates about how computer science has been either exceedingly difficult or how their problem sets have been painful to debug. CS seems like one of those subjects that one either hates or loves upon studying it for the first time.
&lt;/p&gt;

&lt;p&gt;
  To those who find computer science frustrating: I am happy to report that computer science is *not* web development! To be sure, knowing how to program is important in order to have any level of competence as a web developer, but there are quite a few components &amp;#8212; such as UX design, Photoshop skills, CSS (for styling), SQL, Javascript (growing ever more popular as the main programming language of the browser) &amp;#8212; that aren&amp;#8217;t taught in traditional computer science courses at all.
&lt;/p&gt;

&lt;p&gt;
  In my opinion, web development is also more fun because I get to showcase my work in a URL to curious inquirers any day. But that&amp;#8217;s just me.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/yes-coding-can-be-fun/</link>
                <guid>http://username.github.io/yes-coding-can-be-fun</guid>
                <pubDate>2014-02-10T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;W3 Validator is a lifesaver&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  W3 Validator &amp;#8212; &lt;a href=&quot;http://validator.w3.org/&quot; target=&quot;_blank&quot;&gt;http://validator.w3.org/&lt;/a&gt; &amp;#8212; has been a lifesaver on a few separate occasions for me within the past year. It&amp;#8217;s been particularly helpful when:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    I had no idea why my layout suddenly looked horrible in older versions of IE. (Hint: missing divs obfuscated by the server-side code!)
  &lt;/li&gt;
  &lt;li&gt;
    Links &amp;#8212; yet again in older versions of IE &amp;#8212; suddenly stopped working. (Hint: wrapping &lt;a&gt; tags around &lt;button&gt; elements is actually not valid.)
  


&lt;p&gt;
  &amp;#8230; so yeah, I now make it a habit of running my code through the validator just in case I missed something. Markup issues seem so easy to fix on the surface, but the validator can help a lot when you have a *lot* of nested tags.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Process note: &lt;/strong&gt;The default page on the validator shows you an input box where you need to put in a URL, but you can  also validate your code via file upload or &amp;#8220;direct input&amp;#8221;. That is, if your markup isn&amp;#8217;t being hosted at a public URL, you can simply view:source and copy/paste your code into the text box that appears under the &amp;#8220;direct input&amp;#8221; tab.
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;/button&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
                <link>http://username.github.io/w3-validator-is-a-lifesaver/</link>
                <guid>http://username.github.io/w3-validator-is-a-lifesaver</guid>
                <pubDate>2014-02-02T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;The Biggest Mistake You Can Make While Learning How To Code&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  It&amp;#8217;s a nice a time to learn web development nowadays. The number of resources available is incredible &amp;#8212; codecademy, udacity, coursera, codeschool, treehouse, MIT EdX.
&lt;/p&gt;

&lt;p&gt;
  The biggest mistake you can make is to give up soon.
&lt;/p&gt;

&lt;p&gt;
  When I started learning, I didn&amp;#8217;t realize how a lot of &amp;#8220;coding&amp;#8221; was actually a lot of debugging. It&amp;#8217;s a constant up-and-down struggle of solving problems. But most problems are solvable, and it just takes patience and a lot of persistence to keep going.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/the-biggest-mistake-you-can-make-while-learning-how-to-code/</link>
                <guid>http://username.github.io/the-biggest-mistake-you-can-make-while-learning-how-to-code</guid>
                <pubDate>2014-01-01T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Some Thoughts on Human Invention&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I just caught the tail end of &lt;a href=&quot;http://www.pbs.org/wgbh/nova/tech/ground-supertower.html&quot;&gt;Ground Zero Supertower&lt;/a&gt;, a NOVA documentary that aired on 9/11/2013, and am quite amazed by the level of money, effort, dangerous + heavy machinery, and risks that thousands poured into building the new skyscraper, memorial and museum. With the transport and mechanical costs (think: mixtures fried in 3000 fahrenheit temperatures to create heavy glass, then transported a few thousand miles away) needed to create the monuments, I&amp;#8217;m reminded by how hardcore engineering seems so much more *difficult* than software engineering.
&lt;/p&gt;

&lt;p&gt;
  Human invention (including the cameras and editing techniques and software that led to the production of the well-shot documentary I watched) is amazing&amp;#8230; yes, we are still so easily susceptible to car accidents and fires and bullets, &lt;strong&gt;but let&amp;#8217;s never forget the power that people have built &lt;/strong&gt;by taking the pieces of collective accumulated knowledge and working together**.
&lt;/p&gt;

&lt;p&gt;
  **Also why I love hackathons, but that&amp;#8217;s another story.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/some-thoughts-on-human-invention/</link>
                <guid>http://username.github.io/some-thoughts-on-human-invention</guid>
                <pubDate>2013-09-12T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Calling myself a front-end web developer&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  This time last year, I was hesitant to call myself a front-end developer. What&amp;#8217;s changed?
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    Using the terminal and using version control (github or SVN) doesn&amp;#8217;t scare me.
  &lt;/li&gt;
  &lt;li&gt;
    I don&amp;#8217;t get stuck on basic jQuery errors (update: and I can help co-workers with jQuery problems!).
  &lt;/li&gt;
  &lt;li&gt;
    I understand when to use if/else statements and for loops better.
  &lt;/li&gt;
  &lt;li&gt;
    I know how to organize my html/css/javascript files and preview a website in my local browser.
  &lt;/li&gt;
  &lt;li&gt;
    I use stackoverflow.
  &lt;/li&gt;
  &lt;li&gt;
    I know how to FTP my files to a server, and how to push small projects to Heroku.
  &lt;/li&gt;
  &lt;li&gt;
    I use the W3 validator and JSlint to validate my html and javascript.
  &lt;/li&gt;
  &lt;li&gt;
    I use LESS and Twitter Bootstrap.
  &lt;/li&gt;
  &lt;li&gt;
    I&amp;#8217;ve been to six hackathons, and made friends working in tech
  &lt;/li&gt;
  &lt;li&gt;
    I&amp;#8217;ve realized that compared to some folks I&amp;#8217;ve met with actual CS degrees, I&amp;#8217;m pretty good at CSS
  &lt;/li&gt;
  &lt;li&gt;
    I&amp;#8217;ve had a lot of practice applying responsive design on almost all of my projects.
  &lt;/li&gt;
  &lt;li&gt;
    I got over my confusion about how to use APIs at all, and used the Google Maps API, Tumblr API, and Flickr APIs on some projects for the first time.
  &lt;/li&gt;
  &lt;li&gt;
    I&amp;#8217;ve become a lot better at debugging problems, and knowing when to ask for help
  &lt;/li&gt;
  &lt;li&gt;
    Learning new frameworks or languages has become easier because of the knowledge foundation I&amp;#8217;ve built so far.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  That said, there&amp;#8217;s still a lot more to learn. AngularJS looks formidable. Writing complicated SQL still scares me. I&amp;#8217;ve never had to create tables in production before. I haven&amp;#8217;t looked into noSQL (mongoDB, etc.) much. I haven&amp;#8217;t looked at CS50x, Harvard&amp;#8217;s free intro to CS course. I suspect I need more practice writing modular javascript. I know just enough to apply front-end changes to a Ruby on Rails app, but I haven&amp;#8217;t taken the leap to really understanding Rails.
&lt;/p&gt;

&lt;p&gt;
  To be honest, I&amp;#8217;m pretty curious about what this entry will look next year. As long as I continue to enjoy learning web development (and blogging about it), there&amp;#8217;s hope yet, I think.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/calling-myself-a-front-end-web-developer/</link>
                <guid>http://username.github.io/calling-myself-a-front-end-web-developer</guid>
                <pubDate>2013-09-06T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Never going back after git&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;UPDATE: In March 2014, I attended an official git training by &lt;a href=&quot;https://twitter.com/peterbell&quot; target=&quot;_blank&quot;&gt;@PeterBell&lt;/a&gt;, hosted at Gilt! Here are my more comprehensive notes from the training: &lt;a href=&quot;https://github.com/lpatmo/git-training-notes&quot; target=&quot;_blank&quot;&gt;https://github.com/lpatmo/git-training-notes&lt;/a&gt;&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  Git was a bit confusing when I first started exploring it, coming from using Subversion for version control. I was used to having everything I committed go &lt;em&gt;live&lt;/em&gt;, and the idea that everything I committed would go to some virtual staging area on my computer &lt;em&gt;but not on my github account&lt;/em&gt; did not immediately click until&amp;#8230; well, it clicked.
&lt;/p&gt;

&lt;p&gt;
  And after that, everything was fine.
&lt;/p&gt;

&lt;p&gt;
  (As I heard a tech conference co-attendee explain to a github beginner once, the value in not having every single thing you commit automatically be seen live by your co-workers is that it gives you room to make mistakes. You can think of a &amp;#8220;commit&amp;#8221; as a documented &amp;#8220;save&amp;#8221;/snapshot of your code. But git lets you control which commits you push to your teammates, whereas subversion does not.)
&lt;/p&gt;

&lt;p&gt;
  &lt;span style=&quot;color: #000000;&quot;&gt;&lt;strong&gt;The typical commands I use when starting a new project with git:&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;strong style=&quot;font-size: 16px;&quot;&gt;mkdir &lt;/strong&gt;// Creates a directory
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;git init&lt;/strong&gt; // I type this after I cd into the directory to initialize the git directory
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;[Create a repository on github.com]&lt;/strong&gt; // All it takes is a click of a button &amp;#8212; but this, confusingly, has to be done manually
  &lt;/li&gt;
  &lt;li&gt;
    &lt;span style=&quot;color: #000000;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;&lt;strong&gt;[Copy/paste the two commands output in the &amp;#8220;repository created&amp;#8221; page into my terminal] &lt;/strong&gt;// The first set of instructions does some extra stuff that I don&amp;#8217;t need if I already initialized the repository using git init, I believe. //&lt;/span&gt;&lt;/span&gt; &lt;pre&gt;&lt;code&gt;git remote add origin https://github.com/&amp;lt;strong&amp;gt;username&amp;lt;/strong&amp;gt;/&amp;lt;strong&amp;gt;repository-name&amp;lt;/strong&amp;gt;.git &lt;/code&gt;&lt;/pre&gt;
    
    &lt;pre&gt;&lt;code&gt;git push -u origin master&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  
  &lt;li&gt;
    &lt;strong&gt;touch index.html&lt;/strong&gt; // This creates a file called index.html in my current directory
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;pwd&lt;/strong&gt; // Optional command that tells me where I am
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;ls // &lt;/strong&gt;This command lists the files that are in the directory. Index.html should be in here now.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;subl .&lt;/strong&gt; // This command is configured using the sublime text editor, and opens up all the files in the directory in sublime.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;git add index.html &lt;/strong&gt;//Adds the file so that it can be committed
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;git commit index.html -m &amp;#8220;first commit&amp;#8221;&lt;/strong&gt; //My first commit! If I have a couple of files ready to be committed, I can optionally type git commit . -m &amp;#8220;first commit&amp;#8221;. Be sure that you don&amp;#8217;t forget the &amp;#8220;-m&amp;#8221; or the comment that you must type to explain the change you are documenting.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;git status&lt;/strong&gt; //Tells me what files I&amp;#8217;ve changed by editing and saving in the editor, and which need to be &lt;em&gt;added&lt;/em&gt; or &lt;em&gt;committed&lt;/em&gt;. I&amp;#8217;ll type this often to figure out which files I&amp;#8217;ve changed by saving in the text editor.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;git log &lt;/strong&gt;//Tells me what my most recent commits were. Note that if I push my changes up to github.com, I&amp;#8217;ll also be able to see my commit change logs there in a nicely visually highlighted way (green = additions; red = deletions).
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;git push &lt;/strong&gt;//Pushes up my committed files to my github.com account when I&amp;#8217;m satisfied with my commits. I&amp;#8217;ll do this in bursts.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;git pull&lt;/strong&gt; // I update my local files with the commits that my teammates pushed up to the shared repository. I&amp;#8217;ll do this before I start the day, and throughout the day.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  &lt;span style=&quot;color: #000000;&quot;&gt;&lt;strong&gt;Bug tracking ease&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  OH! Did I mention github&amp;#8217;s issues/bug tracker and milestone counters? When I make a commit that resolves an issue number, I can write &amp;#8220;&lt;strong&gt;resolves #87&lt;/strong&gt;&amp;#8221; in the commit message, and &lt;em&gt;it&amp;#8217;ll automatically close issue #87 within the repository&lt;/em&gt;. I found it amusing that at one point, I was using trello (a project management platform) with some hackathon friends to organize our bugs. We totally could have used github!
&lt;/p&gt;

&lt;p&gt;
  &lt;span style=&quot;color: #000000;&quot;&gt;&lt;strong&gt;Yes, to be sure&amp;#8230;&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  Of course, merge issues often come up, and your terminal might spit back frustrating messages such as &amp;#8220;You do not have permission&amp;#8230;&amp;#8221; or &amp;#8220;Merge conflict in FILEPATH.&amp;#8221; I&amp;#8217;ll discuss a few of the most common error messages I&amp;#8217;ve encountered in another post.
&lt;/p&gt;

&lt;p&gt;
  But anyway&amp;#8230; Version control FTW. I am glad I won&amp;#8217;t be going back to drag-and-drop FTP anytime soon.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/never-going-back-after-git/</link>
                <guid>http://username.github.io/never-going-back-after-git</guid>
                <pubDate>2013-06-27T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Reflections on Write-Speak-Code NYC &amp;#8211; June 20th-22nd 2013&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I landed at Write-Speak-Code just a couple of weeks after AdaCamp, and boy, it did not disappoint. The group was slightly smaller than AdaCamp&amp;#8217;s and more training-focused. I had to miss the second day (Speak day!) to go to my brother&amp;#8217;s high school graduation, but to make up for it, I took a lot of notes on Days One and Three.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Highlights of the conference:&lt;/strong&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    The &lt;a href=&quot;http://www.theopedproject.org/&quot;&gt;Op-Ed Project&amp;#8217;s&lt;/a&gt; training that encouraged participants to write and submit newspaper op-eds
  &lt;/li&gt;
  &lt;li&gt;
    Pondering on what makes a person a &amp;#8220;resource&amp;#8221; vs. an &amp;#8220;expert.&amp;#8221; Wait &amp;#8212; although many women are hesitant to call themselves experts, they may be one and the same! I particularly liked the idea about how &amp;#8220;keeping your knowledge to yourself &amp;#8212; no matter how &amp;#8220;unexpert&amp;#8221; you are &amp;#8212; can be selfishness.&amp;#8221;
  &lt;/li&gt;
  &lt;li&gt;
    Learning about the different types of licenses &amp;#8212; FreeBSD vs. MIT License vs. GNU vs. CopyLeft, etc.
  &lt;/li&gt;
  &lt;li&gt;
    Resources for finding open-source projects: &lt;a href=&quot;http://bit.ly/FindingOSSProjects&quot;&gt;http://bit.ly/FindingOSSProjects&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    Learning about SQL injection, password storage, and Cross Site Scripting (XSS) from a security expert
  &lt;/li&gt;
  &lt;li&gt;
    Hearing from many amazing women personally about their open source contributors, technology book deals, and conference speaking activities
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  My full notes are on my github account: &lt;a href=&quot;https://github.com/lpatmo/writespeakcode-linda&quot; target=&quot;_blank&quot;&gt;https://github.com/lpatmo/writespeakcode-linda&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;span style=&quot;font-size: 16px;&quot;&gt; &lt;/span&gt;
&lt;/h2&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/reflections-on-write-speak-code-nyc-june-20th-22nd-2013/</link>
                <guid>http://username.github.io/reflections-on-write-speak-code-nyc-june-20th-22nd-2013</guid>
                <pubDate>2013-06-24T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Using the &amp;#8220;not&amp;#8221; selector in jQuery&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Was trying to figure out how to select every &lt;li&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt; item in a row except the one with a class of &amp;#8220;active.&amp;#8221; As always, &lt;/span&gt;&lt;a style=&quot;font-size: 16px;&quot; href=&quot;http://stackoverflow.com/questions/520250/jquery-if-div-doesnt-have-class-x&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt; reminded me that jQuery came with &amp;#8220;:not.&amp;#8221;&lt;/span&gt;


&lt;p&gt;
  &lt;span style=&quot;font-size: 16px;&quot;&gt;Example:&lt;/span&gt;
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    $(&amp;#8220;li:not(.active)&amp;#8221;).hover();
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/using-the-not-selector-in-jquery/</link>
                <guid>http://username.github.io/using-the-not-selector-in-jquery</guid>
                <pubDate>2013-06-23T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;How to write a good bug report&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  What you need:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    a short, self contained, correct, example
  &lt;/li&gt;
  &lt;li&gt;
    steps to reproduce
  &lt;/li&gt;
  &lt;li&gt;
    input
  &lt;/li&gt;
  &lt;li&gt;
    expected output
  &lt;/li&gt;
  &lt;li&gt;
    actual output
  &lt;/li&gt;
  &lt;li&gt;
    software and operating system versions
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  Note: This applies to questions posted on &lt;a href=&quot;http://stackoverflow.com/&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt; too.
&lt;/p&gt;

&lt;p&gt;
  Just one of the many things we discussed at the &lt;a href=&quot;http://sf.adacamp.org/&quot; target=&quot;_blank&quot;&gt;Adacamp&lt;/a&gt; unconference.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/how-to-write-a-good-bug-report/</link>
                <guid>http://username.github.io/how-to-write-a-good-bug-report</guid>
                <pubDate>2013-06-23T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Front-end vs. Back-end&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Are some people more naturally suited to being front-end developers versus back-end developers, or vice versa?
&lt;/p&gt;

&lt;p&gt;
  My understanding of front-end development (which I love) is that it&amp;#8217;s useful to have a good understanding of the back-end technologies. I haven&amp;#8217;t done enough back-end work to discuss whether I like it or not&amp;#8230; but I&amp;#8217;ve talked to a couple of people by now who&amp;#8217;ve said that they&amp;#8217;re die-hard back-end developers who hate doing front-end work.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/front-end-vs-back-end/</link>
                <guid>http://username.github.io/front-end-vs-back-end</guid>
                <pubDate>2013-06-23T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Thank goodness I save all my bug solutions in e-mails&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://incident57.com/codekit/&quot;&gt;Codekit&lt;/a&gt; (software which web developers use for lots of cool things, but which I mainly use for compiling LESS) started acting up after a reboot of my computer recently, showing me an error starting with the following words:
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    Error: EACCES, permission denied &amp;#8216;[FILEPATH]&amp;#8217;&amp;#8230;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
  I remember googling around and landing upon &lt;a href=&quot;https://help.ubuntu.com/community/FilePermissions&quot;&gt;linux file permissions documentation&lt;/a&gt;, and eventually realizing that if I went into the root (&lt;strong&gt;sudo -s&lt;/strong&gt; &amp;#8212; a command I learned from a hackathon teammate just the week before, thanks A.!) and did &lt;strong&gt;chmod a+rw style.css&lt;/strong&gt;, the compilation error was magically solved.
&lt;/p&gt;

&lt;p&gt;
  Now, I am about 80% certain that my fix isn&amp;#8217;t a 100% true fix, but I am *so glad* I recorded the method I used to solve it in e-mail because&amp;#8230; yeah, the problem just popped up again. And I went crazy for a few minutes doing git revert and trying to figure out what went wrong (I was only editing a .less file!) before I realized that the codekit error looked kind of familiar, and&amp;#8230; hmm. Searching &amp;#8220;EACCES&amp;#8221; pulled up the solution I had documented in my own e-mail archives.
&lt;/p&gt;

&lt;p&gt;
  Moral to the story: document your bug fix methods (even if temporary), especially if the fixes are obscure.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/thank-goodness-i-save-all-my-bug-solutions-in-e-mails/</link>
                <guid>http://username.github.io/thank-goodness-i-save-all-my-bug-solutions-in-e-mails</guid>
                <pubDate>2013-06-21T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Notes from Seattle Tech HN Meetup &amp;#8212; Speaker: Justin Kan&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Justin Kan&lt;/strong&gt;, of justin.tv fame, stopped by the &lt;a href=&quot;http://www.zillow.com/&quot;&gt;Zillow offices&lt;/a&gt; to give a short presentation about the many ideas he and his co-founders entertained before they landed on the &amp;#8220;right&amp;#8221; product &amp;#8212; that is, something that had market value and market traction.
&lt;/p&gt;

&lt;p&gt;
  Justin gave a nod to the story of how &lt;a href=&quot;http://www.bullfax.com/?q=node-meet-ceo-who-lived-taco-bell-parking-lot-and-now-runs-c&quot;&gt;three entrepreneurs from Japan&lt;/a&gt; turned Mieple &amp;#8212; initially an online dating site &amp;#8212; into &lt;a href=&quot;https://anyperk.com/&quot;&gt;Anyperk&lt;/a&gt;, a service that provides employees with travel, entertainment, fitness, and telecom discounts.
&lt;/p&gt;

&lt;p&gt;
  And then he talked about the projects that he and his team personally pivoted on &amp;#8212; from Kieko (YC 2005), which turned into SocialCam, which turned into &lt;a href=&quot;http://www.justin.tv/&quot;&gt;justin.tv&lt;/a&gt;, which turned into &lt;a href=&quot;http://www.twitch.tv/&quot;&gt;Twitch&lt;/a&gt;, a video platform for gamers who want to watch other gamers in play. Now he&amp;#8217;s working on &lt;a href=&quot;https://iamexec.com/&quot;&gt;Exec&lt;/a&gt;, an online booking service that hires cleaners.
&lt;/p&gt;

&lt;p&gt;
  The summary of the presentation?
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Don&amp;#8217;t be afraid to pivot.&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2013/05/justinkan2.jpg&quot;&gt;&lt;img title=&quot;justinkan2&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2013/05/justinkan2.jpg&quot; alt=&quot;&quot; width=&quot;576&quot; height=&quot;432&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  I should probably mention that I had no idea Justin (just like &lt;a href=&quot;http://grist.org/list/macklemore-credits-seattles-park-system-with-launching-his-rap-career/#.UZePE1eoZs4.twitter&quot;&gt;Macklemore&lt;/a&gt;, I found out recently!) originally hailed from Seattle until I read the introductory text on the &lt;a href=&quot;http://www.meetup.com/HackerNewsSeattleMeetup/events/115959022/&quot;&gt;Hacker News meetup page&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  I also got the chance to meet a couple of cool people, including two freelancers, a Starbucks developer, and an Amazon developer. Half of them grew up in Seattle. Way to represent!
&lt;/p&gt;

&lt;p&gt;
  This meetup is just another plus that endears me to Seattle.
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2013/05/justinkan1.jpg&quot;&gt;&lt;img class=&quot;alignnone  wp-image-508&quot; title=&quot;justinkan1&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2013/05/justinkan1.jpg&quot; alt=&quot;&quot; width=&quot;576&quot; height=&quot;432&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;span style=&quot;color: #000000;&quot;&gt;&lt;strong&gt;Photo:&lt;/strong&gt; t&lt;/span&gt;he presentation slides, aptly titled &amp;#8220;Pivoting: Only for Newbs??&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/notes-from-seattle-tech-hn-meetup-speaker-justin-kan/</link>
                <guid>http://username.github.io/notes-from-seattle-tech-hn-meetup-speaker-justin-kan</guid>
                <pubDate>2013-05-19T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Finding text in a particular file using grep&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  My understanding of grep is pretty elementary. I&amp;#8217;ve recently found it useful for searching for texts contained in particular strings, though. For example:
&lt;/p&gt;

&lt;p&gt;
  &lt;code&gt;grep &quot;search term&quot; *&lt;/code&gt;&lt;br /&gt; &amp;#8211; searches for the words &amp;#8220;search term&amp;#8221; in all the files in the particular directory.
&lt;/p&gt;

&lt;p&gt;
  More here:&lt;br /&gt; &lt;a href=&quot;http://www.cyberciti.biz/faq/howto-search-find-file-for-text-string/&quot; target=&quot;_blank&quot;&gt;http://www.cyberciti.biz/faq/howto-search-find-file-for-text-string/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/finding-text-in-a-particular-file-using-grep/</link>
                <guid>http://username.github.io/finding-text-in-a-particular-file-using-grep</guid>
                <pubDate>2013-04-25T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Deploying to Heroku&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Chapter 1.4  of &lt;a href=&quot;http://ruby.railstutorial.org/&quot; target=&quot;_blank&quot;&gt;railstutorial.org&lt;/a&gt; taught me how to deploy a Rails app onto Heroku.
&lt;/p&gt;

&lt;p&gt;
  But how does one deploy a static app?
&lt;/p&gt;

&lt;p&gt;
  After some googling, I found &lt;a href=&quot;http://www.lemiffe.com/how-to-deploy-a-static-page-to-heroku-the-easy-way/&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; from lemiffe.com.
&lt;/p&gt;

&lt;p&gt;
  The standard index.html file would need to be renamed into something like home.html, and the index.php file would have to include&lt;br /&gt; &lt;code&gt;&amp;lt; ? php include_once(&quot;home.html&quot;); ? &amp;gt;.&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
  And then &amp;#8212; voila!
&lt;/p&gt;

&lt;p&gt;
  1. &lt;code&gt;cd&lt;/code&gt; into the directory&lt;br /&gt; 2. Make sure you &lt;code&gt;commit&lt;/code&gt; your files.&lt;br /&gt; 3. &lt;code&gt;heroku create&lt;/code&gt;&lt;br /&gt; 4. &lt;code&gt;git push heroku master&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
  The terminal will spit back to you a URL on herokuapps.com. Finally, if you want to rename it, just use the following command:
&lt;/p&gt;

&lt;p&gt;
  &lt;code&gt;heroku rename newname&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/deploying-to-heroku/</link>
                <guid>http://username.github.io/deploying-to-heroku</guid>
                <pubDate>2013-04-25T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Configuring the terminal to open Sublime Text files with the &amp;#8216;subl&amp;#8217; command&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I&amp;#8217;d noticed a couple of people typing in &amp;#8220;subl file/path&amp;#8221; in their terminal to open up a file after they cd&amp;#8217;ed into the folder, but much to my surprise, the &amp;#8220;subl&amp;#8221; command did not work for me. Turns out I had yet to install it!
&lt;/p&gt;

&lt;p&gt;
  Sounds easy, right?
&lt;/p&gt;

&lt;p&gt;
  I googled the instructions pretty easily (&lt;a href=&quot;http://www.sublimetext.com/docs/2/osx_command_line.html&quot; target=&quot;_blank&quot;&gt;http://www.sublimetext.com/docs/2/osx_command_line.html)&lt;/a&gt;, but predictably, like much of the things I have to install, the attempt failed &amp;#8212; I kept getting back an error that said &amp;#8220;bin/subl&amp;#8221; did not exist. Googled some more, and found &lt;a href=&quot;http://stackoverflow.com/questions/10660999/sublime-text-2-cant-create-symlink-to-subl-says-bin-subl-no-such-file-or-di&quot; target=&quot;_blank&quot;&gt;this stackoverflow post&lt;/a&gt; &amp;#8212; which contained an answer suggesting this solution:
&lt;/p&gt;

&lt;p&gt;
  ln -s &amp;#8220;/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl&amp;#8221; /usr/local/bin/subl
&lt;/p&gt;

&lt;p&gt;
  Another reminder to google the errors you encounter, I suppose &amp;#8212; especially when installing software.
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/configuring-the-terminal-to-open-sublime-text-files/</link>
                <guid>http://username.github.io/configuring-the-terminal-to-open-sublime-text-files</guid>
                <pubDate>2013-02-18T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Teaching a beginner Lessons 0 and 1 of Zed Shaw&amp;#8217;s Learn Python The Hard Way&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Walking J. (a complete beginner) through lessons 0 and 1 of &lt;a href=&quot;http://learnpythonthehardway.org/book/&quot;&gt;Learn Python The Hard Way&lt;/a&gt; by Zed Shaw, it occurred to me that LPTHW is probably best learned as a beginner when there&amp;#8217;s someone experienced to help you through the setup, and to answer the larger-picture questions of why you are doing what you are doing.
&lt;/p&gt;

&lt;p&gt;
  J. uses a PC, is fairly computer literate (he knows general keyboard shortcuts and how to create/delete files and folders), and had actually taken AP Computer Science in high school &amp;#8212; so had some familiarity with Java. But the questions he asked me made me realize how discouraging it can be to try to run through LPTHW when you have no idea about how to set up the development environment, and why the dev environment is set up the way it is.
&lt;/p&gt;

&lt;p&gt;
  Some issues that we encountered:
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;1) Python wouldn&amp;#8217;t download.&lt;/strong&gt; Ha. He had Python already installed, or so he thought &amp;#8212; but then it turned out that he had Python 3 installed of Python 2 (if you read Zed Shaw&amp;#8217;s directions carefully, Python 2 was necessary)&amp;#8230; and &lt;em&gt;then &lt;/em&gt;for some reason it took a few minutes longer for his machine to recognize that Python 2 was actually installed. So we waited and waited before he was able to get a successful message upon typing &amp;#8220;python&amp;#8221; in the powershell.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;2) The powershell looks intimidating!&lt;/strong&gt; J. was running Windows 7, I believe &amp;#8212; and the powershell came out with this bright blue background. For non-programmers (I remember this too from before I started using the terminal every day), &lt;strong&gt;it looks intimidating as heck&lt;/strong&gt;. You don&amp;#8217;t want to type an accidental command that&amp;#8217;ll delete or destroy all your files.
&lt;/p&gt;

&lt;p&gt;
  I know, I know &amp;#8212; this fear seems absurd to those who are familiar with the command line. I had to convince him to trust me that A) I wouldn&amp;#8217;t make him type anything that would ruin his computer; B) that it was perfectly okay and normal to use the powershell all the time; all programmers do, especially when they&amp;#8217;re using version control, and that typing &amp;#8220;mkdir new-directory-name&amp;#8221; to create a folder was BETTER than going to the start menu and creating a new folder through the user interface.
&lt;/p&gt;

&lt;p&gt;
  Argh. This latter point was definitely something that needed convincing on. Luckily, once he learned the &amp;#8220;mkdir&amp;#8221; command along with the &amp;#8220;cd&amp;#8221; command, I think the uses of the powershell became clearer. And then I referred him to Zed Shaw&amp;#8217;s &lt;a href=&quot;http://cli.learncodethehardway.org/book/&quot; target=&quot;_blank&quot;&gt;Command Line Crash Course&lt;/a&gt; . :-P
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;3) Understanding how the text editor works in combination with the powershell&lt;/strong&gt;. Zed Shaw recommends Notepad++ for Windows users, which is perfectly fine, but I recommended Sublime Text to J. just for the heck of it (and maybe because Sublime is v. pretty). Anyway, from the start there was some slight confusing of Sublime Text &lt;em&gt;with&lt;/em&gt; the Powershell &amp;#8212; which made me realize that the clarity of Lesson 0 could have been improved with just a few screenshots. J., from his one high school CS course in the early 2000s, also expected that Sublime would act as a compiler &amp;#8212; which didn&amp;#8217;t happen, of course. I had to tell him to think of Sublime like a Microsoft Word document &amp;#8212; it&amp;#8217;s just the text editor. But you can run it in the command line with &amp;#8220;python filename.py&amp;#8221;, or even preview it in the browser if it&amp;#8217;s a .html file. But by itself, there&amp;#8217;s no built-in &amp;#8220;compile&amp;#8221; or &amp;#8220;preview&amp;#8221; tab.
&lt;/p&gt;

&lt;p&gt;
  Setup took longer than I&amp;#8217;d expected, but it was worth it in the end to see the spark of delight in someone&amp;#8217;s eyes, saving a file called ex01.py and running &amp;#8220;python ex01.py&amp;#8221; successfully in their powershell for the first time.
&lt;/p&gt;

&lt;p&gt;
  I told J. that he&amp;#8217;d probably be able to catch up with me pretty soon; I&amp;#8217;m only Lesson 11!
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/teaching-a-beginner-lessons-0-and-1-of-zed-shaws-learn-python-the-hard-way/</link>
                <guid>http://username.github.io/teaching-a-beginner-lessons-0-and-1-of-zed-shaws-learn-python-the-hard-way</guid>
                <pubDate>2013-02-16T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Someone once asked me&amp;#8230;&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Someone once asked me whether I had a startup bug. I don&amp;#8217;t think so; it&amp;#8217;s more that I have an &amp;#8220;I have so many ideas for cool things that great design + web interactivity can do to help bring people together in a shared marketplace&amp;#8221; bug, but I end up just spending most of the time frowning at my laptop because of a) code or installation bugs; or b) because I don&amp;#8217;t have version control or ssh set up for my personal projects yet. Argh. But that is changing pretty soon!
&lt;/p&gt;

&lt;p&gt;
  Update: Version control (git) set up now. Yay.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/someone-once-asked-me/</link>
                <guid>http://username.github.io/someone-once-asked-me</guid>
                <pubDate>2013-02-11T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Zed Shaw is amazing&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  A year ago, Zed Shaw&amp;#8217;s &lt;a href=&quot;http://learnpythonthehardway.org/&quot; target=&quot;_blank&quot;&gt;&amp;#8220;Learn Python The Hard Way&amp;#8221;&lt;/a&gt; was &lt;em&gt;the&lt;/em&gt; online resource I was hearing about from everyone. I never ended up trying it out, but I flipped back to it just now and was&amp;#8230; gratified, I suppose, to skim through the first few chapters and realize that everything was familiar, and setting up the development environment and working with the terminal did not so seem so challenging after all.
&lt;/p&gt;

&lt;p&gt;
  I then stumble upon Zed&amp;#8217;s &lt;a href=&quot;http://cli.learncodethehardway.org/book/&quot; target=&quot;_blank&quot;&gt;Command Line Crash Course&lt;/a&gt;. And realize that he also has a &lt;em&gt;SQL&lt;/em&gt; course which purports to &amp;#8220;teach you the 80% of SQL you probably need to use it effectively.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
  Gah, there really are too many online resources out there for learning web technology. All I can do is attempt to continue to chronicle my experiences.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/zed-shaw-is-amazing/</link>
                <guid>http://username.github.io/zed-shaw-is-amazing</guid>
                <pubDate>2013-01-19T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;A nice cheatsheet for creating graphics for social media&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  The infographic below is courtesy of &lt;a href=&quot; http://www.lunametrics.com/blog/2012/11/12/final-social-media-sizing-cheat-sheet/&quot; target=&quot;_blank&quot;&gt;LunaMetrics&lt;/a&gt;. I found it while googling for the dimensions of a typical Facebook wall photo.
&lt;/p&gt;

&lt;p&gt;
  &lt;img src=&quot;http://lunametrics.wpengine.netdna-cdn.com/wp-content/uploads/2012/11/The-Ultimate-Complete-Social-Media-Sizing-Cheat-Sheet1.png&quot; alt=&quot;Social media cheat sheet by LunaMetrics&quot; width=&quot;520&quot; /&gt;
&lt;/p&gt;

&lt;div&gt;
  Designed by &lt;a href=&quot;http://www.lunametrics.com/&quot;&gt;LunaMetrics&lt;/a&gt;.
&lt;/div&gt;

&lt;p&gt;
  
&lt;/p&gt;
</description>
                <link>http://username.github.io/a-nice-cheatsheet-for-finding-social-media-graphic-dimensions/</link>
                <guid>http://username.github.io/a-nice-cheatsheet-for-finding-social-media-graphic-dimensions</guid>
                <pubDate>2013-01-18T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;The Coding Diaries: Spring 2013 Resolutions&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  1. Use Github (see: version control) a lot more.
&lt;/p&gt;

&lt;p&gt;
  2. Develop a responsive WordPress theme, step by step, with the help of some WordPress theme development guides.
&lt;/p&gt;

&lt;p&gt;
  3. Update my personal site.
&lt;/p&gt;

&lt;p&gt;
  4. Become much more comfortable with Javascript.
&lt;/p&gt;

&lt;p&gt;
  5. Dip a toe into Rails by working on a Ruby project.
&lt;/p&gt;

&lt;p&gt;
  6. Finish Udacity&amp;#8217;s CS253 course by building a web blog using Google App Engine.
&lt;/p&gt;

&lt;p&gt;
  7. Play around with Tumblr/Google/Facebook APIs!
&lt;/p&gt;

&lt;p&gt;
  8. Read more books about interaction design.
&lt;/p&gt;

&lt;p&gt;
  9. Create an infographic using Photoshop.
&lt;/p&gt;

&lt;p&gt;
  10. Spend time with fellow learners, and attend even more tech events.
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/the-coding-diaries-spring-2013-resolutions/</link>
                <guid>http://username.github.io/the-coding-diaries-spring-2013-resolutions</guid>
                <pubDate>2013-01-01T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Chrome Developer Tools, where you have you been in my life?&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I remember the first time someone told me that I should be using Chrome Developer tools, or Firebug, or some variation thereof in the browser to help with my front-end coding.
&lt;/p&gt;

&lt;p&gt;
  I didn&amp;#8217;t get it.
&lt;/p&gt;

&lt;p&gt;
  Now I can&amp;#8217;t live without it! Because, you see, view:source is only helpful to a certain extent. When I&amp;#8217;m coding an HTML/CSS/Javascript template, and the jQuery isn&amp;#8217;t working, for example, I&amp;#8217;ll hit option-command-J, and it&amp;#8217;ll show me the exact line in the javascript file where the error is occurring. Click on &amp;#8220;Elements&amp;#8221; within Chrome Developer Tools, and I&amp;#8217;ll be able to see height and width dimensions for elements on the page.
&lt;/p&gt;

&lt;p&gt;
  Once upon a time, I remember feeling at a loss about the hex code of a background color of an element I was trying to replicate. Now, it&amp;#8217;s simple: open Chrome Developer Tools, perhaps click on the element with the inspector tool, and look at the CSS.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/chrome-developer-tools-where-you-have-you-been-in-my-life/</link>
                <guid>http://username.github.io/chrome-developer-tools-where-you-have-you-been-in-my-life</guid>
                <pubDate>2012-11-01T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Why I&amp;#8217;m Falling More And More In Love With Sublime Text&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Over the past week I&amp;#8217;ve discovered that not only can I copy the file path of my document by right-clicking and selecting &amp;#8220;copy file path&amp;#8221; in &amp;lt;a href=&amp;#8221;http://www.sublimetext.com/&amp;#8221; target=&amp;#8221;_blank&amp;#8221;&amp;gt;Sublime Text, the text editor also allows me to short-handedly insert a comment by typing command-/ on the mac.
&lt;/p&gt;

&lt;p&gt;
  In other words, instead of typing out &amp;lt;!&amp;#8211;comment&amp;#8211;&amp;gt; in HTML or /*Comment*/ in CSS, I&amp;#8217;d just have to press two keys!
&lt;/p&gt;

&lt;p&gt;
  And instead of trying to memorize file paths when I commit files, all I&amp;#8217;d have to do is right-click-copy!
&lt;/p&gt;

&lt;p&gt;
  Hurrah for small, seconds-saving victories.
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/why-im-falling-more-and-more-in-love-with-sublime-text/</link>
                <guid>http://username.github.io/why-im-falling-more-and-more-in-love-with-sublime-text</guid>
                <pubDate>2012-10-25T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Book Review: &amp;#8220;The CSS3 Anthology&amp;#8221; by Rachel Andrew (5 Stars)&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I flipped through this book in the same way that I flipped through the &lt;a href=&quot;http://www.thecodingdiaries.com/html-and-css-book/&quot; target=&quot;_blank&quot;&gt;HTML &amp;amp; CSS book&lt;/a&gt; I noted earlier &amp;#8212; that is, from cover to cover.
&lt;/p&gt;

&lt;p&gt;
  It. Is. Amazing. &lt;a href=&quot;http://www.amazon.com/CSS3-Anthology-Take-Sites-Heights/dp/0987153021&quot;&gt;&lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2013/04/css3anthology-cover.jpg&quot; alt=&quot;&quot; title=&quot;The CSS3 Anthology&quot; width=&quot;300&quot; height=&quot;300&quot; class=&quot;alignnone size-full wp-image-492&quot; target=&quot;_blank&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  I thought the book was unique in its organization style; section titles are comprised of &amp;#8220;How can I make this happen&amp;#8221; &lt;em&gt;questions&lt;/em&gt;, followed immediately by a summary of the solution, a code sample, and a discussion of the code.
&lt;/p&gt;

&lt;p&gt;
  For those more experienced with CSS/CSS3, just glancing at the CSS code sample is a good enough review; for those less experienced, the few paragraphs of discussion text are enlightening.
&lt;/p&gt;

&lt;p&gt;
  I was seriously pretty happy with this book; I felt like it answered all the questions I had when &amp;#8212; especially in the early days &amp;#8212; I had a lot of &amp;#8220;How do I do this with CSS?&amp;#8221; questions that I had to google to find the answers to.
&lt;/p&gt;

&lt;p&gt;
  Yes, yes, everyone learns by googling &amp;#8212; but this book is a pretty good compilation of the common questions that anyone who hasn&amp;#8217;t had a formal course in CSS(3) would have, and would probably save the beginner a lot of time.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/book-review-the-css3-anthology-by-rachel-andrew/</link>
                <guid>http://username.github.io/book-review-the-css3-anthology-by-rachel-andrew</guid>
                <pubDate>2012-10-25T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;First impressions of CodeSchool&amp;#8217;s jQuery: First Flight&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Codeschool is the author of &amp;lt;a href=&amp;#8221;http://tryruby.org&amp;#8221; target=&amp;#8221;_blank&amp;#8221;&amp;gt;Try Ruby and &amp;lt;a href=&amp;#8221;http://try.github.com&amp;#8221; target=&amp;#8221;_blank&amp;#8221;&amp;gt;Try Git. I just watched the first video in their &amp;lt;a href=&amp;#8221;http://www.codeschool.com/courses/jquery-air-first-flight&amp;#8221; target=&amp;#8221;_blank&amp;#8221;&amp;gt;jQuery: First Flight series, and attempted some of the follow-up exercises.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Verdict:&lt;/strong&gt; I&amp;#8217;m impressed! I like the polished look, the try-it-yourself exercises, the gamified set-up (you &amp;#8220;earn&amp;#8221; points for answering questions correctly and &amp;#8220;spend&amp;#8221; points on hints), and the fact that you can &amp;lt;a href=&amp;#8221;http://courseware.codeschool.com.s3.amazonaws.com/jquery_air_slides.pdf&amp;#8221; target=&amp;#8221;_blank&amp;#8221;&amp;gt;download the slides from each video for reference as you complete the exercises.
&lt;/p&gt;

&lt;p&gt;
  I&amp;#8217;m not certain yet whether I&amp;#8217;m up to paying the $25/month subscription fee for access to their other videos, though; maybe after I&amp;#8217;ve completed their three free series, I&amp;#8217;ll take a look at the other course offerings.
&lt;/p&gt;

&lt;p&gt;
  Bonus: I think they mighty&amp;#8217;ve gotten the pianist from &amp;lt;a href=&amp;#8221;http://www.mertonshow.com/about&amp;#8221; target=&amp;#8221;_blank&amp;#8221;&amp;gt;The Merton Show or something to front all of their introductory videos. The intro songs are all hilarious.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/first-impressions-of-codeschools-jquery-first-flight/</link>
                <guid>http://username.github.io/first-impressions-of-codeschools-jquery-first-flight</guid>
                <pubDate>2012-10-20T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;The light bulb moment for me&amp;#8230;&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  &amp;#8230; was when I finally realized that I could *preview* HTML/CSS/Javascript files in my browser by typing in some variation of&amp;#8230;
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    file:///Users/myname/Desktop/folder/folder/folder/index.html
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
  &amp;#8230;in a chrome or firefox browser.
&lt;/p&gt;

&lt;p&gt;
  There was a time, scarcely less than a year ago, when I had absolutely no idea what to do when an online tutorial gave me a button to download a file package. Now, I can&amp;#8217;t believe how &lt;em&gt;straightforward&lt;/em&gt; the idea of HTML, CSS, and Javascript files working in sync are.
&lt;/p&gt;

&lt;p&gt;
  &lt;em&gt;Essentially:&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;
  1) You start with the HTML file &amp;#8212; usually named index.html or some variation thereof. You can make sure it starts with a &amp;lt;!doctype html&amp;gt; (go HTML5!), has &lt;head&gt;&lt;/head&gt; tags where you put your &lt;title&gt;&lt;/title&gt; and &lt;meta /&gt; tags, has a &lt;body&gt;, and possibly some &lt;div&gt;&amp;#8217;s and &lt;p&gt; tags.
&lt;/p&gt;

&lt;p&gt;
  2) You create a CSS stylesheet (usually named style.css) and call it within the HTML document by writing &amp;lt;link href=&amp;#8221;style.css&amp;#8221; rel=&amp;#8221;stylesheet&amp;#8221; /&amp;gt; and putting it between the &lt;head&gt;&lt;/head&gt; tags in your HTML.
&lt;/p&gt;

&lt;p&gt;
  3) Similarly, you can call your Javascript file (conventionally named script.js) by putting &amp;lt;script src=&amp;#8221;script.js&amp;#8221;&amp;gt; in your HTML &amp;#8212; right before your  tag, so that the cool extra animation/behavioral effects you&amp;#8217;re loading doesn&amp;#8217;t interfere with your more essential content.
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;
&lt;/p&gt;
&lt;/div&gt;&lt;/body&gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/the-tipping-point-for-me/</link>
                <guid>http://username.github.io/the-tipping-point-for-me</guid>
                <pubDate>2012-10-07T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;&amp;#8216;Sublime&amp;#8217; (The Text Editor) Is Pretty&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  So. Here&amp;#8217;s my history with text editors:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    I started with notepad++ on a PC. It was all right; I really enjoyed the ability to &amp;#8220;run&amp;#8221; my code in a web browser by clicking from the menu. This was before I understood much about file paths, and how it&amp;#8217;s possible to view .html files without going through that user interface step.
  &lt;/li&gt;
  &lt;li&gt;
    I tried out &lt;a href=&quot;http://www.panic.com/coda&quot; target=&quot;_blank&quot;&gt;Coda&lt;/a&gt;, but I didn&amp;#8217;t really like its &amp;#8220;preview&amp;#8221; feature. It also cost $79, so I eventually settled on a free editor called &lt;a href=&quot;http://www.aptana.com&quot; target=&quot;_blank&quot;&gt;Aptana&lt;/a&gt;.
  &lt;/li&gt;
  &lt;li&gt;
    At the urging of an instructor at &lt;a href=&quot;http://generalassemb.ly&quot; target=&quot;_blank&quot;&gt;General Assembly&lt;/a&gt;, I installed &lt;a href=&quot;http://www.sublimetext.com/2&quot; target=&quot;_blank&quot;&gt;Sublime&lt;/a&gt;. I&amp;#8217;ll occasionally get alerts requesting me to consider purchasing a license, but I love it so far! It&amp;#8217;s #1: pretty; and #2: works well with the command-o and drag-drop-file-into-text-editor shortcuts (unlike Aptana); and #3: can open up to 2 or 3 file columns.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  &lt;em&gt;Screenshot below:&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2012/10/Screen-shot-2012-10-07-at-1.46.41-AM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-399&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2012/10/Screen-shot-2012-10-07-at-1.46.41-AM.png&quot; alt=&quot;Screenshot of Sublime Text Editor&quot; width=&quot;600&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Of course, two months later, I might very well be blogging about how much I love &lt;a href=&quot;http://netbeans.org/&quot; target=&quot;_blank&quot;&gt;NetBeans&lt;/a&gt;&amp;#8230;. *grin*
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/sublime-the-text-editor-is-pretty/</link>
                <guid>http://username.github.io/sublime-the-text-editor-is-pretty</guid>
                <pubDate>2012-10-07T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;How I Converted To Mac From PC&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I was a windows user for&amp;#8230; well, ever since I started using a computer. Then I got side-saddled with a mac. Then I looked up some mac keyboard shortcuts. Then I got used to the idea of typing &amp;#8220;command&amp;#8221;-key rather than &amp;#8220;control&amp;#8221;-key and FINALLY figured out that it was easier to press the &amp;#8220;command&amp;#8221; button with the thumb rather than with the pinkie.
&lt;/p&gt;

&lt;p&gt;
  Then I started using all of these shortcuts:
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;1) Taking a Screenshot&lt;/strong&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    shift-command-4
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;p&gt;
    &lt;strong&gt;2) Opening up Chrome Developer Tools&lt;/strong&gt;
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      option-command-j
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;
  &lt;strong&gt;3) Scrolling left, right, up, or down a page without the use of a mouse&lt;/strong&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    swipe with two fingers simultaneously on the mousepad!
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;p&gt;
    &lt;strong&gt;4) Right-click&lt;/strong&gt;
  &lt;/p&gt;
  
  &lt;div&gt;
    &lt;ul&gt;
      &lt;li&gt;
        hold down the &amp;#8216;control&amp;#8217; key (located right near the command key) while clicking (okay, this was the only shortcut that took me an embarrassingly long while to figure out before I realized I could stop needing an external mouse&amp;#8230;)
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
  &amp;#8230; Anyway, work on the computer has never been more fun now. The mac loads instantly in 2 seconds, whereas it took more than 30 seconds for my [admittedly kind-of-old PC] to load.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/how-i-converted-to-mac-from-pc/</link>
                <guid>http://username.github.io/how-i-converted-to-mac-from-pc</guid>
                <pubDate>2012-10-07T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Hacker News Readers, You Make Me Laugh&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Here&amp;#8217;s a brilliant spoof of a set of recent headlines upvoted to the front page of &lt;a href=&quot;http://news.ycombinator.com&quot; target=&quot;_blank&quot;&gt;news.ycombinator.com&lt;/a&gt;:
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://us2.campaign-archive1.com/?u=193b767bbb3b0eb0d949d5924&amp;#038;id=0c3a567f95&amp;#038;e=5603c292b3&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2012/10/Screen-shot-2012-10-07-at-1.29.15-AM.png&quot; alt=&quot;Hacker News Spoof&quot; /&gt;&lt;/a&gt;&lt;br /&gt; Source: &lt;a href=&quot;http://us2.campaign-archive1.com/?u=193b767bbb3b0eb0d949d5924&amp;#038;id=0c3a567f95&amp;#038;e=5603c292b3&quot; target=&quot;_blank&quot;&gt;http://us2.campaign-archive1.com/?u=193b767bbb3b0eb0d949d5924&amp;amp;id=0c3a567f95&amp;amp;e=5603c292b3&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/hacker-news-readers-you-make-me-laugh/</link>
                <guid>http://username.github.io/hacker-news-readers-you-make-me-laugh</guid>
                <pubDate>2012-10-07T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Erm. Hi. FTP.&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I can&amp;#8217;t believe it took me this long to figure out how to connect to my Bluehost account in FileZilla.
&lt;/p&gt;

&lt;p&gt;
  But yes, here are the easy instructions: https://box363.bluehost.com:2083/frontend/bluehost/ftp/accounts.html
&lt;/p&gt;

&lt;p&gt;
  Y&amp;#8217;know, I think the only reason I haven&amp;#8217;t done this sooner is because I had been in the very terrible habit of editing files directly in my bluehost or WP accounts. I&amp;#8217;d never watched someone go through all the steps of working on files saved locally /before/ committing them to the site until very recently, when I sat in on a hands-on WordPress development workshop. I learned so many small but useful things in that class! It definitely deserves its own post at some point.
&lt;/p&gt;

&lt;p&gt;
  Anyway, lesson learned: not everyone uses git or subversion to commit files to their sites.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/erm-hi-ftp/</link>
                <guid>http://username.github.io/erm-hi-ftp</guid>
                <pubDate>2012-10-01T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Note To Self: Remember To Close Tags&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  &amp;#8230; and end jQuery line breaks with semicolons (;). And don&amp;#8217;t forget the % before the } closing bracket in Mason. And don&amp;#8217;t forget the question mark at the beginning of a bracket in PHP (&amp;lt;?php). And, and, and&amp;#8230;&lt;/p&gt;

&lt;p&gt;
    Always saves time to pay attention to the small details when you&amp;#8217;re setting foot in a new language. :-)
  &lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/note-to-self-remember-to-close-tags/</link>
                <guid>http://username.github.io/note-to-self-remember-to-close-tags</guid>
                <pubDate>2012-09-29T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;REVIEW: HTML and CSS Book by Jon Duckett&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  A couple of weeks ago I found a copy of &lt;a href=&quot;http://htmlandcssbook.com/&quot; target=&quot;_blank&quot;&gt;The HTML and CSS book&lt;/a&gt; in my bookstore. It looked very visual, so I started flipping through it &amp;#8212; and before I knew it, three and a half hours had passed and I had read/skimmed through the entire 490-page book.
&lt;/p&gt;

&lt;p&gt;
  I promptly bought it for a couple of reasons:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    It&amp;#8217;s very pretty!
  &lt;/li&gt;
  &lt;li&gt;
    I could see myself using it as a reference book. What I&amp;#8217;d learned about HTML and CSS thus far had mostly come from googling occasional articles and reading &lt;a href=&quot;http://www.amazon.com/CSS-Missing-David-Sawyer-McFarland/dp/0596802447&quot;&gt;CSS: The Missing Manual&lt;/a&gt;, by David Sawyer McFarland, on my ipad. My e-version is great, and goes into a lot of detail, but doesn&amp;#8217;t quite make it as a handy reference guide.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  &lt;img class=&quot;aligncenter&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2012/09/Screen-shot-2012-09-28-at-11.55.01-PM.png&quot; alt=&quot;&quot; width=&quot;500&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;
  I was happy with the fact that although much of what I was reading was already familiar, there were small details that filled the gaps of my knowledge. And the book was organized in such a way that the placement of each chapter (color-coded!) made total sense.
&lt;/p&gt;

&lt;p&gt;
  I lied: I actually ended up buying two copies &amp;#8212; one for myself, and another for my boyfriend who had expressed some desire in learning web design.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/html-and-css-book/</link>
                <guid>http://username.github.io/html-and-css-book</guid>
                <pubDate>2012-09-29T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Did you know you can preview your randomly saved .html and .php files on your web browser?&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  On mac, type in:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    file:///Users/YOUR_USERNAME/folder/wherever/you/saved/your/file.html
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  I also learned that typing &amp;#8220;../&amp;#8221; moves up a directory from the level you&amp;#8217;re currently at. For example, if an image called &amp;#8220;cat.jpg&amp;#8221; was saved in a folder whose root folder was above a level from the document that you&amp;#8217;re working in, typing in &amp;#8220;../&amp;#8221; moves you up to the level of the root folder. Then all you would need to do is type in the path where cat.jpg was saved. Here&amp;#8217;s another example in practice:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &amp;lt;img src=&amp;#8221;../rootfolder/animals/cats/cat.jpg&amp;#8221; /&amp;gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/did-you-know-you-can-preview-your-randomly-saved-html-and-php-files-on-your-web-browser/</link>
                <guid>http://username.github.io/did-you-know-you-can-preview-your-randomly-saved-html-and-php-files-on-your-web-browser</guid>
                <pubDate>2012-09-29T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Some Day I&amp;#8217;m Going To Make A Scrolling Infographic Page Like This Too&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I&amp;#8217;ve seen scrolling infographics shared on &lt;a href=&quot;http://news.ycombinator.com&quot; target=&quot;_blank&quot;&gt;Hacker News&lt;/a&gt; many times, and they never cease to make me smile. Here&amp;#8217;s my latest discovery:
&lt;/p&gt;

&lt;p&gt;
  &lt;a href=&quot;http://www.atlassian.com/time-wasting-at-work-infographic&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2012/09/Screen-shot-2012-09-06-at-10.10.22-PM.png&quot; width=&quot;480&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  As always, I like these types of pages because they 1) have the potential to go super-viral; 2) tend to be very visual; 3) are great for breaking down simple talking points and ideas. This one is created by Atlassian. Was anyone else tempted to submit an email into the large input box at the bottom?
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/some-day-im-going-to-make-a-scrolling-infographic-page-like-this-too/</link>
                <guid>http://username.github.io/some-day-im-going-to-make-a-scrolling-infographic-page-like-this-too</guid>
                <pubDate>2012-09-07T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Things I Should Have Figured Out Earlier, But Didn&amp;#8217;t Until People Talked To Me&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Two truly helpful things I learned from conversations with other people this past week:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    I &lt;em&gt;can&lt;/em&gt; record pretty high quality on music on my iphone using the Multitrack DAW app if I decrease the input signal. I should&amp;#8217;ve figured this out earlier!
  &lt;/li&gt;
  &lt;li&gt;
    In &amp;lt;a href=http://www.optimizely.com&quot; target=&quot;_blank&quot;&amp;gt;Optimizely, an web optimization and A/B testing tool, there &lt;em&gt;is&lt;/em&gt; a way to target changes sitewide using substrings.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/things-i-should-have-figured-out-earlier-but-didnt-until-people-talked-to-me/</link>
                <guid>http://username.github.io/things-i-should-have-figured-out-earlier-but-didnt-until-people-talked-to-me</guid>
                <pubDate>2012-09-05T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;My Set-Up Environment For Learning From Tech Books&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Step One:&lt;/strong&gt; Read book. I&amp;#8217;m usually on an ipad with a Kindle purchase or with the Safari Books Online app, or on a tab in the Safari browser).
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Step Two:&lt;/strong&gt; Type notes on web browser. I recently discovered an organization platform called &lt;a href=&quot;http://www.workflowy.com&quot; target=&quot;_blank&quot;&gt;workflowy.com&lt;/a&gt;, and I really like using it to organize &lt;s&gt;everything in my life&lt;/s&gt; all the to-dos I have related to my personal projects. I find it useful for typing notes beneath bullet points, too, since the platform lets you switch in and out of document mode pretty easily.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Step Three:&lt;/strong&gt; Use jsfiddle.net. It&amp;#8217;s lets you fiddle with HTML, CSS, and Javascript &lt;em&gt;all on the same web tab&lt;/em&gt; and lets you see the results of your work with a single click.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/my-set-up-space-for-learning-front-end-web-development/</link>
                <guid>http://username.github.io/my-set-up-space-for-learning-front-end-web-development</guid>
                <pubDate>2012-08-12T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;&amp;#8220;No Thanks, You Don&amp;#8217;t Deserve It.&amp;#8221;&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I just saw a pop-up on earbits.com that asked me to share the site on Facebook or Twitter. Instead of an X button on the top right-hand side, however, they placed a small line of gray text for me to click on that said &amp;#8220;No thanks, you don&amp;#8217;t deserve it.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
  The mean-spirited message gave me pause. I wanted to be nice. I impulsively clicked on the twitter button. Shared!
&lt;/p&gt;

&lt;p&gt;
  It was a clever message.
&lt;/p&gt;

&lt;p&gt;
  &lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2012/05/nothanksyoudontdeserveit.png&quot; alt=&quot;&quot; title=&quot;nothanksyoudontdeserveit&quot; width=&quot;662&quot; class=&quot;alignnone size-full wp-image-339&quot; /&gt;&lt;br /&gt; &lt;sup&gt;The &amp;#8220;thank you&amp;#8221; text immediately replaced the previous message after I clicked to share. &lt;/sup&gt;
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/no-thanks-you-dont-deserve-it/</link>
                <guid>http://username.github.io/no-thanks-you-dont-deserve-it</guid>
                <pubDate>2012-05-24T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;What I&amp;#8217;m Learning From TutsPlus.com&amp;#8217;s jQuery In 30 Days E-mails (Free)&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I started receiving Nettuts+&amp;#8217;s 10-minute-ish video tutorials in jQuery a couple of days ago. Ran through the first lesson last week, but didn&amp;#8217;t get a chance to open up the next one until today. (I have a pile in my inbox, now.)
&lt;/p&gt;

&lt;p&gt;
  So far I like it! The videos are good refreshers for what I&amp;#8217;ve read in textbooks so far, and they&amp;#8217;re short and easy to understand (which is a huge plus, since they&amp;#8217;re targeted at the absolute beginner.)
&lt;/p&gt;

&lt;div class=&quot;steps&quot;&gt;
  Key takeaways from Day 2&amp;#8217;s video: 
  
  &lt;blockquote&gt;
    &lt;p&gt;
      $(document.ready(function() {
    &lt;/p&gt;
    
    &lt;p&gt;
      });
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    .. .can be written as:
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      $(function () {
    &lt;/p&gt;
    
    &lt;p&gt;
      });
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    Also, the document-ready function is written so that the rest of the code on the page can load before the jQuery.
  &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/day-2-of-tutsplus-coms-free-jquery-in-30-days-course/</link>
                <guid>http://username.github.io/day-2-of-tutsplus-coms-free-jquery-in-30-days-course</guid>
                <pubDate>2012-05-17T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;How To Magnify A Graphic In 5 Steps (The Beginner jQuery Way)&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  A few weeks ago I tinkered around with &amp;#8220;zoomifying&amp;#8221; a graphic upon mouseover. I quickly discovered that I needed to add a &amp;#8220;mouseout&amp;#8221; event, so with some more hobbling around I was able to write up something that works. I have the feeling that experts would have written it more simply &amp;#8212; but hey, it works!
&lt;/p&gt;

&lt;p&gt;
  For this tutorial we&amp;#8217;re going to assume that the natural width of the image is 300, and the magnified width of the image is 800px. Note that the jQuery library must be called before any of the jQuery can work.
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Mouseover the image to see example: &lt;/strong&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;img src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2012/05/metacodingdiaries-300x164.jpg&quot; alt=&quot;image&quot; title=&quot;Hey, it&#39;s blurrier but larger!&quot; width=&quot;300&quot; height=&quot;164&quot; class=&quot;infographic&quot; /&gt;
&lt;/p&gt;

&lt;div class=&quot;steps&quot;&gt;
  &lt;strong&gt;Step 1:&lt;/strong&gt;&lt;br /&gt; Save the image in its original, high-quality size.&lt;br /&gt; &lt;strong&gt;Step 2:&lt;/strong&gt;&lt;br /&gt; Upload the high-quality image into PicMonkey (or another photo editor) and find the heights for when the image is resized to width=300 and for when the image is resized to width=800 
  
  &lt;p&gt;
    Copy and paste the following script to the top of the WordPress post. Switch out the heights that you found from picmonkey.
  &lt;/p&gt;
  
  &lt;pre class=&quot;syntax {css}&quot;&gt;
&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Step 3:&lt;/strong&gt;&lt;br /&gt; Get rid of the tags in the image on the post. So
  &lt;/p&gt;&amp;lt;pre class=&quot;syntax {CSS}&amp;gt;
  
  &lt;a href=&quot;IMAGE URL&quot;&gt;&lt;img class=&quot;wp-image&quot; title=&quot;P1&quot; src=&quot;IMAGE SOURCE&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;648&quot; /&gt;&lt;/a&gt; 
  
  &lt;p&gt;
    becomes
  &lt;/p&gt;&amp;lt;pre class=&quot;syntax {css}&amp;gt;
  
  &lt;img class=&quot;wp-image&quot; title=&quot;P1&quot; src=&quot;IMAGE URL&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;648&quot; /&gt; 
  
  &lt;p&gt;
    &lt;strong&gt;Step 4: &lt;/strong&gt;&lt;br /&gt; Change the class to be equal to &amp;#8220;infographic1&amp;#8243;, and edit out the title to whatever you desire.
  &lt;/p&gt;&amp;lt;pre class=&quot;syntax {css}&amp;gt;&amp;gt;
  
  &lt;img class=&quot;wp-image&quot; title=&quot;P1&quot; src=&quot;IMAGE URL&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;648&quot; /&gt; 
  
  &lt;p&gt;
    becomes
  &lt;/p&gt;&amp;lt;pre class=&quot;syntax {css}&amp;gt;
  
  &lt;img class=&quot;infographic1&quot; title=&quot;IMAGE TITLE&quot; src=&quot;IMAGE URL&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;648&quot; /&gt; 
  
  &lt;p&gt;
    &lt;strong&gt;Step 5:&lt;/strong&gt;&lt;br /&gt; Click &amp;#8220;preview&amp;#8221; to check that the zoomification effect is working. Double check the other steps if it&amp;#8217;s not.
  &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/how-to-zoomify-a-graphic-in-5-steps-the-beginner-jquery-way/</link>
                <guid>http://username.github.io/how-to-zoomify-a-graphic-in-5-steps-the-beginner-jquery-way</guid>
                <pubDate>2012-05-03T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Magic&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I remember the first time someone wrote a short piece of code in front of me that output one string of text when it was a certain time of day, and another string of text when it was another time of day. I thought it was magic. How did he know what to write?
&lt;/p&gt;

&lt;p&gt;
  Nine months later, now that I&amp;#8217;ve scratched the surface a little, I understand that most of it is syntax &amp;#8212; knowing what works, what doesn&amp;#8217;t. Every snippet has a starting bracket and an ending part; there are certain concepts (such as if/then statements) that will probably work in a couple of different derivative languages. I&amp;#8217;m still picking up pieces here and there, but I think it&amp;#8217;s time to get serious by opening up a few textbooks. I&amp;#8217;m pretty happy to have access to Safari Books Online.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/magic/</link>
                <guid>http://username.github.io/magic</guid>
                <pubDate>2012-03-28T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Small Lesson&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Today I was reminded that an innocent-looking apostrophe inside a string can break the entirety of a javascript file.
&lt;/p&gt;

&lt;div class=&quot;steps&quot;&gt;
  &amp;#8216;I am a string. That&amp;#8217;s great!&amp;#8221; &amp;lt;-- Wrong.&lt;br /&gt; &#39;I am a string. That\&#39;s great!&quot; &amp;lt;-- Right.
&lt;/div&gt;

&lt;p&gt;
  That is all. : (
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/small-lesson/</link>
                <guid>http://username.github.io/small-lesson</guid>
                <pubDate>2012-03-15T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;A 30-Minute Youtube Talk On Data And Design&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Idan Gazit talked about data visualization at Pycon 2012 and gave some very interesting examples on how color, relationships, and type faces are used to present information. I was excited to listen to his 30-minute presentation:
&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;

&lt;p&gt;
  The interesting message that I took away? &lt;em&gt;Relationships matter.&lt;/em&gt; That is, people will always be looking for clues surrounding the information presented. The number &amp;#8220;5&amp;#8221;, for example, is huge when placed next to a &amp;#8220;3&amp;#8221;, but tiny when placed next to &amp;#8220;1000.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
  That exactly wasn&amp;#8217;t an example Idan used, but rather my over-simplification of an idea that provoked me the most.
&lt;/p&gt;

&lt;p&gt;
  Anyway, many thanks to the front page of &lt;a href=&quot;http://news.ycombinator.com&quot;&gt;Hacker News&lt;/a&gt; for the link!
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/data-design-meaning/</link>
                <guid>http://username.github.io/data-design-meaning</guid>
                <pubDate>2012-03-12T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Lessons Learned From Beginner jQuery Fail&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Reading &lt;a href=&quot;http://www.amazon.com/JavaScript-jQuery-David-Sawyer-McFarland/dp/1449399029/ref=sr_1_1?ie=UTF8&amp;#038;qid=1328679663&amp;#038;sr=8-1&quot; target=&quot;_blank&quot;&gt;Javascript &amp;amp; jQuery: The Missing Manuals&lt;/a&gt; was influential in several ways:
&lt;/p&gt;

&lt;div class=&quot;steps&quot;&gt;
  (1) The book got me through the basics of javascript and its tutorials quickly got me using jQuery to &lt;em&gt;do stuff&lt;/em&gt;.
&lt;/div&gt;

&lt;div class=&quot;steps&quot;&gt;
  (2) Suddenly I knew exactly how components on under websites slid from place to place, faded in and out, and did a lot of other neat tricks. I was startled by how simple jQuery was &amp;#8212; I wasn&amp;#8217;t really writing code; I was accessing a &lt;em&gt;javascript library&lt;/em&gt; and creating standard structures to pull in the hard work that other authors had done.
&lt;/div&gt;

&lt;p&gt;
  Then I attempted to do a simple .show() and .hide() (translation: hiding an element, then showing it upon a click) today with jQuery, and it didn&amp;#8217;t work. Asked a co-worker who&amp;#8217;s an experienced web developer, and he suggested I start using a debugger of some sort. He kindly linked me to &lt;a href=&quot;http://code.google.com/chrome/extensions/tut_debugging.html&quot; target=&quot;_blank&quot;&gt;Chrome Developer Tools&lt;/a&gt;, which showed me that there was a syntax error in the javascript.
&lt;/p&gt;

&lt;p&gt;
  What, you might ask, is a syntax error?
&lt;/p&gt;

&lt;p&gt;
  I did some googling, and some asking, and apparently the majority of syntax errors have to do with punctuation &amp;#8212; such as forgetting to close a line with a semicolon, or forgetting parentheses.
&lt;/p&gt;

&lt;p&gt;
  I stared at the code. Stared some more. Then I finally had the bright idea to compare my code with another example of jquery that was working (I used &lt;a href=&quot;http://www.w3schools.com/jquery/tryit.asp?filename=tryjquery_hide&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt;), and that was where I immediately saw that &lt;em&gt;I was missing an entire set of closing parentheses });&lt;/em&gt;.
&lt;/p&gt;

&lt;p&gt;
  Whoops! Guess that I means I need to reread my book. Or just start practicing with some more examples.
&lt;/p&gt;

&lt;p&gt;
  My co-worker also pointed out the &lt;em&gt;console.log(&amp;#8220;comment about what your javascript is supposed to be doing here&amp;#8221;)&lt;/em&gt; trick, which is achieved by putting that line above every piece of javascript you want to test, opening up browser tools, and then seeing if the line you typed runs in the browser console. He told me that it&amp;#8217;s a good idea to get rid of these lines when the code goes live, though, because of compatibility issues with IE9.
&lt;/p&gt;

&lt;p&gt;
  Hurrah for super-helpful co-workers! Sometimes it&amp;#8217;s good to have mentors who know their stuff. And to cross-check code with a working example rather than staring at it blindly, of course.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/day-1-jquery-fail/</link>
                <guid>http://username.github.io/day-1-jquery-fail</guid>
                <pubDate>2012-02-08T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Photoshop! Finally.&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I went to an API hackathon, and ended up watching a 19-year-old college freshman &lt;em&gt;dominate&lt;/em&gt; Photoshop CS6 with a tablet. After that, I couldn&amp;#8217;t help but take out my 30-day trial of CS6 too. As a long-time user of Microsoft PowerPoint, web apps like PicMonkey, and other tools where &lt;em&gt;clicking on an item selected it&lt;/em&gt;, figuring out how to play around with layers was the biggest learning curve. But after that? Wow.
&lt;/p&gt;

&lt;p&gt;
  I was honestly pretty excited to finally unveil the mystery of how transparent graphics were created. Hurrah for magic eraser tools:
&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;

&lt;p&gt;
  I also discovered that once you get through the initial curves of realizing that keyboard shortcuts are your friend and that layers are &lt;em&gt;not&lt;/em&gt; selected by clicking on the canvas, Google really *is* your friend.
&lt;/p&gt;

&lt;p&gt;
  I&amp;#8217;m sure I still have much to learn, but in any case, these basics I&amp;#8217;ve googled have been really helpful in getting me to wield Photoshop as easily as I did Microsoft Paint:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    command-[ and command-] moves layers backward and forward, respectively (you can also manually drag them up and down) (
  &lt;/li&gt;
  &lt;li&gt;
    command-T lets you adjust the size of a layer after you select it
  &lt;/li&gt;
  &lt;li&gt;
    If you *do* want to select a layer that you point to right on the canvas, you have to hit command-click
  &lt;/li&gt;
  &lt;li&gt;
    control-option adjusts the size of your circular brush tool
  &lt;/li&gt;
  &lt;li&gt;
    It *is* possible to change the canvas size in the middle of editing! Simply go to image -&amp;gt; canvas size. You can also adjust the dimensions of an image by going to image -&amp;gt; image size.
  &lt;/li&gt;
  &lt;li&gt;
    Press &amp;#8216;b&amp;#8217; for the brush shortcut, &amp;#8216;v&amp;#8217; for the view shortcut, &amp;#8216;c&amp;#8217; to crop the entire canvas, &amp;#8216;t&amp;#8217; to write a block of text, etc.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  I&amp;#8217;m probably going to read through a book about Photoshop soon &amp;#8212; but for now, I&amp;#8217;m happy to be comfortable with knowing enough to create some of my own custom graphics.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/photoshop-finally/</link>
                <guid>http://username.github.io/photoshop-finally</guid>
                <pubDate>2012-01-12T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;How To Get Started With CSS&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;resources&quot;&gt;
  &lt;strong&gt;Resources:&lt;/strong&gt; 
  
  &lt;ul&gt;
    &lt;li&gt;
      W3Schools&amp;#8217; Tutorial on CSS &amp;#8211; &lt;a href=&quot;http://www.w3schools.com/css/css_intro.asp&quot;&gt;http://www.w3schools.com/css/css_intro.asp&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://www.amazon.com/CSS-Missing-David-Sawyer-McFarland/dp/0596802447&quot;&gt;CSS: The Missing Manual&lt;/a&gt; by David Sawyer McFarland (book) &amp;#8212; The W3schools tutorial is good enough for a quick overview, but I recommend reading David McFarland&amp;#8217;s book if you want to get a solid understanding of all that CSS has to offer. I read my copy on &lt;a href=&quot;http://safaribooksonline.com/Corporate/Index/&quot;&gt;Safari Books Online&lt;/a&gt;, a subscription-based service that offers access to tons of programming books, but you can also purchase it directly.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://net.tutsplus.com&quot;&gt;net.tutsplus.com&lt;/a&gt; &amp;#8212; I highly recommend this site as a go-to resource for finding tutorials of cool examples you can do with HTML and CSS. The tutorial below, in fact, is a simplification of some things I learned from &lt;a href=&quot;http://net.tutsplus.com/tutorials/html-css-techniques/create-a-sticky-note-effect-in-5-easy-steps-with-css3-and-html5/&quot;&gt;this post&lt;/a&gt;.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;
  Let&amp;#8217;s try a simple example by learning how to recreate the block of text above. (Yes, &lt;em&gt;that&lt;/em&gt; block of text hat vaguely looks like it rests on a yellow post-it-note.)
&lt;/p&gt;

&lt;p&gt;
  But let&amp;#8217;s not work with so much text. Ah, here&amp;#8217;s our new HTML:
&lt;/p&gt;

&lt;pre class=&quot;syntax {css}&quot;&gt;
This post-it note has been purposefully &lt;em&gt;simplified&lt;/em&gt; to contain fewer words.
&lt;/pre&gt;

&lt;p&gt;
  But we want to style it, right? So we&amp;#8217;ll need to select it some way. Let&amp;#8217;s do this by wrapping a div around it. Let&amp;#8217;s name the div &amp;#8220;postit.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
  But should we let &amp;#8220;postit&amp;#8221; be an ID or a class? You can &lt;a href=&quot;http://css-tricks.com/the-difference-between-id-and-class/&quot;&gt;read about the difference here&lt;/a&gt;. For the purposes of this post, let&amp;#8217;s make it a class so we can reuse the div.
&lt;/p&gt;

&lt;pre class=&quot;syntax {css}&quot;&gt;


&lt;div class=&quot;postit&quot;&gt;
  This post-it note has been purposefully left &lt;em&gt;blank&lt;/em&gt;.
&lt;/div&gt;
&lt;/pre&gt;

&lt;p&gt;
  Awesome! Now that the body of text we want to select has been selected, all that&amp;#8217;s left to do is to write the CSS that styles the text. The most common method is to place the CSS in an &lt;a href=&quot;http://www.w3schools.com/css/css_howto.asp&quot; target=&quot;_blank&quot;&gt;external style sheet&lt;/a&gt;, but for the purposes of this post, let&amp;#8217;s just write it above the HTML (otherwise known as an internal stylesheet). Makes it easy to see what happened at a glance.
&lt;/p&gt;

&lt;p&gt;
  The first thing to remember, when writing CSS above the HTML, is to type these tags:
&lt;/p&gt;

&lt;pre class=&quot;syntax {css}&quot;&gt;

&lt;/pre&gt;

&lt;p&gt;
  See the space in the middle? That&amp;#8217;s where we&amp;#8217;re going to put the CSS. Since our div is a class, we type a period before the name of the div (&amp;#8220;postit&amp;#8221;). (Note: if it were an ID, we would have typed &amp;#8220;#&amp;#8221; in place of the period) Then we type in a set of brackets, inside of which will contain the styling.
&lt;/p&gt;

&lt;pre class=&quot;syntax {css}&quot;&gt;

&lt;/pre&gt;

&lt;p&gt;
  Now: what styles do we want? Say we want the font color inside the div to be a certain shade of blue, or the hex color code #369. This is what we&amp;#8217;ll type inside:
&lt;/p&gt;

&lt;pre class=&quot;syntax {css}&quot;&gt;

&lt;/pre&gt;

&lt;p&gt;
  &lt;strong&gt;Note:&lt;/strong&gt; Do NOT forget the semicolon after the statement!
&lt;/p&gt;

&lt;p&gt;
  What else do we want to do with our block of text? Right underneath &amp;#8220;color: #369&amp;#8243;, type in:
&lt;/p&gt;

&lt;pre class=&quot;syntax {css}&quot;&gt;
width: 30em; 
display: block;
&lt;/pre&gt;

&lt;p&gt;
  This transforms the div into a block with a width of 30em, which is the same thing as 480 pixels. (Why type in &amp;#8220;30em&amp;#8221; instead of &amp;#8220;480px&amp;#8221;, which does the same thing? Stackoverflow members &lt;a href=&quot;http://stackoverflow.com/questions/609517/why-em-instead-of-px&quot; target=&quot;_blank&quot;&gt;answer the question here&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
  Let&amp;#8217;s also add in the following:
&lt;/p&gt;

&lt;pre class=&quot;syntax {css}&quot;&gt;
background: #ffc;
&lt;/pre&gt;

&lt;p&gt;
  This makes the background color a post-it color yellow.
&lt;/p&gt;

&lt;pre class=&quot;syntax {css}&quot;&gt;
padding: 30px; 
&lt;/pre&gt;

&lt;p&gt;
  This introduces some distance between the border of the div block and the text inside by a measure of 30 pixels all around.
&lt;/p&gt;

&lt;p&gt;
  The final step? Adding some box shadow.
&lt;/p&gt;

&lt;pre class=&quot;syntax {css}&quot;&gt;
-moz-box-shadow: 5x 5px 7x rgba(63,33,33,1);
-webkit-box-shadow: 5px 5px 7px rgba(63,33,33,.7);
box-shadow: 5px 5px 7px rgba(63,33,33,.7);
&lt;/pre&gt;

&lt;p&gt;
  Here&amp;#8217;s what your final product should look like:
&lt;/p&gt;

&lt;pre class=&quot;syntax {css}&quot;&gt;




&lt;div class=&quot;postit&quot;&gt;
  This post-it note has been purposefully &lt;em&gt;simplified&lt;/em&gt; to contain fewer words.
&lt;/div&gt;
&lt;/pre&gt;

&lt;p&gt;
  And you&amp;#8217;re done! Make sure that your notepad++ file is saved as an appropriate .html or .php (which could also work), and preview it in your browser. Here&amp;#8217;s what you should get:
&lt;/p&gt;

&lt;div class=&quot;postit&quot;&gt;
  This post-it note has been purposefully &lt;em&gt;simplified&lt;/em&gt; to contain fewer words.
&lt;/div&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/day-2-getting-started-with-css/</link>
                <guid>http://username.github.io/day-2-getting-started-with-css</guid>
                <pubDate>2012-01-07T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Why Your CSS and Javascript Might Not Be Working In Your WordPress Post&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I was working on a CSS/Javascript design that involved a couple of thumbnails the other day. Clicking on each thumbnail would generate the corresponding video or graphic, and hide all the other pieces of content. I coded the design in notepad++, tested it in a couple of browsers, and made sure it worked. Then I pasted the code into the HTML editor of a WordPress post, hit &amp;#8220;preview,&amp;#8221; and encountered a mess.
&lt;/p&gt;

&lt;p&gt;
  Thanks goodness for co-workers who code. Since I couldn&amp;#8217;t figure out why my code was working in my text editor but not in WordPress, S. looked it over for me and figured out that WordPress was adding paragraph tags to all the blank lines in my script. Some of these tags ended up in the middle of the CSS and Javascript!
&lt;/p&gt;

&lt;p&gt;
  Needless to say, we deleted all the blank lines. S. also ended up simplifying my javascript. As for me, I&amp;#8217;m back hitting the books.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/why-your-css-and-javascript-might-not-be-working-in-your-wordpress-post/</link>
                <guid>http://username.github.io/why-your-css-and-javascript-might-not-be-working-in-your-wordpress-post</guid>
                <pubDate>2012-01-05T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Day 2: Resizing Images For The Blog&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;UPDATE:&lt;strong&gt; Picnik is closed. Picmonkey.com works similarly! 
  
  &lt;div class=&quot;resources&quot;&gt;
    &lt;strong&gt;Resource:&lt;/strong&gt; &lt;a title=&quot;picnik.com&quot; href=&quot;http://www.picnik.com&quot; target=&quot;_blank&quot;&gt;Picnik.com (the free and easy way)&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    Getting images the right width and height are quite important in web design. I remember learning this the hard way when I was trying to create banner text for a slider content plugin for WordPress which called for images of the same size. Lacking any background with visual graphic tools beyond Microsoft Paint, I stumbled my way through it by approximating the size of my banner using post-it-notes and my Microsoft Paint program as an editor.
  &lt;/p&gt;
  
  &lt;p&gt;
    Luckily, I later discovered that there&amp;#8217;s a free tool resizing tool for those who lack a copy of Photoshop. Here&amp;#8217;s what you need to do:
  &lt;/p&gt;
  
  &lt;div class=&quot;steps&quot;&gt;
    &lt;strong&gt;1.&lt;/strong&gt; Go to picnik.com&lt;br /&gt; &lt;strong&gt;2.&lt;/strong&gt; Click on &amp;#8220;get started.&amp;#8221;&lt;br /&gt; &lt;strong&gt;3.&lt;/strong&gt; Upload a photo.&lt;br /&gt; &lt;strong&gt;4.&lt;/strong&gt; Click on the &amp;#8220;resize&amp;#8221; button to make it scroll down. Now you can reformat the image you uploaded to any size you want. The first field signifies the width, and the second field signifies the height. So 49 x 51 would be equivalent to 49 px (or pixels) wide, 51 px (or pixels) tall. In HTML, you might end up doing the same thing by typing &lt;code&gt;&amp;lt;img src=&amp;#8221;URL of Image&amp;#8221; width=&amp;#8221;49&amp;#8243; height=&amp;#8221;51&amp;#8243;&amp;gt;&lt;/code&gt;.&lt;br /&gt; &lt;strong&gt;5.&lt;/strong&gt; Click &amp;#8220;apply&amp;#8221; and &amp;#8220;save.&amp;#8221; 
    
    &lt;p&gt;
      &lt;center&gt;
        &lt;img class=&quot;alignnone size-full wp-image-110&quot; title=&quot;picnik1&quot; src=&quot;http://www.thecodingdiaries.com/wp-content/uploads/2012/01/picnik11.png&quot; alt=&quot;&quot; width=&quot;227&quot; height=&quot;200&quot; /&gt;
      &lt;/center&gt; 
      
      &lt;p&gt;
        There are also a few other cool effects in Picnik that let you put text on your image, change its coloring, doodle on it, etc. Have fun clicking around!
      &lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/day-2-resizing-images-the-free-way/</link>
                <guid>http://username.github.io/day-2-resizing-images-the-free-way</guid>
                <pubDate>2012-01-04T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Resource: John D. Cook&amp;#8217;s Intro. To R For Programmers&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;resources&quot;&gt;
  &lt;strong&gt;Resource:&lt;/strong&gt; &lt;a href=&quot;http://www.johndcook.com/R_language_for_programmers.html?&quot;&gt;http://www.johndcook.com/R_language_for_programmers.html?&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;
  Want to learn R? This is worth a read if you know a little bit of programming. If you&amp;#8217;re confused about where to type in the code, check out &lt;a href=&quot;http://www.thecodingdiaries.com/getting-started-with-r/&quot;&gt;this post&lt;/a&gt; and watch the 10-minute introductory video.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/resource-john-d-cooks-intro-to-r-for-programmers/</link>
                <guid>http://username.github.io/resource-john-d-cooks-intro-to-r-for-programmers</guid>
                <pubDate>2012-01-03T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Day 1: The Difference Between WordPress.org and WordPress.com&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;resources&quot;&gt;
  &lt;strong&gt;Resource:&lt;/strong&gt; &lt;a href=&quot;http://en.support.wordpress.com/com-vs-org/&quot;&gt;http://en.support.wordpress.com/com-vs-org&lt;/a&gt; &amp;#8212; The official WordPress site offers a good explanation.
&lt;/div&gt;

&lt;p&gt;
  I remember the first time I started playing around with a free blog hosted on wordpress.com. It was great, I couldn&amp;#8217;t believe I had a live site within minutes, and playing with different themes became kind of addictive. The trouble was, I didn&amp;#8217;t know CSS, and I also wasn&amp;#8217;t given the power to customize the site any more than change the placements of a couple of widgets unless I wanted to change the theme. I also noticed talk about different &amp;#8220;plugins&amp;#8221; that I definitely could&amp;#8217;ve found useful, but I couldn&amp;#8217;t install any beyond the ones that WordPress.com had approved.
&lt;/p&gt;

&lt;div class=&quot;steps&quot;&gt;
  Here&amp;#8217;s the deal. If you just want to blog, my advice would be to go for the free hosting on tumblr, wordpress, or blogspot. (And if you&amp;#8217;re so inclined, you could even attach a domain name to your blog.) But if you want to go beyond blogging and learn web design and development, then you should install the open-sourced wordpress package. In the open-sourced version you&amp;#8217;ll actually be able to access your theme files and see the code that makes everything click. This means you&amp;#8217;ll have to pay for a 3rd party hosting provider, but at the average price of 1-2 coffees per month and for the benefit of the learning experience, the cost is well worth it.
&lt;/div&gt;

&lt;p&gt;
  You should check with your hosting provider to figure out how to install WordPress. Some services, like Bluehost, let you install it with one click (it really is that easy). WordPress is a very popular CMS (content management system), so the question should be old beans for any hosting provider you&amp;#8217;re researching.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/day-1-the-difference-between-wordpress-org-and-wordpress-com/</link>
                <guid>http://username.github.io/day-1-the-difference-between-wordpress-org-and-wordpress-com</guid>
                <pubDate>2012-01-02T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Source Control: How I Discovered Its Importance The Hard Way&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  Last night I made the mistake of editing the files for a new WordPress child theme directly in Appearance -&amp;gt; Editor. It was going swimmingly until I added a few lines of CSS and changed some of the HTML in header.php. When I refreshed the page, the layout of the site had broken. And I backed up a few steps, but I couldn&amp;#8217;t figure out what was wrong.
&lt;/p&gt;

&lt;p&gt;
  &lt;span class=&quot;steps&quot;&gt;That was when I realized I really should be coding in a development environment, and definitely not on a live site.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
  I&amp;#8217;ve heard that &lt;a href=&quot;http://www.github.com&quot;&gt;Github&lt;/a&gt; is the most widely-used platform for open-sourced software development nowadays, so I&amp;#8217;m going to put myself through some of its videos and start working with it. Here&amp;#8217;s what I&amp;#8217;m hoping I&amp;#8217;ll be able to learn:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    How to track changes and easily revert to an earlier version/backstep if I do something stupid
  &lt;/li&gt;
  &lt;li&gt;
    How to push a particular code version to a live site
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  For updates to this entry, check out the &amp;#8220;github&amp;#8221; tag.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/what-is-version-control-well-i-discovered-its-importance-the-hard-way/</link>
                <guid>http://username.github.io/what-is-version-control-well-i-discovered-its-importance-the-hard-way</guid>
                <pubDate>2012-01-01T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Learning How To Code ==&gt;&gt; Saving The World. Sort Of. Well, It&amp;#8217;s A Possibility.&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  It occurred to me, recently, how satisfying learning how to develop for the web could be. Sure, there are the frustrations when you type in a few lines of code and something that should work &lt;em&gt;doesn&amp;#8217;t&lt;/em&gt;, but once you spend enough time staring at the screen (or double-checking all the lines you know you were supposed to include, or dragging in a third party for help), there&amp;#8217;s a good chance that you&amp;#8217;ll eventually figure it out. And at that point, the feeling is magnificent.
&lt;/p&gt;

&lt;p&gt;
  Because &lt;em&gt;it&amp;#8217;ll be working&lt;/em&gt;. And if it&amp;#8217;s been deployed to a live site, you can always send the URL to someone to show it off.
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    &lt;em&gt;Me:&lt;/em&gt; Check this out!
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;em&gt;Friend:&lt;/em&gt; All I see is a button, and all it does is change colors when my mouse hovers over it. I don&amp;#8217;t even know what the button does.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;em&gt;Me:&lt;/em&gt; I know! Isn&amp;#8217;t that so cool?
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;em&gt;Friend:&lt;/em&gt; &amp;#8230;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
  Successfully troubleshooting code for the web reminds me of the satisfaction I used to feel in eighth grade when I successfully applied a new concept to a slightly tricky algebra problem. But it&amp;#8217;s even better because whereas the final answer to an algebra problem is kind of useless, the final answer to a web development problem has several possible real-world implications.
&lt;/p&gt;

&lt;p&gt;
  For example: 
  
  &lt;div class=&quot;steps&quot;&gt;
    &lt;strong&gt;Possible Implication #1:&lt;/strong&gt; Your website will be prettier.
  &lt;/div&gt;
  
  &lt;div class=&quot;steps&quot;&gt;
    &lt;strong&gt;Possible Implication #2:&lt;/strong&gt; Your website will be so pretty that it&amp;#8217;ll increase email subscription rates by 105% (the previous conversion rate, when your website wasn&amp;#8217;t so user-friendly, was 1%).
  &lt;/div&gt;
  
  &lt;div class=&quot;steps&quot;&gt;
    &lt;strong&gt;Possible Implication #3:&lt;/strong&gt;: Your pretty, user-friendly, A/B tested website happens to be supporting scholarship grants for girls who would otherwise lack access to an education. You send out a donation ask to your 1000 new subscribers, and .5% converts. The 5 people who send you checks give enough to support the scholarships of three girls. One of them grows up to be a doctor. &lt;s&gt;You save&lt;/s&gt; She happens to be at the right time and place to save the life of an infant. &lt;del datetims=&quot;2012-01-01T19:28:47+00:00&quot;&gt;You save&lt;/del&gt; The infant grows up to be a superhero who saves the world.
  &lt;/div&gt;
&lt;/p&gt;
</description>
                <link>http://username.github.io/learning-how-to-code-for-the-web-heres-why-its-satisfying/</link>
                <guid>http://username.github.io/learning-how-to-code-for-the-web-heres-why-its-satisfying</guid>
                <pubDate>2012-01-01T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>Jekyll Introduction</title>
                <description>
&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we’ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as “a simple, blog aware, static site generator”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-does-jekyll-do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-is-not-blogging-software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why-should-i-care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
  &lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
  &lt;li&gt;No internet connection required.&lt;/li&gt;
  &lt;li&gt;Ability to publish via git.&lt;/li&gt;
  &lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
  &lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
  &lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-jekyll-works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you’ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the-jekyll-application-base-format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;
  Stores configuration data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;
  This folder is for partial views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll-configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
(&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content-in-jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content “objects” get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts-and-pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working-with-posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post’s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy “set”.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy “lessons/beginner”. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won’t find “lessons” and “beginner” as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working-with-pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates-in-jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page’s or post’s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site’s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sub-templates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another “root” layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;
&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using-liquid-for-templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what-is-liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-have-to-use-liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid-is-not-programmer-friendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can’t do jackshit in liquid that hasn’t been allowed explicitly by the implementation.
What’s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll’s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;
My personal stance is to not invest time trying to hack liquid. It’s really unnecessary
&lt;em&gt;from a programmer’s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I’ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-parses-files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt;
  This is done with textile or markdown.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting-files-for-parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We’ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining-layouts-for-posts-and-templates-parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you’d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-generates-the-final-static-files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll’s job is to generate a static representation of your website.
The following is an outline of how that’s done:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt;
  Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt;
  Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
  big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
  At this stage your site is one big computed ruby object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;
  Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
  Once the post is parsed and liquified inside the the proper layout structure, the layout itself is “liquified”.
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
  hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt;
 Finally the liquid templates are “rendered”, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you’ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
  &lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at []()
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you’d like.&lt;/p&gt;
</description>
                <link>http://username.github.io/lessons/2011/12/29/jekyll-introduction</link>
                <guid>http://username.github.io/lessons/2011/12/29/jekyll-introduction</guid>
                <pubDate>2011-12-29T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Day 1: Getting Started With R&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;resources&quot;&gt;
  &lt;strong&gt;Resources:&lt;/strong&gt;&lt;br /&gt; The first thing I would recommend to anyone hoping to start Learning R is to &lt;a href=&quot;http://www.decisionsciencenews.com/2007/09/26/r-video-tutorial-number-1/&quot;&gt;watch this 10-minute quick-start tutorial&lt;/a&gt;. It&amp;#8217;ll take you through installation, how to load the data, and some of the basic things you can type in the console. After you watch that video, watch this second &lt;a href=&quot;http://www.dangoldstein.com/flash/Rtutorial2/Rtutorial2.html&quot;&gt;10-minute sequel here.&lt;/a&gt;.
&lt;/div&gt;

&lt;p&gt;
  Here&amp;#8217;s why I&amp;#8217;ve started learning R:
&lt;/p&gt;

&lt;div class=&quot;steps&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      It&amp;#8217;s great for manipulating calculations in large datasets
    &lt;/li&gt;
    &lt;li&gt;
      It&amp;#8217;s &amp;#8220;the language for statistical computing&amp;#8221;, and in certain cases is a better tool than Excel.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/getting-started-with-r/</link>
                <guid>http://username.github.io/getting-started-with-r</guid>
                <pubDate>2011-10-13T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;Day 1: Getting Started With HTML&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;resources&quot;&gt;
  &lt;strong&gt;Resources:&lt;/strong&gt; 
  
  &lt;ol&gt;
    &lt;li&gt;
      Download &lt;strong&gt;&lt;a href=&quot;http://www.barebones.com/products/textwrangler/&quot;&gt;Text Wrangler&lt;/a&gt;&lt;/strong&gt; if you&amp;#8217;re on the mac or &lt;strong&gt;&lt;a href=&quot;http://notepad-plus-plus.org/&quot;&gt;Notepad++&lt;/a&gt;&lt;/strong&gt; if you&amp;#8217;re on the PC. Or find a similar editor.&lt;br /&gt; &amp;#8212; Seriously, please do it. I didn&amp;#8217;t even know what I was missing out on until I tried out Notepad++ and found that I could use it to preview my elementary code in Chrome, Safari, IE, and Firefox. Just be sure to save your file in an appropriate file &amp;#8212; .html
    &lt;/li&gt;
    &lt;li&gt;
      &lt;strong&gt;&lt;a href=&quot;http://www.html.net/tutorials/html/&quot;&gt;HTML.net&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt; &amp;#8212; Gives a pretty good overview of what you should know about HTML. Comes with examples.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;strong&gt;&lt;a href=&quot;http://w3schools.com/html/html_doctype.asp&quot;&gt;W3Schools&lt;/a&gt;&lt;/strong&gt;
    &lt;/li&gt;
    &lt;p&gt;
      &amp;#8212; W3Schools has been criticized for being a go-to resource (see &lt;a href=&quot;http://w3fools.com/&quot;&gt;W3Fools.com&lt;/a&gt;), but it&amp;#8217;s not a bad tutorial to start with if you want a quick way to scratch the surface of what HTML is about.   
      
      &lt;p&gt;
        My advice for you &amp;#8212; as you scan through the recommended tutorials &amp;#8212; is to type out the HTML you learn in Notepad++ or Text Wrangler. Learning by &lt;em&gt;doing&lt;/em&gt; is the fastest route, and you&amp;#8217;ll also familiarize yourself with typing out tags such as &amp;#8220;&amp;lt;&quot; or &quot;&amp;gt;&amp;#8220;.
      &lt;/p&gt;
      
      &lt;p&gt;
        The first time I encountered HTML was probably in 2003, when I was playing around with Microsoft Frontpage, and noticing the funny code that popped up in &amp;#8220;source view&amp;#8221; whenever I did something in the visual editor. HTML is pretty easy to pick up, although the thing to learn if you &lt;em&gt;really&lt;/em&gt; want to have some power over your site&amp;#8217;s design is CSS.
      &lt;/p&gt;
      
      &lt;p&gt;
        But to start, here&amp;#8217;re some of the HTML basics you should probably know off the top of your head:
      &lt;/p&gt;
      
      &lt;div class=&quot;steps&quot;&gt;
        &lt;h3&gt;
          1. The Hyperlink
        &lt;/h3&gt;
        
        &lt;pre class=&quot;syntax {css}&quot;&gt;&lt;a href=&quot;http://www.google.com&quot;&gt;Link to google&lt;/a&gt;
&lt;strong&gt;Demo:&lt;/strong&gt;
&lt;a href=&quot;http://www.google.com&quot;&gt;Link to google&lt;/a&gt;


&lt;h3&gt;
  2. The list
&lt;/h3&gt;


&lt;ul&gt;
  &lt;li&gt;
    List Item 1
  &lt;/li&gt;
  	
  
  &lt;li&gt;
    List Item 2
  &lt;/li&gt;
  	
  
  &lt;li&gt;
    List Item 3
  &lt;/li&gt;
  	
  
  
  &lt;p&gt;
    &lt;strong&gt;Demo:&lt;/strong&gt;
  &lt;/p&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      List Item 1
    &lt;/li&gt;
    
    
    &lt;li&gt;
      List Item 2
    &lt;/li&gt;
    
    
    &lt;li&gt;
      List Item 3
    &lt;/li&gt;
    
  &lt;/ul&gt;
  
  
  &lt;p&gt;
    Just change &amp;#8220;ul&amp;#8221; to &amp;#8220;ol&amp;#8221; and &amp;#8220;/ul&amp;#8221; to &amp;#8220;/ol&amp;#8221; if you want the list to have numbered points instead of bullet points. 
  &lt;/p&gt;
  
  
  &lt;h3&gt;
    2. The bolded, italicized, underlined, and strikethrough fonts
  &lt;/h3&gt;
  
  
  &lt;pre class=&quot;syntax {css}&quot;&gt;&lt;strong&gt;Bolded text&lt;/strong&gt;
&lt;span style=&quot;text-decoration: underline;&quot;&gt;Underlined text&lt;/span&gt;
&lt;em&gt;Italicized text&lt;/em&gt;
&amp;lt;s&amp;gt;Strikethrough text&amp;lt;/s&amp;gt;&lt;/pre&gt;
  
  
  &lt;p&gt;
    &lt;strong&gt;Demo:&lt;/strong&gt;&lt;br /&gt;
    &lt;strong&gt;Bolded text&lt;/strong&gt;&lt;br /&gt;
    &lt;span style=&quot;text-decoration: underline;&quot;&gt;Underlined text&lt;/span&gt;&lt;br /&gt;
    &lt;em&gt;Italicized text&lt;/em&gt;
  &lt;/p&gt;
  
  
  &lt;h3&gt;
    3. The centered image with width and height defined
  &lt;/h3&gt;
  
  
  &lt;pre class=&quot;syntax {html}&quot;&gt;


&lt;center&gt;
  &lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/2/2a/Brown_bear_(Ursus_arctos_arctos)_running.jpg&quot; alt=&quot;Random Image I Found On Wikipedia&quot; width=&quot;200px&quot; height=&quot;80px&quot; /&gt;
&lt;/center&gt;

&lt;strong&gt;Demo:&lt;/strong&gt;
&lt;/pre&gt;
  
  
  &lt;p&gt;
    &lt;center&gt;
      &lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/2/2a/Brown_bear_(Ursus_arctos_arctos)_running.jpg&quot; alt=&quot;Random Image I Found On Wikipedia&quot; width=&quot;200px&quot; /&gt;
    &lt;/center&gt;
  &lt;/p&gt;
  
  
  &lt;h3&gt;
    4. The anchor link
  &lt;/h3&gt;
  
  
  &lt;pre class=&quot;syntax {css}&quot;&gt;&lt;a name=&quot;up&quot;&gt;&lt;/a&gt;Up
&lt;a href=&quot;#down&quot;&gt;Click here to go right below the &quot;down&quot; anchor tag&lt;/a&gt;
Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text
&lt;a name=&quot;down&quot;&gt;&lt;/a&gt;Down
&lt;a href=&quot;#up&quot;&gt;Click here to go right below the &quot;up&quot; anchor tag&lt;/a&gt;&lt;/pre&gt;
  
  
  &lt;p&gt;
    &lt;strong&gt;Demo:&lt;/strong&gt;&lt;br /&gt;
    &lt;a name=&quot;up&quot;&gt;&lt;/a&gt;Up&lt;br /&gt;
    &lt;a href=&quot;#down&quot;&gt;Click here to go right below the &amp;#8220;down&amp;#8221; anchor tag&lt;/a&gt;&lt;br /&gt;
    Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text Paragraph Text&lt;br /&gt;
    &lt;a name=&quot;down&quot;&gt;&lt;/a&gt;Down&lt;br /&gt;
    &lt;a href=&quot;#up&quot;&gt;Click here to go right below the &amp;#8220;up&amp;#8221; anchor tag&lt;/a&gt;
  &lt;/p&gt;
  
  
  &lt;h3&gt;
    5. Creating a horizontal divisor line
  &lt;/h3&gt;
  
  
  &lt;pre class=&quot;syntax {html}&quot;&gt;


&lt;hr /&gt;
&lt;/pre&gt;
  
  
  &lt;p&gt;
    &lt;strong&gt;Demo:&lt;/strong&gt;
  &lt;/p&gt;
  
  
  &lt;hr /&gt;
  
  &lt;p&gt;
    ^See the horizontal line?
    
  &lt;/p&gt;
  
  
  &lt;p&gt;
    Of course, you probably want to do a lot more styling with your content, like change the colors of of your links, fine-tune the layout of your site, make your images move in a content slider, or even change the appearance of the horizontal line when you type in &lt;hr /&gt;. That&amp;#8217;s where CSS and Javascript come into play. But for now, browsing through the two resources above will help you understand HTML, which is the precursor to learning CSS and Javascript.
  &lt;/p&gt;
  
  
  &lt;p&gt;
    When I started taking an interest in web design I knew no CSS at all, so the next post will be dedicated to a few of the resources I found helpful.
  &lt;/p&gt;
  
  
  &lt;p&gt;
    &amp;nbsp;
    
    
&lt;/p&gt;&lt;/ul&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;/ol&gt;&lt;/div&gt;
</description>
                <link>http://username.github.io/why-am-i-learning-html-and-css/</link>
                <guid>http://username.github.io/why-am-i-learning-html-and-css</guid>
                <pubDate>2011-08-15T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>&lt;span data-rel=&quot;title&quot;&gt;10 Lessons I Learned From Designing An Online Community Using WordPress and Buddypress&lt;/span&gt;</title>
                <description>&lt;p&gt;&lt;span data-rel=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
  I re-discovered my fascination with online community building around the same time I subscribed to a shared hosting service, installed WordPress, discovered the Buddypress plugin, and stumbled upon some awesome code discussion forums online. This was December 2010. The discovery turned into an independent study I dubbed &amp;#8220;Volunteerism in a Web 2.0 World,&amp;#8221; which turned into the development of a website and lots of meetings and several pages of an annotated bibliography &amp;#8212; all of which I submitted to my Research in Practice Program (RIPP) advisor at the end of the semester.
&lt;/p&gt;

&lt;p&gt;
  &lt;center&gt;
    &lt;img src=&quot;http://farm7.staticflickr.com/6033/6345644811_a30ed70b2d.jpg&quot; width=&quot;560&quot; /&gt;
  &lt;/center&gt;
&lt;/p&gt;

&lt;p&gt;
  Over the course of my meetings with &amp;#8220;stakeholders&amp;#8221; (Duke students and administrators) to asses the value of the &amp;#8220;website&amp;#8221; (&lt;a href=&quot;http://dukeimpact.org&quot; target=&quot;_blank&quot;&gt;an online social network for Duke civic engagement&lt;/a&gt;), I learned a few things about designing an online community using WordPress and Buddypress.
&lt;/p&gt;

&lt;h3&gt;
  1) Your site needs an FAQ.
&lt;/h3&gt;

&lt;p&gt;
  No, really. It does. Although you personally might think that the activity feeds and groups and profile editing links are in the most obvious locations in the world, your users will not. They&amp;#8217;re used to their own oft-frequented social networks (cough, Facebook), and  they&amp;#8217;ll ask you why clicking on their avatar doesn&amp;#8217;t automatically bring them to a &amp;#8220;change your profile picture&amp;#8221; page or if logging into your site using Facebook Connect will mean that everything they post will automatically get cross-posted to their Facebook wall. In addition, users want to know about your site features. How does your specific network make project management or content sharing easier than expected, for example?
&lt;/p&gt;

&lt;h3&gt;
  2) Speaking of Facebook Connect&amp;#8230;
&lt;/h3&gt;

&lt;p&gt;
  Do it. People hate creating new passwords for new sites they&amp;#8217;re not certain they&amp;#8217;ll visit twice. The only caveat I have is that some people are suspicious of entering their account information into any third-party site. Therefore I recommend giving people single sign-on options using Twitter, Linkedin, OpenID, Livejournal, etc. as well as Facebook.
&lt;/p&gt;

&lt;h3&gt;
  3) Learn HTML and CSS. Understanding PHP wouldn&amp;#8217;t hurt either.
&lt;/h3&gt;

&lt;p&gt;
  Trust me &amp;#8212; it helps a lot to know HTML and at least some basic CSS. (If you don&amp;#8217;t know how to start, Google is your friend! There are &lt;a href=&quot;http://www.htmldog.com/guides/cssbeginner/&quot; target=&quot;_blank&quot;&gt;so&lt;/a&gt; &lt;a href=&quot;http://www.w3schools.com/html/default.asp&quot; target=&quot;_blank&quot;&gt;many&lt;/a&gt; free tutorials out there.) Understanding the style.css file is all you need to start changing the color, style, and positioning of the components of your theme. Along the way you&amp;#8217;ll probably start staring at all the PHP… and be forced to understand it as well. :)
&lt;/p&gt;

&lt;h3&gt;
  4) Excited volunteers =/= a successful community.
&lt;/h3&gt;

&lt;p&gt;
  I approached a lot of people for feedback about my project, and a surprisingly high number were interested in getting involved. After happily accepting their support, nothing happened. Turns out there are two lessons to gleam here: 1) Figuring out how to manage volunteers in a way that also respects their time and their interests is difficult. 2) The people excited enough to volunteer are already sold on your product, so it&amp;#8217;s important not to take their excitement &lt;em&gt;too &lt;/em&gt; seriously. The rest of your target market still needs to be convinced to care about your community enough to join.
&lt;/p&gt;

&lt;h3&gt;
  5) Make your homepage interesting enough to visit twice.
&lt;/h3&gt;

&lt;p&gt;
  My landing page was static for the first few weeks. Then I tried to spice it up by embedding a dynamic Wix banner with pretty photographs and an inline menu that walked the user through all the features on the site. Then I realized &lt;em&gt;hey, that&amp;#8217;s still static&lt;/em&gt; and eventually figured out how to tweak the activity.php file (which contained the sitewide newstream, basically) and move it to the home page.
&lt;/p&gt;

&lt;p&gt;
  The point is, you want users to instantaneously be able to see new content that&amp;#8217;s relevant to them every time they load up your page. There&amp;#8217;s probably a reason &lt;a href=&quot;http://quora.com&quot; target=&quot;_blank&quot;&gt;Quora&lt;/a&gt;, &lt;a href=&quot;http://stackoverflow.com&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt; and most Ning networks&lt;a href=&quot;http://thehpalliance.org/&quot; target=&quot;_blank&quot;&gt; &lt;/a&gt;all have news feeds on their front pages.
&lt;/p&gt;

&lt;h3&gt;
  6) Clearly define your niche&lt;strong&gt;. &lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;
  Even if your network shared some of the highest quality content on the internet, users aren&amp;#8217;t going to come back to it when they can visit Google News or The New York Times for their daily news intake. It&amp;#8217;s important to clearly define your site&amp;#8217;s niche so that users will have an easier time understanding how your site adds value to their lives. For example, &lt;a href=&quot;http://quora.com&quot; target=&quot;_blank&quot;&gt;Quora&lt;/a&gt; is the social network where one gets their questions answered; &lt;a href=&quot;http://stackoverflow.com&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt; is a Q&amp;amp;A network for programmers; &lt;a href=&quot;http://linkedin.com&quot; target=&quot;_blank&quot;&gt;Linkedin&lt;/a&gt; is a specific network for jobhunting professionals. What specific need does your social network cater to?
&lt;/p&gt;

&lt;h3&gt;
  7) Don&amp;#8217;t be afraid to ask for e-mail addresses.
&lt;/h3&gt;

&lt;p&gt;
  I initially suffered from a fear of spamming people. Then I realized that &lt;em&gt;every site I&amp;#8217;ve registered an account with&lt;/em&gt; has sent me a welcome e-mail. And then they keep on sending me monthly, if not weekly  newsletters. Why? To make sure I remember that they exist. Even Facebook, which has become an automatic &amp;#8220;second window&amp;#8221; for many users (the first, obviously, is e-mail) still e-mails out tons of annoying notifications and friendship search reminders to new registrants.
&lt;/p&gt;

&lt;p&gt;
  Moral of the story: as long as you give the user a clear &amp;#8220;unsubscribe&amp;#8221; or &amp;#8220;manage preferences&amp;#8221; link, you shouldn&amp;#8217;t feel too bad.
&lt;/p&gt;

&lt;h3&gt;
  8) Beware of outdated plugins and themes.
&lt;/h3&gt;

&lt;p&gt;
  Look at the description closely and check to see if it&amp;#8217;s been tested up to the WordPress version you&amp;#8217;ve installed. If you&amp;#8217;re unsure, search for the plugin forums (every WordPress plugin should have one) and see the latest praises or issues people are discussing on the threads.
&lt;/p&gt;

&lt;h3&gt;
  9) If a new theme or plugin crashes your site, rename or delete it.
&lt;/h3&gt;

&lt;p&gt;
  The first time I got a PHP error from a rogue plugin, I called tech support at my hosting company &amp;#8212; who helpfully fixed the problem for me by asking me about the last thing I did (&amp;#8220;Install a plugin,&amp;#8221; I said) and going into my files to rename the plugin.
&lt;/p&gt;

&lt;p&gt;
  Eventually I learned how to use my hosting account properly by finding the files myself. -_-
&lt;/p&gt;

&lt;h3&gt;
  10) Cook a stew, not a souffle.
&lt;/h3&gt;

&lt;p&gt;
  Tony Brown, an entrepreneur and co-director of the Hart Leadership Program at Duke, gave me this valuable piece of advice when I cold-emailed him to request a meeting.  I had originally intended to obtain advice about how a social network that engaged Duke students could potentially also support non-profits in Durham (Duke-Durham relations were part of his domain). He told me to stop worrying about the details and to treat the project as a stew, not a souffle.
&lt;/p&gt;

&lt;p&gt;
  In other words: Focus first on gaining traction (Does the product add value? Will the targeted really use it?), and &lt;em&gt;then&lt;/em&gt; worry about adding all the cool features, target market expansion, and awesome partnerships.
&lt;/p&gt;
&lt;p&gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
</description>
                <link>http://username.github.io/10-lessons-i-learned-from-designing-an-online-community-using-wordpress-and-buddypress/</link>
                <guid>http://username.github.io/10-lessons-i-learned-from-designing-an-online-community-using-wordpress-and-buddypress</guid>
                <pubDate>2011-08-05T00:00:00-04:00</pubDate>
        </item>


</channel>
</rss>
